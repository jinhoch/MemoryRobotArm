
15.robotarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bd4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08007d84  08007d84  00017d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fcc  08007fcc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007fcc  08007fcc  00017fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fd4  08007fd4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fd4  08007fd4  00017fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fd8  08007fd8  00017fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000001ec  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  20000260  20000260  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001355c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e35  00000000  00000000  00033600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001088  00000000  00000000  00036438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f30  00000000  00000000  000374c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027506  00000000  00000000  000383f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015816  00000000  00000000  0005f8f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee1bd  00000000  00000000  0007510c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001632c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cd4  00000000  00000000  0016331c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007d6c 	.word	0x08007d6c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08007d6c 	.word	0x08007d6c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d82:	4b3d      	ldr	r3, [pc, #244]	; (8000e78 <MX_ADC1_Init+0x108>)
 8000d84:	4a3d      	ldr	r2, [pc, #244]	; (8000e7c <MX_ADC1_Init+0x10c>)
 8000d86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d88:	4b3b      	ldr	r3, [pc, #236]	; (8000e78 <MX_ADC1_Init+0x108>)
 8000d8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d90:	4b39      	ldr	r3, [pc, #228]	; (8000e78 <MX_ADC1_Init+0x108>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d96:	4b38      	ldr	r3, [pc, #224]	; (8000e78 <MX_ADC1_Init+0x108>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d9c:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <MX_ADC1_Init+0x108>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da2:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <MX_ADC1_Init+0x108>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000daa:	4b33      	ldr	r3, [pc, #204]	; (8000e78 <MX_ADC1_Init+0x108>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db0:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <MX_ADC1_Init+0x108>)
 8000db2:	4a33      	ldr	r2, [pc, #204]	; (8000e80 <MX_ADC1_Init+0x110>)
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db6:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <MX_ADC1_Init+0x108>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000dbc:	4b2e      	ldr	r3, [pc, #184]	; (8000e78 <MX_ADC1_Init+0x108>)
 8000dbe:	2205      	movs	r2, #5
 8000dc0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000dc2:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <MX_ADC1_Init+0x108>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dca:	4b2b      	ldr	r3, [pc, #172]	; (8000e78 <MX_ADC1_Init+0x108>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd0:	4829      	ldr	r0, [pc, #164]	; (8000e78 <MX_ADC1_Init+0x108>)
 8000dd2:	f001 fcf5 	bl	80027c0 <HAL_ADC_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ddc:	f001 f848 	bl	8001e70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000de0:	230a      	movs	r3, #10
 8000de2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000de8:	2304      	movs	r3, #4
 8000dea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dec:	463b      	mov	r3, r7
 8000dee:	4619      	mov	r1, r3
 8000df0:	4821      	ldr	r0, [pc, #132]	; (8000e78 <MX_ADC1_Init+0x108>)
 8000df2:	f001 fe57 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000dfc:	f001 f838 	bl	8001e70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000e00:	230d      	movs	r3, #13
 8000e02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	481a      	ldr	r0, [pc, #104]	; (8000e78 <MX_ADC1_Init+0x108>)
 8000e0e:	f001 fe49 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e18:	f001 f82a 	bl	8001e70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e20:	2303      	movs	r3, #3
 8000e22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	4619      	mov	r1, r3
 8000e28:	4813      	ldr	r0, [pc, #76]	; (8000e78 <MX_ADC1_Init+0x108>)
 8000e2a:	f001 fe3b 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000e34:	f001 f81c 	bl	8001e70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e40:	463b      	mov	r3, r7
 8000e42:	4619      	mov	r1, r3
 8000e44:	480c      	ldr	r0, [pc, #48]	; (8000e78 <MX_ADC1_Init+0x108>)
 8000e46:	f001 fe2d 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000e50:	f001 f80e 	bl	8001e70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e54:	2305      	movs	r3, #5
 8000e56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000e58:	2305      	movs	r3, #5
 8000e5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_ADC1_Init+0x108>)
 8000e62:	f001 fe1f 	bl	8002aa4 <HAL_ADC_ConfigChannel>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000e6c:	f001 f800 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000090 	.word	0x20000090
 8000e7c:	40012000 	.word	0x40012000
 8000e80:	0f000001 	.word	0x0f000001

08000e84 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a3c      	ldr	r2, [pc, #240]	; (8000f94 <HAL_ADC_MspInit+0x110>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d171      	bne.n	8000f8a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <HAL_ADC_MspInit+0x114>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	4a3a      	ldr	r2, [pc, #232]	; (8000f98 <HAL_ADC_MspInit+0x114>)
 8000eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb6:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <HAL_ADC_MspInit+0x114>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	4b34      	ldr	r3, [pc, #208]	; (8000f98 <HAL_ADC_MspInit+0x114>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a33      	ldr	r2, [pc, #204]	; (8000f98 <HAL_ADC_MspInit+0x114>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <HAL_ADC_MspInit+0x114>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <HAL_ADC_MspInit+0x114>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a2c      	ldr	r2, [pc, #176]	; (8000f98 <HAL_ADC_MspInit+0x114>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <HAL_ADC_MspInit+0x114>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000efa:	2309      	movs	r3, #9
 8000efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000efe:	2303      	movs	r3, #3
 8000f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4823      	ldr	r0, [pc, #140]	; (8000f9c <HAL_ADC_MspInit+0x118>)
 8000f0e:	f002 fd8d 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f12:	2338      	movs	r3, #56	; 0x38
 8000f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f16:	2303      	movs	r3, #3
 8000f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	481e      	ldr	r0, [pc, #120]	; (8000fa0 <HAL_ADC_MspInit+0x11c>)
 8000f26:	f002 fd81 	bl	8003a2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <HAL_ADC_MspInit+0x120>)
 8000f2c:	4a1e      	ldr	r2, [pc, #120]	; (8000fa8 <HAL_ADC_MspInit+0x124>)
 8000f2e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <HAL_ADC_MspInit+0x120>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <HAL_ADC_MspInit+0x120>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <HAL_ADC_MspInit+0x120>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <HAL_ADC_MspInit+0x120>)
 8000f44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f48:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <HAL_ADC_MspInit+0x120>)
 8000f4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f50:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <HAL_ADC_MspInit+0x120>)
 8000f54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f58:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_ADC_MspInit+0x120>)
 8000f5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f60:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <HAL_ADC_MspInit+0x120>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_ADC_MspInit+0x120>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <HAL_ADC_MspInit+0x120>)
 8000f70:	f002 f95a 	bl	8003228 <HAL_DMA_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000f7a:	f000 ff79 	bl	8001e70 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <HAL_ADC_MspInit+0x120>)
 8000f82:	639a      	str	r2, [r3, #56]	; 0x38
 8000f84:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <HAL_ADC_MspInit+0x120>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3728      	adds	r7, #40	; 0x28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40012000 	.word	0x40012000
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020800 	.word	0x40020800
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	200000d8 	.word	0x200000d8
 8000fa8:	40026410 	.word	0x40026410

08000fac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_DMA_Init+0x3c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <MX_DMA_Init+0x3c>)
 8000fbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_DMA_Init+0x3c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2038      	movs	r0, #56	; 0x38
 8000fd4:	f002 f8f1 	bl	80031ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000fd8:	2038      	movs	r0, #56	; 0x38
 8000fda:	f002 f90a 	bl	80031f2 <HAL_NVIC_EnableIRQ>

}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800

08000fec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <MX_GPIO_Init+0x84>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a1d      	ldr	r2, [pc, #116]	; (8001070 <MX_GPIO_Init+0x84>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <MX_GPIO_Init+0x84>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_GPIO_Init+0x84>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a16      	ldr	r2, [pc, #88]	; (8001070 <MX_GPIO_Init+0x84>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_GPIO_Init+0x84>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <MX_GPIO_Init+0x84>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <MX_GPIO_Init+0x84>)
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <MX_GPIO_Init+0x84>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_GPIO_Init+0x84>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a08      	ldr	r2, [pc, #32]	; (8001070 <MX_GPIO_Init+0x84>)
 8001050:	f043 0308 	orr.w	r3, r3, #8
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_GPIO_Init+0x84>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800

08001074 <__io_putchar>:

/* USER CODE BEGIN PV */

uint8_t rx_data = 0;
uint8_t flag = 0;
int __io_putchar(int ch) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 1000);
 800107c:	1d39      	adds	r1, r7, #4
 800107e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001082:	2201      	movs	r2, #1
 8001084:	4803      	ldr	r0, [pc, #12]	; (8001094 <__io_putchar+0x20>)
 8001086:	f004 fe00 	bl	8005c8a <HAL_UART_Transmit>
	return ch;
 800108a:	687b      	ldr	r3, [r7, #4]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000208 	.word	0x20000208

08001098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109e:	f001 faf9 	bl	8002694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a2:	f000 f871 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a6:	f7ff ffa1 	bl	8000fec <MX_GPIO_Init>
  MX_RTC_Init();
 80010aa:	f000 fee7 	bl	8001e7c <MX_RTC_Init>
  MX_TIM2_Init();
 80010ae:	f001 f865 	bl	800217c <MX_TIM2_Init>
  MX_DMA_Init();
 80010b2:	f7ff ff7b 	bl	8000fac <MX_DMA_Init>
  MX_TIM3_Init();
 80010b6:	f001 f8f9 	bl	80022ac <MX_TIM3_Init>
  MX_ADC1_Init();
 80010ba:	f7ff fe59 	bl	8000d70 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80010be:	f001 fa4d 	bl	800255c <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80010c2:	f000 f8d3 	bl	800126c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 80010c6:	2201      	movs	r2, #1
 80010c8:	4927      	ldr	r1, [pc, #156]	; (8001168 <main+0xd0>)
 80010ca:	4828      	ldr	r0, [pc, #160]	; (800116c <main+0xd4>)
 80010cc:	f004 fe6f 	bl	8005dae <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);   //PA0 CCR 1  arm1
 80010d0:	2100      	movs	r1, #0
 80010d2:	4827      	ldr	r0, [pc, #156]	; (8001170 <main+0xd8>)
 80010d4:	f003 fe60 	bl	8004d98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);   //PB3 CCR 2	arm2
 80010d8:	2104      	movs	r1, #4
 80010da:	4825      	ldr	r0, [pc, #148]	; (8001170 <main+0xd8>)
 80010dc:	f003 fe5c 	bl	8004d98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);   //PB10 CCR 3 arm3
 80010e0:	2108      	movs	r1, #8
 80010e2:	4823      	ldr	r0, [pc, #140]	; (8001170 <main+0xd8>)
 80010e4:	f003 fe58 	bl	8004d98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);   //PA3 CCR 4 griper
 80010e8:	2100      	movs	r1, #0
 80010ea:	4822      	ldr	r0, [pc, #136]	; (8001174 <main+0xdc>)
 80010ec:	f003 fe54 	bl	8004d98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);   //PA3 CCR 4 griper
 80010f0:	2104      	movs	r1, #4
 80010f2:	4820      	ldr	r0, [pc, #128]	; (8001174 <main+0xdc>)
 80010f4:	f003 fe50 	bl	8004d98 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1,adcvalue,5);       //ADC1 CH10,2,3,4,5 ->
 80010f8:	2205      	movs	r2, #5
 80010fa:	491f      	ldr	r1, [pc, #124]	; (8001178 <main+0xe0>)
 80010fc:	481f      	ldr	r0, [pc, #124]	; (800117c <main+0xe4>)
 80010fe:	f001 fba3 	bl	8002848 <HAL_ADC_Start_DMA>

	memory_value memory_arm;
	init_malloc(&memory_arm);
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f8cd 	bl	80012a4 <init_malloc>

	ccr.arm1 = MIDARM1;
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <main+0xe8>)
 800110c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001110:	801a      	strh	r2, [r3, #0]
	ccr.arm2 = MIDARM2;
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <main+0xe8>)
 8001114:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001118:	805a      	strh	r2, [r3, #2]
	ccr.arm3 = MIDARM3;
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <main+0xe8>)
 800111c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001120:	809a      	strh	r2, [r3, #4]
	ccr.griper = MIDGRIPER;
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <main+0xe8>)
 8001124:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001128:	80da      	strh	r2, [r3, #6]
	ccr.rotation = MIDROTATION;
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <main+0xe8>)
 800112c:	f240 2226 	movw	r2, #550	; 0x226
 8001130:	811a      	strh	r2, [r3, #8]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {


		if (flag == 0) {
 8001132:	4b14      	ldr	r3, [pc, #80]	; (8001184 <main+0xec>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <main+0xa6>
			robot_arm_move();
 800113a:	f000 fa21 	bl	8001580 <robot_arm_move>
		}

		if (flag == 1) {
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <main+0xec>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d103      	bne.n	800114e <main+0xb6>
			robot_arm_memory(&memory_arm);
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fb1b 	bl	8001784 <robot_arm_memory>
		}

		if (flag == 2) {
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <main+0xec>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d1ed      	bne.n	8001132 <main+0x9a>
			robot_arm_memory_move(&memory_arm);
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fc55 	bl	8001a08 <robot_arm_memory_move>
			flag =0;
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <main+0xec>)
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
		if (flag == 0) {
 8001164:	e7e5      	b.n	8001132 <main+0x9a>
 8001166:	bf00      	nop
 8001168:	20000138 	.word	0x20000138
 800116c:	20000208 	.word	0x20000208
 8001170:	20000178 	.word	0x20000178
 8001174:	200001c0 	.word	0x200001c0
 8001178:	20000148 	.word	0x20000148
 800117c:	20000090 	.word	0x20000090
 8001180:	2000013c 	.word	0x2000013c
 8001184:	20000139 	.word	0x20000139

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	; 0x50
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0320 	add.w	r3, r7, #32
 8001192:	2230      	movs	r2, #48	; 0x30
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f005 fddc 	bl	8006d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <SystemClock_Config+0xdc>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a2b      	ldr	r2, [pc, #172]	; (8001264 <SystemClock_Config+0xdc>)
 80011b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b29      	ldr	r3, [pc, #164]	; (8001264 <SystemClock_Config+0xdc>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	4b26      	ldr	r3, [pc, #152]	; (8001268 <SystemClock_Config+0xe0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a25      	ldr	r2, [pc, #148]	; (8001268 <SystemClock_Config+0xe0>)
 80011d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b23      	ldr	r3, [pc, #140]	; (8001268 <SystemClock_Config+0xe0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80011e4:	2306      	movs	r3, #6
 80011e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011e8:	2301      	movs	r3, #1
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ec:	2301      	movs	r3, #1
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f0:	2310      	movs	r3, #16
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f4:	2302      	movs	r3, #2
 80011f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011f8:	2300      	movs	r3, #0
 80011fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011fc:	2308      	movs	r3, #8
 80011fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001200:	23b4      	movs	r3, #180	; 0xb4
 8001202:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001204:	2302      	movs	r3, #2
 8001206:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001208:	2304      	movs	r3, #4
 800120a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	4618      	mov	r0, r3
 8001212:	f002 fe07 	bl	8003e24 <HAL_RCC_OscConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800121c:	f000 fe28 	bl	8001e70 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001220:	f002 fdb0 	bl	8003d84 <HAL_PWREx_EnableOverDrive>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800122a:	f000 fe21 	bl	8001e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122e:	230f      	movs	r3, #15
 8001230:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001232:	2302      	movs	r3, #2
 8001234:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800123a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800123e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001240:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001244:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2105      	movs	r1, #5
 800124c:	4618      	mov	r0, r3
 800124e:	f003 f861 	bl	8004314 <HAL_RCC_ClockConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001258:	f000 fe0a 	bl	8001e70 <Error_Handler>
  }
}
 800125c:	bf00      	nop
 800125e:	3750      	adds	r7, #80	; 0x50
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023800 	.word	0x40023800
 8001268:	40007000 	.word	0x40007000

0800126c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2100      	movs	r1, #0
 8001274:	2027      	movs	r0, #39	; 0x27
 8001276:	f001 ffa0 	bl	80031ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 800127a:	2027      	movs	r0, #39	; 0x27
 800127c:	f001 ffb9 	bl	80031f2 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	2100      	movs	r1, #0
 8001284:	201c      	movs	r0, #28
 8001286:	f001 ff98 	bl	80031ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800128a:	201c      	movs	r0, #28
 800128c:	f001 ffb1 	bl	80031f2 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	201d      	movs	r0, #29
 8001296:	f001 ff90 	bl	80031ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800129a:	201d      	movs	r0, #29
 800129c:	f001 ffa9 	bl	80031f2 <HAL_NVIC_EnableIRQ>
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <init_malloc>:

/* USER CODE BEGIN 4 */

void init_malloc(memory_value *memory_arm) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

	memory_arm->memory_arm1 = (uint16_t*) malloc(sizeof(uint16_t) * capacity);
 80012ac:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <init_malloc+0xc4>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4618      	mov	r0, r3
 80012b4:	f005 fd3e 	bl	8006d34 <malloc>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	601a      	str	r2, [r3, #0]
	if (memory_arm->memory_arm1 == NULL) {
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d103      	bne.n	80012d0 <init_malloc+0x2c>
		printf("\r\n malloc falied \r\n");
 80012c8:	4828      	ldr	r0, [pc, #160]	; (800136c <init_malloc+0xc8>)
 80012ca:	f005 feb1 	bl	8007030 <puts>
		return;
 80012ce:	e047      	b.n	8001360 <init_malloc+0xbc>
	}
	memory_arm->memory_arm2 = (uint16_t*) malloc(sizeof(uint16_t) * capacity);
 80012d0:	4b25      	ldr	r3, [pc, #148]	; (8001368 <init_malloc+0xc4>)
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4618      	mov	r0, r3
 80012d8:	f005 fd2c 	bl	8006d34 <malloc>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	605a      	str	r2, [r3, #4]
	if (memory_arm->memory_arm2 == NULL) {
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d103      	bne.n	80012f4 <init_malloc+0x50>
		printf("\r\n malloc falied \r\n");
 80012ec:	481f      	ldr	r0, [pc, #124]	; (800136c <init_malloc+0xc8>)
 80012ee:	f005 fe9f 	bl	8007030 <puts>
		return;
 80012f2:	e035      	b.n	8001360 <init_malloc+0xbc>
	}
	memory_arm->memory_arm3 = (uint16_t*) malloc(sizeof(uint16_t) * capacity);
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <init_malloc+0xc4>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4618      	mov	r0, r3
 80012fc:	f005 fd1a 	bl	8006d34 <malloc>
 8001300:	4603      	mov	r3, r0
 8001302:	461a      	mov	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	609a      	str	r2, [r3, #8]
	if (memory_arm->memory_arm3 == NULL) {
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d103      	bne.n	8001318 <init_malloc+0x74>
		printf("\r\n malloc falied \r\n");
 8001310:	4816      	ldr	r0, [pc, #88]	; (800136c <init_malloc+0xc8>)
 8001312:	f005 fe8d 	bl	8007030 <puts>
		return;
 8001316:	e023      	b.n	8001360 <init_malloc+0xbc>
	}
	memory_arm->memory_griper = (uint16_t*) malloc(sizeof(uint16_t) * capacity);
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <init_malloc+0xc4>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4618      	mov	r0, r3
 8001320:	f005 fd08 	bl	8006d34 <malloc>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	60da      	str	r2, [r3, #12]
	if (memory_arm->memory_griper == NULL) {
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d103      	bne.n	800133c <init_malloc+0x98>
		printf("\r\n malloc falied \r\n");
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <init_malloc+0xc8>)
 8001336:	f005 fe7b 	bl	8007030 <puts>
		return;
 800133a:	e011      	b.n	8001360 <init_malloc+0xbc>
	}
	memory_arm->memory_rotation = (uint16_t*) malloc(sizeof(uint16_t) * capacity);
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <init_malloc+0xc4>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4618      	mov	r0, r3
 8001344:	f005 fcf6 	bl	8006d34 <malloc>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	611a      	str	r2, [r3, #16]
	if (memory_arm->memory_rotation == NULL) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d103      	bne.n	8001360 <init_malloc+0xbc>
		printf("\r\n malloc falied \r\n");
 8001358:	4804      	ldr	r0, [pc, #16]	; (800136c <init_malloc+0xc8>)
 800135a:	f005 fe69 	bl	8007030 <puts>
		return;
 800135e:	bf00      	nop
	}



}
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000000 	.word	0x20000000
 800136c:	08007d84 	.word	0x08007d84

08001370 <resize_malloc>:

memory_value * resize_malloc(memory_value *memory_arm) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]

	uint16_t capacity_tmp = capacity;
 8001378:	4b7d      	ldr	r3, [pc, #500]	; (8001570 <resize_malloc+0x200>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	83fb      	strh	r3, [r7, #30]
	capacity += INIT_CAPACITY;
 800137e:	4b7c      	ldr	r3, [pc, #496]	; (8001570 <resize_malloc+0x200>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	3332      	adds	r3, #50	; 0x32
 8001384:	b29a      	uxth	r2, r3
 8001386:	4b7a      	ldr	r3, [pc, #488]	; (8001570 <resize_malloc+0x200>)
 8001388:	801a      	strh	r2, [r3, #0]

	uint16_t *arm1_tmp = (uint16_t*) malloc(sizeof(uint16_t) * capacity);
 800138a:	4b79      	ldr	r3, [pc, #484]	; (8001570 <resize_malloc+0x200>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4618      	mov	r0, r3
 8001392:	f005 fccf 	bl	8006d34 <malloc>
 8001396:	4603      	mov	r3, r0
 8001398:	61bb      	str	r3, [r7, #24]
	if (arm1_tmp == NULL) {
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d104      	bne.n	80013aa <resize_malloc+0x3a>
		printf("\r\n resize falied \r\n");
 80013a0:	4874      	ldr	r0, [pc, #464]	; (8001574 <resize_malloc+0x204>)
 80013a2:	f005 fe45 	bl	8007030 <puts>
		return NULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e0dd      	b.n	8001566 <resize_malloc+0x1f6>
	}
	uint16_t *arm2_tmp = (uint16_t*) malloc(sizeof(uint16_t) * capacity);
 80013aa:	4b71      	ldr	r3, [pc, #452]	; (8001570 <resize_malloc+0x200>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4618      	mov	r0, r3
 80013b2:	f005 fcbf 	bl	8006d34 <malloc>
 80013b6:	4603      	mov	r3, r0
 80013b8:	617b      	str	r3, [r7, #20]
	if (arm2_tmp == NULL) {
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d104      	bne.n	80013ca <resize_malloc+0x5a>
		printf("\r\n resize falied \r\n");
 80013c0:	486c      	ldr	r0, [pc, #432]	; (8001574 <resize_malloc+0x204>)
 80013c2:	f005 fe35 	bl	8007030 <puts>
		return NULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e0cd      	b.n	8001566 <resize_malloc+0x1f6>
	}
	uint16_t *arm3_tmp = (uint16_t*) malloc(sizeof(uint16_t) * capacity);
 80013ca:	4b69      	ldr	r3, [pc, #420]	; (8001570 <resize_malloc+0x200>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4618      	mov	r0, r3
 80013d2:	f005 fcaf 	bl	8006d34 <malloc>
 80013d6:	4603      	mov	r3, r0
 80013d8:	613b      	str	r3, [r7, #16]
	if (arm3_tmp == NULL) {
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d104      	bne.n	80013ea <resize_malloc+0x7a>
		printf("\r\n resize falied \r\n");
 80013e0:	4864      	ldr	r0, [pc, #400]	; (8001574 <resize_malloc+0x204>)
 80013e2:	f005 fe25 	bl	8007030 <puts>
		return NULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e0bd      	b.n	8001566 <resize_malloc+0x1f6>
	}
	uint16_t *griper_tmp = (uint16_t*) malloc(sizeof(uint16_t) * capacity);
 80013ea:	4b61      	ldr	r3, [pc, #388]	; (8001570 <resize_malloc+0x200>)
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4618      	mov	r0, r3
 80013f2:	f005 fc9f 	bl	8006d34 <malloc>
 80013f6:	4603      	mov	r3, r0
 80013f8:	60fb      	str	r3, [r7, #12]
	if (griper_tmp == NULL) {
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d104      	bne.n	800140a <resize_malloc+0x9a>
		printf("\r\n resize falied \r\n");
 8001400:	485c      	ldr	r0, [pc, #368]	; (8001574 <resize_malloc+0x204>)
 8001402:	f005 fe15 	bl	8007030 <puts>
		return NULL;
 8001406:	2300      	movs	r3, #0
 8001408:	e0ad      	b.n	8001566 <resize_malloc+0x1f6>
	}
	uint16_t *rotation_tmp = (uint16_t*) malloc(sizeof(uint16_t) * capacity);
 800140a:	4b59      	ldr	r3, [pc, #356]	; (8001570 <resize_malloc+0x200>)
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4618      	mov	r0, r3
 8001412:	f005 fc8f 	bl	8006d34 <malloc>
 8001416:	4603      	mov	r3, r0
 8001418:	60bb      	str	r3, [r7, #8]
	if (rotation_tmp == NULL) {
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d104      	bne.n	800142a <resize_malloc+0xba>
		printf("\r\n resize falied \r\n");
 8001420:	4854      	ldr	r0, [pc, #336]	; (8001574 <resize_malloc+0x204>)
 8001422:	f005 fe05 	bl	8007030 <puts>
		return NULL;
 8001426:	2300      	movs	r3, #0
 8001428:	e09d      	b.n	8001566 <resize_malloc+0x1f6>
	}

	printf("\r\n malloc resize %d -> %d \r\n", capacity_tmp, capacity);
 800142a:	8bfb      	ldrh	r3, [r7, #30]
 800142c:	4a50      	ldr	r2, [pc, #320]	; (8001570 <resize_malloc+0x200>)
 800142e:	8812      	ldrh	r2, [r2, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	4851      	ldr	r0, [pc, #324]	; (8001578 <resize_malloc+0x208>)
 8001434:	f005 fd76 	bl	8006f24 <iprintf>

	for (int i = 0; i < capacity_tmp; i++) {
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
 800143c:	e039      	b.n	80014b2 <resize_malloc+0x142>
		arm1_tmp[i] = memory_arm->memory_arm1[i];
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	441a      	add	r2, r3
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	69b9      	ldr	r1, [r7, #24]
 800144e:	440b      	add	r3, r1
 8001450:	8812      	ldrh	r2, [r2, #0]
 8001452:	801a      	strh	r2, [r3, #0]
		arm2_tmp[i] = memory_arm->memory_arm2[i];
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	441a      	add	r2, r3
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	6979      	ldr	r1, [r7, #20]
 8001464:	440b      	add	r3, r1
 8001466:	8812      	ldrh	r2, [r2, #0]
 8001468:	801a      	strh	r2, [r3, #0]
		arm3_tmp[i] = memory_arm->memory_arm3[i];
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	441a      	add	r2, r3
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	6939      	ldr	r1, [r7, #16]
 800147a:	440b      	add	r3, r1
 800147c:	8812      	ldrh	r2, [r2, #0]
 800147e:	801a      	strh	r2, [r3, #0]
		griper_tmp[i] = memory_arm->memory_griper[i];
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	441a      	add	r2, r3
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	68f9      	ldr	r1, [r7, #12]
 8001490:	440b      	add	r3, r1
 8001492:	8812      	ldrh	r2, [r2, #0]
 8001494:	801a      	strh	r2, [r3, #0]
		rotation_tmp[i] = memory_arm->memory_rotation[i];
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691a      	ldr	r2, [r3, #16]
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	441a      	add	r2, r3
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	440b      	add	r3, r1
 80014a8:	8812      	ldrh	r2, [r2, #0]
 80014aa:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < capacity_tmp; i++) {
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	3301      	adds	r3, #1
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
 80014b2:	8bfb      	ldrh	r3, [r7, #30]
 80014b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b6:	429a      	cmp	r2, r3
 80014b8:	dbc1      	blt.n	800143e <resize_malloc+0xce>
	}



	for (int i = capacity_tmp; i < capacity; i++) {
 80014ba:	8bfb      	ldrh	r3, [r7, #30]
 80014bc:	623b      	str	r3, [r7, #32]
 80014be:	e020      	b.n	8001502 <resize_malloc+0x192>
		arm1_tmp[i] = 0;
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4413      	add	r3, r2
 80014c8:	2200      	movs	r2, #0
 80014ca:	801a      	strh	r2, [r3, #0]
		arm2_tmp[i] = 0;
 80014cc:	6a3b      	ldr	r3, [r7, #32]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	4413      	add	r3, r2
 80014d4:	2200      	movs	r2, #0
 80014d6:	801a      	strh	r2, [r3, #0]
		arm3_tmp[i] = 0;
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4413      	add	r3, r2
 80014e0:	2200      	movs	r2, #0
 80014e2:	801a      	strh	r2, [r3, #0]
		griper_tmp[i] = 0;
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	4413      	add	r3, r2
 80014ec:	2200      	movs	r2, #0
 80014ee:	801a      	strh	r2, [r3, #0]
		rotation_tmp[i] = 0;
 80014f0:	6a3b      	ldr	r3, [r7, #32]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	4413      	add	r3, r2
 80014f8:	2200      	movs	r2, #0
 80014fa:	801a      	strh	r2, [r3, #0]
	for (int i = capacity_tmp; i < capacity; i++) {
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	3301      	adds	r3, #1
 8001500:	623b      	str	r3, [r7, #32]
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <resize_malloc+0x200>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	6a3b      	ldr	r3, [r7, #32]
 800150a:	4293      	cmp	r3, r2
 800150c:	dbd8      	blt.n	80014c0 <resize_malloc+0x150>
	}

	free(memory_arm->memory_arm1);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f005 fc16 	bl	8006d44 <free>
	free(memory_arm->memory_arm2);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4618      	mov	r0, r3
 800151e:	f005 fc11 	bl	8006d44 <free>
	free(memory_arm->memory_arm3);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	4618      	mov	r0, r3
 8001528:	f005 fc0c 	bl	8006d44 <free>
	free(memory_arm->memory_griper);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4618      	mov	r0, r3
 8001532:	f005 fc07 	bl	8006d44 <free>
	free(memory_arm->memory_rotation);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	4618      	mov	r0, r3
 800153c:	f005 fc02 	bl	8006d44 <free>

	memory_arm->memory_arm1 = arm1_tmp;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	601a      	str	r2, [r3, #0]
	memory_arm->memory_arm2 = arm2_tmp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	605a      	str	r2, [r3, #4]
	memory_arm->memory_arm3 = arm3_tmp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	609a      	str	r2, [r3, #8]
	memory_arm->memory_griper = griper_tmp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	60da      	str	r2, [r3, #12]
	memory_arm->memory_rotation = rotation_tmp;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	611a      	str	r2, [r3, #16]

	printf("\r\n resize complete \r\n");
 800155e:	4807      	ldr	r0, [pc, #28]	; (800157c <resize_malloc+0x20c>)
 8001560:	f005 fd66 	bl	8007030 <puts>
	return memory_arm;
 8001564:	687b      	ldr	r3, [r7, #4]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3728      	adds	r7, #40	; 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000000 	.word	0x20000000
 8001574:	08007d98 	.word	0x08007d98
 8001578:	08007dac 	.word	0x08007dac
 800157c:	08007dcc 	.word	0x08007dcc

08001580 <robot_arm_move>:

void robot_arm_move() {
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b083      	sub	sp, #12
 8001584:	af02      	add	r7, sp, #8


	ccr.arm1 = 500+(adcvalue[0] / 6.83);
 8001586:	4b76      	ldr	r3, [pc, #472]	; (8001760 <robot_arm_move+0x1e0>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffd2 	bl	8000534 <__aeabi_i2d>
 8001590:	a369      	add	r3, pc, #420	; (adr r3, 8001738 <robot_arm_move+0x1b8>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	f7ff f961 	bl	800085c <__aeabi_ddiv>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	4b6f      	ldr	r3, [pc, #444]	; (8001764 <robot_arm_move+0x1e4>)
 80015a8:	f7fe fe78 	bl	800029c <__adddf3>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f7ff fa3a 	bl	8000a2c <__aeabi_d2uiz>
 80015b8:	4603      	mov	r3, r0
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	4b6a      	ldr	r3, [pc, #424]	; (8001768 <robot_arm_move+0x1e8>)
 80015be:	801a      	strh	r2, [r3, #0]
	ccr.arm2 = 550+(adcvalue[1]/7.5);
 80015c0:	4b67      	ldr	r3, [pc, #412]	; (8001760 <robot_arm_move+0x1e0>)
 80015c2:	885b      	ldrh	r3, [r3, #2]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ffb5 	bl	8000534 <__aeabi_i2d>
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	4b67      	ldr	r3, [pc, #412]	; (800176c <robot_arm_move+0x1ec>)
 80015d0:	f7ff f944 	bl	800085c <__aeabi_ddiv>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	4b63      	ldr	r3, [pc, #396]	; (8001770 <robot_arm_move+0x1f0>)
 80015e2:	f7fe fe5b 	bl	800029c <__adddf3>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff fa1d 	bl	8000a2c <__aeabi_d2uiz>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	4b5c      	ldr	r3, [pc, #368]	; (8001768 <robot_arm_move+0x1e8>)
 80015f8:	805a      	strh	r2, [r3, #2]
	ccr.arm3 = 300+(adcvalue[2]/ 5.12);
 80015fa:	4b59      	ldr	r3, [pc, #356]	; (8001760 <robot_arm_move+0x1e0>)
 80015fc:	889b      	ldrh	r3, [r3, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ff98 	bl	8000534 <__aeabi_i2d>
 8001604:	a34e      	add	r3, pc, #312	; (adr r3, 8001740 <robot_arm_move+0x1c0>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7ff f927 	bl	800085c <__aeabi_ddiv>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	a34c      	add	r3, pc, #304	; (adr r3, 8001748 <robot_arm_move+0x1c8>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7fe fe3e 	bl	800029c <__adddf3>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff fa00 	bl	8000a2c <__aeabi_d2uiz>
 800162c:	4603      	mov	r3, r0
 800162e:	b29a      	uxth	r2, r3
 8001630:	4b4d      	ldr	r3, [pc, #308]	; (8001768 <robot_arm_move+0x1e8>)
 8001632:	809a      	strh	r2, [r3, #4]
	ccr.griper = 500 + (adcvalue[3]/ 10.24);
 8001634:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <robot_arm_move+0x1e0>)
 8001636:	88db      	ldrh	r3, [r3, #6]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff7b 	bl	8000534 <__aeabi_i2d>
 800163e:	a344      	add	r3, pc, #272	; (adr r3, 8001750 <robot_arm_move+0x1d0>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7ff f90a 	bl	800085c <__aeabi_ddiv>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b43      	ldr	r3, [pc, #268]	; (8001764 <robot_arm_move+0x1e4>)
 8001656:	f7fe fe21 	bl	800029c <__adddf3>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f7ff f9e3 	bl	8000a2c <__aeabi_d2uiz>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <robot_arm_move+0x1e8>)
 800166c:	80da      	strh	r2, [r3, #6]
	ccr.rotation = 200 + (adcvalue[4]/ 4.55);
 800166e:	4b3c      	ldr	r3, [pc, #240]	; (8001760 <robot_arm_move+0x1e0>)
 8001670:	891b      	ldrh	r3, [r3, #8]
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff5e 	bl	8000534 <__aeabi_i2d>
 8001678:	a337      	add	r3, pc, #220	; (adr r3, 8001758 <robot_arm_move+0x1d8>)
 800167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167e:	f7ff f8ed 	bl	800085c <__aeabi_ddiv>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	4b39      	ldr	r3, [pc, #228]	; (8001774 <robot_arm_move+0x1f4>)
 8001690:	f7fe fe04 	bl	800029c <__adddf3>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff f9c6 	bl	8000a2c <__aeabi_d2uiz>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	4b30      	ldr	r3, [pc, #192]	; (8001768 <robot_arm_move+0x1e8>)
 80016a6:	811a      	strh	r2, [r3, #8]

	TIM2->CCR1 = ccr.arm1;
 80016a8:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <robot_arm_move+0x1e8>)
 80016aa:	881a      	ldrh	r2, [r3, #0]
 80016ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016b0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = ccr.arm2;
 80016b2:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <robot_arm_move+0x1e8>)
 80016b4:	885a      	ldrh	r2, [r3, #2]
 80016b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ba:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = ccr.arm3;
 80016bc:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <robot_arm_move+0x1e8>)
 80016be:	889a      	ldrh	r2, [r3, #4]
 80016c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016c4:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR2 = ccr.griper;
 80016c6:	4b28      	ldr	r3, [pc, #160]	; (8001768 <robot_arm_move+0x1e8>)
 80016c8:	88da      	ldrh	r2, [r3, #6]
 80016ca:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <robot_arm_move+0x1f8>)
 80016cc:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR1 = ccr.rotation;
 80016ce:	4b26      	ldr	r3, [pc, #152]	; (8001768 <robot_arm_move+0x1e8>)
 80016d0:	891a      	ldrh	r2, [r3, #8]
 80016d2:	4b29      	ldr	r3, [pc, #164]	; (8001778 <robot_arm_move+0x1f8>)
 80016d4:	635a      	str	r2, [r3, #52]	; 0x34

	printf("\r\n 1: %4d, 2: %4d, 3 : %4d, 4 : %4d, 5 : %4d \r\n",adcvalue[0],adcvalue[1],adcvalue[2],adcvalue[3],adcvalue[4]);
 80016d6:	4b22      	ldr	r3, [pc, #136]	; (8001760 <robot_arm_move+0x1e0>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	4619      	mov	r1, r3
 80016dc:	4b20      	ldr	r3, [pc, #128]	; (8001760 <robot_arm_move+0x1e0>)
 80016de:	885b      	ldrh	r3, [r3, #2]
 80016e0:	4618      	mov	r0, r3
 80016e2:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <robot_arm_move+0x1e0>)
 80016e4:	889b      	ldrh	r3, [r3, #4]
 80016e6:	461c      	mov	r4, r3
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <robot_arm_move+0x1e0>)
 80016ea:	88db      	ldrh	r3, [r3, #6]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <robot_arm_move+0x1e0>)
 80016f0:	891b      	ldrh	r3, [r3, #8]
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	9200      	str	r2, [sp, #0]
 80016f6:	4623      	mov	r3, r4
 80016f8:	4602      	mov	r2, r0
 80016fa:	4820      	ldr	r0, [pc, #128]	; (800177c <robot_arm_move+0x1fc>)
 80016fc:	f005 fc12 	bl	8006f24 <iprintf>
	printf("\r\n arm1 : %d, arm2 : %d, arm3 : %d, griper4 : %d, rotation : %d  \r\n",
			ccr.arm1, ccr.arm2, ccr.arm3, ccr.griper, ccr.rotation);
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <robot_arm_move+0x1e8>)
 8001702:	881b      	ldrh	r3, [r3, #0]
	printf("\r\n arm1 : %d, arm2 : %d, arm3 : %d, griper4 : %d, rotation : %d  \r\n",
 8001704:	4619      	mov	r1, r3
			ccr.arm1, ccr.arm2, ccr.arm3, ccr.griper, ccr.rotation);
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <robot_arm_move+0x1e8>)
 8001708:	885b      	ldrh	r3, [r3, #2]
	printf("\r\n arm1 : %d, arm2 : %d, arm3 : %d, griper4 : %d, rotation : %d  \r\n",
 800170a:	4618      	mov	r0, r3
			ccr.arm1, ccr.arm2, ccr.arm3, ccr.griper, ccr.rotation);
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <robot_arm_move+0x1e8>)
 800170e:	889b      	ldrh	r3, [r3, #4]
	printf("\r\n arm1 : %d, arm2 : %d, arm3 : %d, griper4 : %d, rotation : %d  \r\n",
 8001710:	461c      	mov	r4, r3
			ccr.arm1, ccr.arm2, ccr.arm3, ccr.griper, ccr.rotation);
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <robot_arm_move+0x1e8>)
 8001714:	88db      	ldrh	r3, [r3, #6]
	printf("\r\n arm1 : %d, arm2 : %d, arm3 : %d, griper4 : %d, rotation : %d  \r\n",
 8001716:	461a      	mov	r2, r3
			ccr.arm1, ccr.arm2, ccr.arm3, ccr.griper, ccr.rotation);
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <robot_arm_move+0x1e8>)
 800171a:	891b      	ldrh	r3, [r3, #8]
	printf("\r\n arm1 : %d, arm2 : %d, arm3 : %d, griper4 : %d, rotation : %d  \r\n",
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	9200      	str	r2, [sp, #0]
 8001720:	4623      	mov	r3, r4
 8001722:	4602      	mov	r2, r0
 8001724:	4816      	ldr	r0, [pc, #88]	; (8001780 <robot_arm_move+0x200>)
 8001726:	f005 fbfd 	bl	8006f24 <iprintf>
	HAL_Delay(10);
 800172a:	200a      	movs	r0, #10
 800172c:	f001 f824 	bl	8002778 <HAL_Delay>
}
 8001730:	bf00      	nop
 8001732:	3704      	adds	r7, #4
 8001734:	46bd      	mov	sp, r7
 8001736:	bd90      	pop	{r4, r7, pc}
 8001738:	851eb852 	.word	0x851eb852
 800173c:	401b51eb 	.word	0x401b51eb
 8001740:	47ae147b 	.word	0x47ae147b
 8001744:	40147ae1 	.word	0x40147ae1
 8001748:	00000000 	.word	0x00000000
 800174c:	4072c000 	.word	0x4072c000
 8001750:	47ae147b 	.word	0x47ae147b
 8001754:	40247ae1 	.word	0x40247ae1
 8001758:	33333333 	.word	0x33333333
 800175c:	40123333 	.word	0x40123333
 8001760:	20000148 	.word	0x20000148
 8001764:	407f4000 	.word	0x407f4000
 8001768:	2000013c 	.word	0x2000013c
 800176c:	401e0000 	.word	0x401e0000
 8001770:	40813000 	.word	0x40813000
 8001774:	40690000 	.word	0x40690000
 8001778:	40000400 	.word	0x40000400
 800177c:	08007de4 	.word	0x08007de4
 8001780:	08007e14 	.word	0x08007e14

08001784 <robot_arm_memory>:

void robot_arm_memory(memory_value *memory_arm) {
 8001784:	b5b0      	push	{r4, r5, r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af02      	add	r7, sp, #8
 800178a:	6078      	str	r0, [r7, #4]


	memset(memory_arm->memory_arm1,0,sizeof(uint16_t)*capacity);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a98      	ldr	r2, [pc, #608]	; (80019f4 <robot_arm_memory+0x270>)
 8001792:	8812      	ldrh	r2, [r2, #0]
 8001794:	0052      	lsls	r2, r2, #1
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f005 fadb 	bl	8006d54 <memset>
	memset(memory_arm->memory_arm2,0,sizeof(uint16_t)*capacity);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4a94      	ldr	r2, [pc, #592]	; (80019f4 <robot_arm_memory+0x270>)
 80017a4:	8812      	ldrh	r2, [r2, #0]
 80017a6:	0052      	lsls	r2, r2, #1
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f005 fad2 	bl	8006d54 <memset>
	memset(memory_arm->memory_arm3,0,sizeof(uint16_t)*capacity);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a8f      	ldr	r2, [pc, #572]	; (80019f4 <robot_arm_memory+0x270>)
 80017b6:	8812      	ldrh	r2, [r2, #0]
 80017b8:	0052      	lsls	r2, r2, #1
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f005 fac9 	bl	8006d54 <memset>
	memset(memory_arm->memory_griper,0,sizeof(uint16_t)*capacity);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	4a8b      	ldr	r2, [pc, #556]	; (80019f4 <robot_arm_memory+0x270>)
 80017c8:	8812      	ldrh	r2, [r2, #0]
 80017ca:	0052      	lsls	r2, r2, #1
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f005 fac0 	bl	8006d54 <memset>
	memset(memory_arm->memory_rotation,0,sizeof(uint16_t)*capacity);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	4a86      	ldr	r2, [pc, #536]	; (80019f4 <robot_arm_memory+0x270>)
 80017da:	8812      	ldrh	r2, [r2, #0]
 80017dc:	0052      	lsls	r2, r2, #1
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f005 fab7 	bl	8006d54 <memset>



	memory_arm->memory_arm1[0] = ccr.arm1;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a83      	ldr	r2, [pc, #524]	; (80019f8 <robot_arm_memory+0x274>)
 80017ec:	8812      	ldrh	r2, [r2, #0]
 80017ee:	801a      	strh	r2, [r3, #0]
	memory_arm->memory_arm2[0] = ccr.arm2;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	4a80      	ldr	r2, [pc, #512]	; (80019f8 <robot_arm_memory+0x274>)
 80017f6:	8852      	ldrh	r2, [r2, #2]
 80017f8:	801a      	strh	r2, [r3, #0]
	memory_arm->memory_arm3[0] = ccr.arm3;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	4a7e      	ldr	r2, [pc, #504]	; (80019f8 <robot_arm_memory+0x274>)
 8001800:	8892      	ldrh	r2, [r2, #4]
 8001802:	801a      	strh	r2, [r3, #0]
	memory_arm->memory_griper[0] = ccr.griper;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4a7b      	ldr	r2, [pc, #492]	; (80019f8 <robot_arm_memory+0x274>)
 800180a:	88d2      	ldrh	r2, [r2, #6]
 800180c:	801a      	strh	r2, [r3, #0]
	memory_arm->memory_rotation[0] = ccr.rotation;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	4a79      	ldr	r2, [pc, #484]	; (80019f8 <robot_arm_memory+0x274>)
 8001814:	8912      	ldrh	r2, [r2, #8]
 8001816:	801a      	strh	r2, [r3, #0]
	int arm3;
	int griper;
	int rotation;


	int i = 1;
 8001818:	2301      	movs	r3, #1
 800181a:	61fb      	str	r3, [r7, #28]
	while (1) {
		robot_arm_move();
 800181c:	f7ff feb0 	bl	8001580 <robot_arm_move>
		arm1 = my_abs(memory_arm->memory_arm1[i - 1] - ccr.arm1);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800182a:	3b01      	subs	r3, #1
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4413      	add	r3, r2
 8001830:	881a      	ldrh	r2, [r3, #0]
 8001832:	4b71      	ldr	r3, [pc, #452]	; (80019f8 <robot_arm_memory+0x274>)
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	b29b      	uxth	r3, r3
 800183a:	b21b      	sxth	r3, r3
 800183c:	4618      	mov	r0, r3
 800183e:	f000 f985 	bl	8001b4c <my_abs>
 8001842:	4603      	mov	r3, r0
 8001844:	61bb      	str	r3, [r7, #24]
		arm2 = my_abs(memory_arm->memory_arm2[i - 1] - ccr.arm2);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001850:	3b01      	subs	r3, #1
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	881a      	ldrh	r2, [r3, #0]
 8001858:	4b67      	ldr	r3, [pc, #412]	; (80019f8 <robot_arm_memory+0x274>)
 800185a:	885b      	ldrh	r3, [r3, #2]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	b29b      	uxth	r3, r3
 8001860:	b21b      	sxth	r3, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f972 	bl	8001b4c <my_abs>
 8001868:	4603      	mov	r3, r0
 800186a:	617b      	str	r3, [r7, #20]
		arm3 = my_abs(memory_arm->memory_arm3[i - 1] - ccr.arm3);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001876:	3b01      	subs	r3, #1
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	881a      	ldrh	r2, [r3, #0]
 800187e:	4b5e      	ldr	r3, [pc, #376]	; (80019f8 <robot_arm_memory+0x274>)
 8001880:	889b      	ldrh	r3, [r3, #4]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	b29b      	uxth	r3, r3
 8001886:	b21b      	sxth	r3, r3
 8001888:	4618      	mov	r0, r3
 800188a:	f000 f95f 	bl	8001b4c <my_abs>
 800188e:	4603      	mov	r3, r0
 8001890:	613b      	str	r3, [r7, #16]
		griper = my_abs(memory_arm->memory_griper[i - 1] - ccr.griper);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800189c:	3b01      	subs	r3, #1
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	881a      	ldrh	r2, [r3, #0]
 80018a4:	4b54      	ldr	r3, [pc, #336]	; (80019f8 <robot_arm_memory+0x274>)
 80018a6:	88db      	ldrh	r3, [r3, #6]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f94c 	bl	8001b4c <my_abs>
 80018b4:	4603      	mov	r3, r0
 80018b6:	60fb      	str	r3, [r7, #12]
		rotation = my_abs(memory_arm->memory_rotation[i - 1] - ccr.rotation);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691a      	ldr	r2, [r3, #16]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80018c2:	3b01      	subs	r3, #1
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	881a      	ldrh	r2, [r3, #0]
 80018ca:	4b4b      	ldr	r3, [pc, #300]	; (80019f8 <robot_arm_memory+0x274>)
 80018cc:	891b      	ldrh	r3, [r3, #8]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	b21b      	sxth	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 f939 	bl	8001b4c <my_abs>
 80018da:	4603      	mov	r3, r0
 80018dc:	60bb      	str	r3, [r7, #8]

		if (arm1>MEMORT_SV ||arm2>MEMORT_SV ||arm3>MEMORT_SV ||griper>MEMORT_SV ||rotation>MEMORT_SV ){
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	dc0b      	bgt.n	80018fc <robot_arm_memory+0x178>
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	2b0f      	cmp	r3, #15
 80018e8:	dc08      	bgt.n	80018fc <robot_arm_memory+0x178>
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	2b0f      	cmp	r3, #15
 80018ee:	dc05      	bgt.n	80018fc <robot_arm_memory+0x178>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b0f      	cmp	r3, #15
 80018f4:	dc02      	bgt.n	80018fc <robot_arm_memory+0x178>
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2b0f      	cmp	r3, #15
 80018fa:	dd34      	ble.n	8001966 <robot_arm_memory+0x1e2>
			memory_arm->memory_arm1[i] = ccr.arm1;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	4a3c      	ldr	r2, [pc, #240]	; (80019f8 <robot_arm_memory+0x274>)
 8001908:	8812      	ldrh	r2, [r2, #0]
 800190a:	801a      	strh	r2, [r3, #0]
			memory_arm->memory_arm2[i] = ccr.arm2;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	4a38      	ldr	r2, [pc, #224]	; (80019f8 <robot_arm_memory+0x274>)
 8001918:	8852      	ldrh	r2, [r2, #2]
 800191a:	801a      	strh	r2, [r3, #0]
			memory_arm->memory_arm3[i] = ccr.arm3;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	4a34      	ldr	r2, [pc, #208]	; (80019f8 <robot_arm_memory+0x274>)
 8001928:	8892      	ldrh	r2, [r2, #4]
 800192a:	801a      	strh	r2, [r3, #0]
			memory_arm->memory_griper[i] = ccr.griper;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	4a30      	ldr	r2, [pc, #192]	; (80019f8 <robot_arm_memory+0x274>)
 8001938:	88d2      	ldrh	r2, [r2, #6]
 800193a:	801a      	strh	r2, [r3, #0]
			memory_arm->memory_rotation[i] = ccr.rotation;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691a      	ldr	r2, [r3, #16]
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	4a2c      	ldr	r2, [pc, #176]	; (80019f8 <robot_arm_memory+0x274>)
 8001948:	8912      	ldrh	r2, [r2, #8]
 800194a:	801a      	strh	r2, [r3, #0]

			i++;
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	3301      	adds	r3, #1
 8001950:	61fb      	str	r3, [r7, #28]
			if (i >= capacity) {
 8001952:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <robot_arm_memory+0x270>)
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	4293      	cmp	r3, r2
 800195c:	db03      	blt.n	8001966 <robot_arm_memory+0x1e2>
				memory_arm = resize_malloc(memory_arm);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff fd06 	bl	8001370 <resize_malloc>
 8001964:	6078      	str	r0, [r7, #4]
			}

		}
		if (flag == 2) break;
 8001966:	4b25      	ldr	r3, [pc, #148]	; (80019fc <robot_arm_memory+0x278>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d03d      	beq.n	80019ea <robot_arm_memory+0x266>

		printf("\r\n i = %d \r\n", i);
 800196e:	69f9      	ldr	r1, [r7, #28]
 8001970:	4823      	ldr	r0, [pc, #140]	; (8001a00 <robot_arm_memory+0x27c>)
 8001972:	f005 fad7 	bl	8006f24 <iprintf>
		printf("\r\n [memory] arm1:%d, arm2:%d, arm3:%d, griper:%d, rotation:%d \r\n",
				memory_arm->memory_arm1[i-1], memory_arm->memory_arm2[i-1],
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001980:	3b01      	subs	r3, #1
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	881b      	ldrh	r3, [r3, #0]
		printf("\r\n [memory] arm1:%d, arm2:%d, arm3:%d, griper:%d, rotation:%d \r\n",
 8001988:	4618      	mov	r0, r3
				memory_arm->memory_arm1[i-1], memory_arm->memory_arm2[i-1],
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001994:	3b01      	subs	r3, #1
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	881b      	ldrh	r3, [r3, #0]
		printf("\r\n [memory] arm1:%d, arm2:%d, arm3:%d, griper:%d, rotation:%d \r\n",
 800199c:	461c      	mov	r4, r3
				memory_arm->memory_arm3[i-1], memory_arm->memory_griper[i-1],
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80019a8:	3b01      	subs	r3, #1
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	881b      	ldrh	r3, [r3, #0]
		printf("\r\n [memory] arm1:%d, arm2:%d, arm3:%d, griper:%d, rotation:%d \r\n",
 80019b0:	461d      	mov	r5, r3
				memory_arm->memory_arm3[i-1], memory_arm->memory_griper[i-1],
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80019bc:	3b01      	subs	r3, #1
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	881b      	ldrh	r3, [r3, #0]
		printf("\r\n [memory] arm1:%d, arm2:%d, arm3:%d, griper:%d, rotation:%d \r\n",
 80019c4:	4619      	mov	r1, r3
				memory_arm->memory_rotation[i-1]);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691a      	ldr	r2, [r3, #16]
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80019d0:	3b01      	subs	r3, #1
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	4413      	add	r3, r2
 80019d6:	881b      	ldrh	r3, [r3, #0]
		printf("\r\n [memory] arm1:%d, arm2:%d, arm3:%d, griper:%d, rotation:%d \r\n",
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	9100      	str	r1, [sp, #0]
 80019dc:	462b      	mov	r3, r5
 80019de:	4622      	mov	r2, r4
 80019e0:	4601      	mov	r1, r0
 80019e2:	4808      	ldr	r0, [pc, #32]	; (8001a04 <robot_arm_memory+0x280>)
 80019e4:	f005 fa9e 	bl	8006f24 <iprintf>
		robot_arm_move();
 80019e8:	e718      	b.n	800181c <robot_arm_memory+0x98>
		if (flag == 2) break;
 80019ea:	bf00      	nop

	}
}
 80019ec:	bf00      	nop
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bdb0      	pop	{r4, r5, r7, pc}
 80019f4:	20000000 	.word	0x20000000
 80019f8:	2000013c 	.word	0x2000013c
 80019fc:	20000139 	.word	0x20000139
 8001a00:	08007e58 	.word	0x08007e58
 8001a04:	08007e68 	.word	0x08007e68

08001a08 <robot_arm_memory_move>:

void robot_arm_memory_move(memory_value *memory_arm) {
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af04      	add	r7, sp, #16
 8001a0e:	6078      	str	r0, [r7, #4]

	int i = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
	while (i < capacity) {
 8001a14:	e084      	b.n	8001b20 <robot_arm_memory_move+0x118>

		if (memory_arm->memory_arm1[i] == 0 || memory_arm->memory_arm2[i] == 0
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8083 	beq.w	8001b2e <robot_arm_memory_move+0x126>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d07a      	beq.n	8001b2e <robot_arm_memory_move+0x126>
				|| memory_arm->memory_arm3[i] == 0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d072      	beq.n	8001b2e <robot_arm_memory_move+0x126>
				|| memory_arm->memory_griper[i] == 0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d06a      	beq.n	8001b2e <robot_arm_memory_move+0x126>
				|| memory_arm->memory_rotation[i] == 0) {
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d062      	beq.n	8001b2e <robot_arm_memory_move+0x126>
			break;
		}
		TIM2->CCR1 = memory_arm->memory_arm1[i];
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4413      	add	r3, r2
 8001a72:	881a      	ldrh	r2, [r3, #0]
 8001a74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a78:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = memory_arm->memory_arm2[i];
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	881a      	ldrh	r2, [r3, #0]
 8001a86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a8a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM2->CCR3 = memory_arm->memory_arm3[i];
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	881a      	ldrh	r2, [r3, #0]
 8001a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a9c:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR2 = memory_arm->memory_griper[i];
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	881a      	ldrh	r2, [r3, #0]
 8001aaa:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <robot_arm_memory_move+0x134>)
 8001aac:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR1 = memory_arm->memory_rotation[i];
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691a      	ldr	r2, [r3, #16]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4413      	add	r3, r2
 8001ab8:	881a      	ldrh	r2, [r3, #0]
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <robot_arm_memory_move+0x134>)
 8001abc:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(30);
 8001abe:	201e      	movs	r0, #30
 8001ac0:	f000 fe5a 	bl	8002778 <HAL_Delay>
		printf("\r\n [memory] i = %d,  arm1:%d, arm2:%d, arm3:%d, griper:%d, rotation:%d \r\n",i,
				memory_arm->memory_arm1[i], memory_arm->memory_arm2[i],
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	881b      	ldrh	r3, [r3, #0]
		printf("\r\n [memory] i = %d,  arm1:%d, arm2:%d, arm3:%d, griper:%d, rotation:%d \r\n",i,
 8001ad0:	461c      	mov	r4, r3
				memory_arm->memory_arm1[i], memory_arm->memory_arm2[i],
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	881b      	ldrh	r3, [r3, #0]
		printf("\r\n [memory] i = %d,  arm1:%d, arm2:%d, arm3:%d, griper:%d, rotation:%d \r\n",i,
 8001ade:	461d      	mov	r5, r3
				memory_arm->memory_arm3[i], memory_arm->memory_griper[i],
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4413      	add	r3, r2
 8001aea:	881b      	ldrh	r3, [r3, #0]
		printf("\r\n [memory] i = %d,  arm1:%d, arm2:%d, arm3:%d, griper:%d, rotation:%d \r\n",i,
 8001aec:	4619      	mov	r1, r3
				memory_arm->memory_arm3[i], memory_arm->memory_griper[i],
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	881b      	ldrh	r3, [r3, #0]
		printf("\r\n [memory] i = %d,  arm1:%d, arm2:%d, arm3:%d, griper:%d, rotation:%d \r\n",i,
 8001afa:	4618      	mov	r0, r3
				memory_arm->memory_rotation[i]);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	881b      	ldrh	r3, [r3, #0]
		printf("\r\n [memory] i = %d,  arm1:%d, arm2:%d, arm3:%d, griper:%d, rotation:%d \r\n",i,
 8001b08:	9302      	str	r3, [sp, #8]
 8001b0a:	9001      	str	r0, [sp, #4]
 8001b0c:	9100      	str	r1, [sp, #0]
 8001b0e:	462b      	mov	r3, r5
 8001b10:	4622      	mov	r2, r4
 8001b12:	68f9      	ldr	r1, [r7, #12]
 8001b14:	480a      	ldr	r0, [pc, #40]	; (8001b40 <robot_arm_memory_move+0x138>)
 8001b16:	f005 fa05 	bl	8006f24 <iprintf>
		i++;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
	while (i < capacity) {
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <robot_arm_memory_move+0x13c>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	f6ff af74 	blt.w	8001a16 <robot_arm_memory_move+0xe>
	}
	printf("\r\n memory move complete \r\n");
 8001b2e:	4806      	ldr	r0, [pc, #24]	; (8001b48 <robot_arm_memory_move+0x140>)
 8001b30:	f005 fa7e 	bl	8007030 <puts>
}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3c:	40000400 	.word	0x40000400
 8001b40:	08007eac 	.word	0x08007eac
 8001b44:	20000000 	.word	0x20000000
 8001b48:	08007ef8 	.word	0x08007ef8

08001b4c <my_abs>:


uint16_t my_abs(int16_t value){
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	80fb      	strh	r3, [r7, #6]

	if(value<0) return value*-1;
 8001b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	da03      	bge.n	8001b66 <my_abs+0x1a>
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	425b      	negs	r3, r3
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	e000      	b.n	8001b68 <my_abs+0x1c>
	else return value;
 8001b66:	88fb      	ldrh	r3, [r7, #6]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3) {
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4ab3      	ldr	r2, [pc, #716]	; (8001e50 <HAL_UART_RxCpltCallback+0x2dc>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	f040 816e 	bne.w	8001e64 <HAL_UART_RxCpltCallback+0x2f0>
		HAL_UART_Transmit(&huart3, &rx_data, 1, 100);
 8001b88:	2364      	movs	r3, #100	; 0x64
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	49b1      	ldr	r1, [pc, #708]	; (8001e54 <HAL_UART_RxCpltCallback+0x2e0>)
 8001b8e:	48b2      	ldr	r0, [pc, #712]	; (8001e58 <HAL_UART_RxCpltCallback+0x2e4>)
 8001b90:	f004 f87b 	bl	8005c8a <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8001b94:	2201      	movs	r2, #1
 8001b96:	49af      	ldr	r1, [pc, #700]	; (8001e54 <HAL_UART_RxCpltCallback+0x2e0>)
 8001b98:	48af      	ldr	r0, [pc, #700]	; (8001e58 <HAL_UART_RxCpltCallback+0x2e4>)
 8001b9a:	f004 f908 	bl	8005dae <HAL_UART_Receive_IT>

		switch (rx_data) {
 8001b9e:	4bad      	ldr	r3, [pc, #692]	; (8001e54 <HAL_UART_RxCpltCallback+0x2e0>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	3b2d      	subs	r3, #45	; 0x2d
 8001ba4:	2b4a      	cmp	r3, #74	; 0x4a
 8001ba6:	f200 815e 	bhi.w	8001e66 <HAL_UART_RxCpltCallback+0x2f2>
 8001baa:	a201      	add	r2, pc, #4	; (adr r2, 8001bb0 <HAL_UART_RxCpltCallback+0x3c>)
 8001bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb0:	08001db3 	.word	0x08001db3
 8001bb4:	08001e67 	.word	0x08001e67
 8001bb8:	08001e67 	.word	0x08001e67
 8001bbc:	08001e67 	.word	0x08001e67
 8001bc0:	08001cdd 	.word	0x08001cdd
 8001bc4:	08001d01 	.word	0x08001d01
 8001bc8:	08001e67 	.word	0x08001e67
 8001bcc:	08001d49 	.word	0x08001d49
 8001bd0:	08001d25 	.word	0x08001d25
 8001bd4:	08001e67 	.word	0x08001e67
 8001bd8:	08001d6d 	.word	0x08001d6d
 8001bdc:	08001d91 	.word	0x08001d91
 8001be0:	08001e67 	.word	0x08001e67
 8001be4:	08001e67 	.word	0x08001e67
 8001be8:	08001e67 	.word	0x08001e67
 8001bec:	08001e67 	.word	0x08001e67
 8001bf0:	08001dd5 	.word	0x08001dd5
 8001bf4:	08001e67 	.word	0x08001e67
 8001bf8:	08001e67 	.word	0x08001e67
 8001bfc:	08001e67 	.word	0x08001e67
 8001c00:	08001e67 	.word	0x08001e67
 8001c04:	08001e67 	.word	0x08001e67
 8001c08:	08001e67 	.word	0x08001e67
 8001c0c:	08001e67 	.word	0x08001e67
 8001c10:	08001e67 	.word	0x08001e67
 8001c14:	08001e67 	.word	0x08001e67
 8001c18:	08001e67 	.word	0x08001e67
 8001c1c:	08001e67 	.word	0x08001e67
 8001c20:	08001e67 	.word	0x08001e67
 8001c24:	08001e67 	.word	0x08001e67
 8001c28:	08001e67 	.word	0x08001e67
 8001c2c:	08001e67 	.word	0x08001e67
 8001c30:	08001e67 	.word	0x08001e67
 8001c34:	08001e67 	.word	0x08001e67
 8001c38:	08001e67 	.word	0x08001e67
 8001c3c:	08001e67 	.word	0x08001e67
 8001c40:	08001e67 	.word	0x08001e67
 8001c44:	08001e67 	.word	0x08001e67
 8001c48:	08001e67 	.word	0x08001e67
 8001c4c:	08001e67 	.word	0x08001e67
 8001c50:	08001e67 	.word	0x08001e67
 8001c54:	08001e67 	.word	0x08001e67
 8001c58:	08001e67 	.word	0x08001e67
 8001c5c:	08001e67 	.word	0x08001e67
 8001c60:	08001e67 	.word	0x08001e67
 8001c64:	08001e67 	.word	0x08001e67
 8001c68:	08001e67 	.word	0x08001e67
 8001c6c:	08001e67 	.word	0x08001e67
 8001c70:	08001e67 	.word	0x08001e67
 8001c74:	08001e67 	.word	0x08001e67
 8001c78:	08001e67 	.word	0x08001e67
 8001c7c:	08001e67 	.word	0x08001e67
 8001c80:	08001df7 	.word	0x08001df7
 8001c84:	08001e67 	.word	0x08001e67
 8001c88:	08001e67 	.word	0x08001e67
 8001c8c:	08001e67 	.word	0x08001e67
 8001c90:	08001e49 	.word	0x08001e49
 8001c94:	08001e67 	.word	0x08001e67
 8001c98:	08001e67 	.word	0x08001e67
 8001c9c:	08001e67 	.word	0x08001e67
 8001ca0:	08001e67 	.word	0x08001e67
 8001ca4:	08001e67 	.word	0x08001e67
 8001ca8:	08001e67 	.word	0x08001e67
 8001cac:	08001e67 	.word	0x08001e67
 8001cb0:	08001e67 	.word	0x08001e67
 8001cb4:	08001e67 	.word	0x08001e67
 8001cb8:	08001e67 	.word	0x08001e67
 8001cbc:	08001e67 	.word	0x08001e67
 8001cc0:	08001e39 	.word	0x08001e39
 8001cc4:	08001e67 	.word	0x08001e67
 8001cc8:	08001e1b 	.word	0x08001e1b
 8001ccc:	08001e67 	.word	0x08001e67
 8001cd0:	08001e67 	.word	0x08001e67
 8001cd4:	08001e67 	.word	0x08001e67
 8001cd8:	08001e41 	.word	0x08001e41

		case '1':
			if (ccr.arm1 >=MAXARM1) {
 8001cdc:	4b5f      	ldr	r3, [pc, #380]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	f240 424b 	movw	r2, #1099	; 0x44b
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d904      	bls.n	8001cf2 <HAL_UART_RxCpltCallback+0x17e>
				ccr.arm1 = MAXARM1;
 8001ce8:	4b5c      	ldr	r3, [pc, #368]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001cea:	f240 424c 	movw	r2, #1100	; 0x44c
 8001cee:	801a      	strh	r2, [r3, #0]
			} else {
				ccr.arm1 += 10;
			}
			break;
 8001cf0:	e0b9      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>
				ccr.arm1 += 10;
 8001cf2:	4b5a      	ldr	r3, [pc, #360]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	330a      	adds	r3, #10
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	4b58      	ldr	r3, [pc, #352]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001cfc:	801a      	strh	r2, [r3, #0]
			break;
 8001cfe:	e0b2      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>

		case '2':
			if (ccr.arm1 <= MINARM2) {
 8001d00:	4b56      	ldr	r3, [pc, #344]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	f240 2226 	movw	r2, #550	; 0x226
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d804      	bhi.n	8001d16 <HAL_UART_RxCpltCallback+0x1a2>
				ccr.arm1 = MINARM2;
 8001d0c:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d0e:	f240 2226 	movw	r2, #550	; 0x226
 8001d12:	801a      	strh	r2, [r3, #0]
			} else {
				ccr.arm1 -= 10;
			}
			break;
 8001d14:	e0a7      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>
				ccr.arm1 -= 10;
 8001d16:	4b51      	ldr	r3, [pc, #324]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	3b0a      	subs	r3, #10
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	4b4f      	ldr	r3, [pc, #316]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d20:	801a      	strh	r2, [r3, #0]
			break;
 8001d22:	e0a0      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>

		case '5':
			if (ccr.arm2 >= MAXARM2) {
 8001d24:	4b4d      	ldr	r3, [pc, #308]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d26:	885b      	ldrh	r3, [r3, #2]
 8001d28:	f240 424b 	movw	r2, #1099	; 0x44b
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d904      	bls.n	8001d3a <HAL_UART_RxCpltCallback+0x1c6>
				ccr.arm2 = MAXARM2;
 8001d30:	4b4a      	ldr	r3, [pc, #296]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d32:	f240 424c 	movw	r2, #1100	; 0x44c
 8001d36:	805a      	strh	r2, [r3, #2]
			} else {
				ccr.arm2 += 30;
			}
			break;
 8001d38:	e095      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>
				ccr.arm2 += 30;
 8001d3a:	4b48      	ldr	r3, [pc, #288]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d3c:	885b      	ldrh	r3, [r3, #2]
 8001d3e:	331e      	adds	r3, #30
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	4b46      	ldr	r3, [pc, #280]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d44:	805a      	strh	r2, [r3, #2]
			break;
 8001d46:	e08e      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>
		case '4':
			if (ccr.arm2 <= MINARM2) {
 8001d48:	4b44      	ldr	r3, [pc, #272]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d4a:	885b      	ldrh	r3, [r3, #2]
 8001d4c:	f240 2226 	movw	r2, #550	; 0x226
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d804      	bhi.n	8001d5e <HAL_UART_RxCpltCallback+0x1ea>
				ccr.arm2 = MINARM2;
 8001d54:	4b41      	ldr	r3, [pc, #260]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d56:	f240 2226 	movw	r2, #550	; 0x226
 8001d5a:	805a      	strh	r2, [r3, #2]
			} else {
				ccr.arm2 -= 30;
			}
			break;
 8001d5c:	e083      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>
				ccr.arm2 -= 30;
 8001d5e:	4b3f      	ldr	r3, [pc, #252]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d60:	885b      	ldrh	r3, [r3, #2]
 8001d62:	3b1e      	subs	r3, #30
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	4b3d      	ldr	r3, [pc, #244]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d68:	805a      	strh	r2, [r3, #2]
			break;
 8001d6a:	e07c      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>

		case '7':
			if (ccr.arm3 >= MAXARM3) {
 8001d6c:	4b3b      	ldr	r3, [pc, #236]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d6e:	889b      	ldrh	r3, [r3, #4]
 8001d70:	f240 424b 	movw	r2, #1099	; 0x44b
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d904      	bls.n	8001d82 <HAL_UART_RxCpltCallback+0x20e>
				ccr.arm3 = MAXARM3;
 8001d78:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d7a:	f240 424c 	movw	r2, #1100	; 0x44c
 8001d7e:	809a      	strh	r2, [r3, #4]
			} else {
				ccr.arm3 += 30;
			}
			break;
 8001d80:	e071      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>
				ccr.arm3 += 30;
 8001d82:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d84:	889b      	ldrh	r3, [r3, #4]
 8001d86:	331e      	adds	r3, #30
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d8c:	809a      	strh	r2, [r3, #4]
			break;
 8001d8e:	e06a      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>
		case '8':
			if (ccr.arm3 <= MINARM3) {
 8001d90:	4b32      	ldr	r3, [pc, #200]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d92:	889b      	ldrh	r3, [r3, #4]
 8001d94:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001d98:	d804      	bhi.n	8001da4 <HAL_UART_RxCpltCallback+0x230>
				ccr.arm3 = MINARM3;
 8001d9a:	4b30      	ldr	r3, [pc, #192]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001d9c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001da0:	809a      	strh	r2, [r3, #4]
			} else {
				ccr.arm3 -= 30;
			}
			break;
 8001da2:	e060      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>
				ccr.arm3 -= 30;
 8001da4:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001da6:	889b      	ldrh	r3, [r3, #4]
 8001da8:	3b1e      	subs	r3, #30
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	4b2b      	ldr	r3, [pc, #172]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001dae:	809a      	strh	r2, [r3, #4]
			break;
 8001db0:	e059      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>

		case '-':
			if (ccr.griper >= MAXGRIPER) {
 8001db2:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001db4:	88db      	ldrh	r3, [r3, #6]
 8001db6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001dba:	d304      	bcc.n	8001dc6 <HAL_UART_RxCpltCallback+0x252>
				ccr.griper = MAXGRIPER;
 8001dbc:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001dbe:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001dc2:	80da      	strh	r2, [r3, #6]
			} else {
				ccr.griper += 30;
			}
			break;
 8001dc4:	e04f      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>
				ccr.griper += 30;
 8001dc6:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001dc8:	88db      	ldrh	r3, [r3, #6]
 8001dca:	331e      	adds	r3, #30
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001dd0:	80da      	strh	r2, [r3, #6]
			break;
 8001dd2:	e048      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>
		case '=':
			if (ccr.griper <= MINGRIPER) {
 8001dd4:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001dd6:	88db      	ldrh	r3, [r3, #6]
 8001dd8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ddc:	d804      	bhi.n	8001de8 <HAL_UART_RxCpltCallback+0x274>
				ccr.griper = MINGRIPER;
 8001dde:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001de0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001de4:	80da      	strh	r2, [r3, #6]
			} else {
				ccr.griper -= 30;
			}
			break;
 8001de6:	e03e      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>
				ccr.griper -= 30;
 8001de8:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001dea:	88db      	ldrh	r3, [r3, #6]
 8001dec:	3b1e      	subs	r3, #30
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001df2:	80da      	strh	r2, [r3, #6]
			break;
 8001df4:	e037      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>

		case 'a':
			if (ccr.rotation >= MAXROTATION) {
 8001df6:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001df8:	891b      	ldrh	r3, [r3, #8]
 8001dfa:	f240 424b 	movw	r2, #1099	; 0x44b
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d904      	bls.n	8001e0c <HAL_UART_RxCpltCallback+0x298>
				ccr.rotation = MAXROTATION;
 8001e02:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001e04:	f240 424c 	movw	r2, #1100	; 0x44c
 8001e08:	811a      	strh	r2, [r3, #8]
			} else {
				ccr.rotation += 30;
			}
			break;
 8001e0a:	e02c      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>
				ccr.rotation += 30;
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001e0e:	891b      	ldrh	r3, [r3, #8]
 8001e10:	331e      	adds	r3, #30
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001e16:	811a      	strh	r2, [r3, #8]
			break;
 8001e18:	e025      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>

		case 's':
			if (ccr.rotation <= MINROTATION) {
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001e1c:	891b      	ldrh	r3, [r3, #8]
 8001e1e:	2bc8      	cmp	r3, #200	; 0xc8
 8001e20:	d803      	bhi.n	8001e2a <HAL_UART_RxCpltCallback+0x2b6>
				ccr.rotation = MINROTATION;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001e24:	22c8      	movs	r2, #200	; 0xc8
 8001e26:	811a      	strh	r2, [r3, #8]
			} else {
				ccr.rotation -= 30;
			}
			break;
 8001e28:	e01d      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>
				ccr.rotation -= 30;
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001e2c:	891b      	ldrh	r3, [r3, #8]
 8001e2e:	3b1e      	subs	r3, #30
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_UART_RxCpltCallback+0x2e8>)
 8001e34:	811a      	strh	r2, [r3, #8]
			break;
 8001e36:	e016      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>

		case 'q':
			flag = 0;
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_UART_RxCpltCallback+0x2ec>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
			break;
 8001e3e:	e012      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>
		case 'w':
			flag = 1;
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <HAL_UART_RxCpltCallback+0x2ec>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
			break;
 8001e46:	e00e      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>
		case 'e':
			flag = 2;
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_UART_RxCpltCallback+0x2ec>)
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	701a      	strb	r2, [r3, #0]
			break;
 8001e4e:	e00a      	b.n	8001e66 <HAL_UART_RxCpltCallback+0x2f2>
 8001e50:	40004800 	.word	0x40004800
 8001e54:	20000138 	.word	0x20000138
 8001e58:	20000208 	.word	0x20000208
 8001e5c:	2000013c 	.word	0x2000013c
 8001e60:	20000139 	.word	0x20000139

		}

	}
 8001e64:	bf00      	nop
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop

08001e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e74:	b672      	cpsid	i
}
 8001e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e78:	e7fe      	b.n	8001e78 <Error_Handler+0x8>
	...

08001e7c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <MX_RTC_Init+0x44>)
 8001e82:	4a10      	ldr	r2, [pc, #64]	; (8001ec4 <MX_RTC_Init+0x48>)
 8001e84:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <MX_RTC_Init+0x44>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <MX_RTC_Init+0x44>)
 8001e8e:	227f      	movs	r2, #127	; 0x7f
 8001e90:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <MX_RTC_Init+0x44>)
 8001e94:	22ff      	movs	r2, #255	; 0xff
 8001e96:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <MX_RTC_Init+0x44>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e9e:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <MX_RTC_Init+0x44>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <MX_RTC_Init+0x44>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001eaa:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <MX_RTC_Init+0x44>)
 8001eac:	f002 fdd2 	bl	8004a54 <HAL_RTC_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001eb6:	f7ff ffdb 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000154 	.word	0x20000154
 8001ec4:	40002800 	.word	0x40002800

08001ec8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08e      	sub	sp, #56	; 0x38
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ed0:	f107 0308 	add.w	r3, r7, #8
 8001ed4:	2230      	movs	r2, #48	; 0x30
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f004 ff3b 	bl	8006d54 <memset>
  if(rtcHandle->Instance==RTC)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <HAL_RTC_MspInit+0x4c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d111      	bne.n	8001f0c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ee8:	2320      	movs	r3, #32
 8001eea:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ef0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f002 fbec 	bl	80046d4 <HAL_RCCEx_PeriphCLKConfig>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001f02:	f7ff ffb5 	bl	8001e70 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <HAL_RTC_MspInit+0x50>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3738      	adds	r7, #56	; 0x38
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40002800 	.word	0x40002800
 8001f18:	42470e3c 	.word	0x42470e3c

08001f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <HAL_MspInit+0x4c>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	4a0f      	ldr	r2, [pc, #60]	; (8001f68 <HAL_MspInit+0x4c>)
 8001f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f30:	6453      	str	r3, [r2, #68]	; 0x44
 8001f32:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <HAL_MspInit+0x4c>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <HAL_MspInit+0x4c>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	4a08      	ldr	r2, [pc, #32]	; (8001f68 <HAL_MspInit+0x4c>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_MspInit+0x4c>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800

08001f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <NMI_Handler+0x4>

08001f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <HardFault_Handler+0x4>

08001f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <MemManage_Handler+0x4>

08001f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <BusFault_Handler+0x4>

08001f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <UsageFault_Handler+0x4>

08001f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb8:	f000 fbbe 	bl	8002738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <TIM2_IRQHandler+0x10>)
 8001fc6:	f002 ffaf 	bl	8004f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000178 	.word	0x20000178

08001fd4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <TIM3_IRQHandler+0x10>)
 8001fda:	f002 ffa5 	bl	8004f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200001c0 	.word	0x200001c0

08001fe8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <USART3_IRQHandler+0x10>)
 8001fee:	f003 ff0f 	bl	8005e10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000208 	.word	0x20000208

08001ffc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <DMA2_Stream0_IRQHandler+0x10>)
 8002002:	f001 faa9 	bl	8003558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200000d8 	.word	0x200000d8

08002010 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	e00a      	b.n	8002038 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002022:	f3af 8000 	nop.w
 8002026:	4601      	mov	r1, r0
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	60ba      	str	r2, [r7, #8]
 800202e:	b2ca      	uxtb	r2, r1
 8002030:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3301      	adds	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	429a      	cmp	r2, r3
 800203e:	dbf0      	blt.n	8002022 <_read+0x12>
	}

return len;
 8002040:	687b      	ldr	r3, [r7, #4]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	e009      	b.n	8002070 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	60ba      	str	r2, [r7, #8]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff f805 	bl	8001074 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3301      	adds	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	dbf1      	blt.n	800205c <_write+0x12>
	}
	return len;
 8002078:	687b      	ldr	r3, [r7, #4]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <_close>:

int _close(int file)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
	return -1;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020aa:	605a      	str	r2, [r3, #4]
	return 0;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <_isatty>:

int _isatty(int file)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
	return 1;
 80020c2:	2301      	movs	r3, #1
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
	return 0;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <_sbrk+0x5c>)
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <_sbrk+0x60>)
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <_sbrk+0x64>)
 800210a:	4a12      	ldr	r2, [pc, #72]	; (8002154 <_sbrk+0x68>)
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	429a      	cmp	r2, r3
 800211a:	d207      	bcs.n	800212c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800211c:	f004 fde0 	bl	8006ce0 <__errno>
 8002120:	4603      	mov	r3, r0
 8002122:	220c      	movs	r2, #12
 8002124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	e009      	b.n	8002140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <_sbrk+0x64>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	4a05      	ldr	r2, [pc, #20]	; (8002150 <_sbrk+0x64>)
 800213c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20030000 	.word	0x20030000
 800214c:	00000400 	.word	0x00000400
 8002150:	20000174 	.word	0x20000174
 8002154:	20000260 	.word	0x20000260

08002158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <SystemInit+0x20>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <SystemInit+0x20>)
 8002164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08e      	sub	sp, #56	; 0x38
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002190:	f107 0320 	add.w	r3, r7, #32
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
 80021a8:	615a      	str	r2, [r3, #20]
 80021aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021ac:	4b3e      	ldr	r3, [pc, #248]	; (80022a8 <MX_TIM2_Init+0x12c>)
 80021ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 80021b4:	4b3c      	ldr	r3, [pc, #240]	; (80022a8 <MX_TIM2_Init+0x12c>)
 80021b6:	22b3      	movs	r2, #179	; 0xb3
 80021b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ba:	4b3b      	ldr	r3, [pc, #236]	; (80022a8 <MX_TIM2_Init+0x12c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80021c0:	4b39      	ldr	r3, [pc, #228]	; (80022a8 <MX_TIM2_Init+0x12c>)
 80021c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80021c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c8:	4b37      	ldr	r3, [pc, #220]	; (80022a8 <MX_TIM2_Init+0x12c>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ce:	4b36      	ldr	r3, [pc, #216]	; (80022a8 <MX_TIM2_Init+0x12c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021d4:	4834      	ldr	r0, [pc, #208]	; (80022a8 <MX_TIM2_Init+0x12c>)
 80021d6:	f002 fd37 	bl	8004c48 <HAL_TIM_Base_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80021e0:	f7ff fe46 	bl	8001e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ee:	4619      	mov	r1, r3
 80021f0:	482d      	ldr	r0, [pc, #180]	; (80022a8 <MX_TIM2_Init+0x12c>)
 80021f2:	f003 f863 	bl	80052bc <HAL_TIM_ConfigClockSource>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80021fc:	f7ff fe38 	bl	8001e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002200:	4829      	ldr	r0, [pc, #164]	; (80022a8 <MX_TIM2_Init+0x12c>)
 8002202:	f002 fd70 	bl	8004ce6 <HAL_TIM_PWM_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800220c:	f7ff fe30 	bl	8001e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002210:	2300      	movs	r3, #0
 8002212:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002218:	f107 0320 	add.w	r3, r7, #32
 800221c:	4619      	mov	r1, r3
 800221e:	4822      	ldr	r0, [pc, #136]	; (80022a8 <MX_TIM2_Init+0x12c>)
 8002220:	f003 fc56 	bl	8005ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800222a:	f7ff fe21 	bl	8001e70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800222e:	2360      	movs	r3, #96	; 0x60
 8002230:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002232:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002236:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	2200      	movs	r2, #0
 8002244:	4619      	mov	r1, r3
 8002246:	4818      	ldr	r0, [pc, #96]	; (80022a8 <MX_TIM2_Init+0x12c>)
 8002248:	f002 ff76 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002252:	f7ff fe0d 	bl	8001e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	2204      	movs	r2, #4
 800225a:	4619      	mov	r1, r3
 800225c:	4812      	ldr	r0, [pc, #72]	; (80022a8 <MX_TIM2_Init+0x12c>)
 800225e:	f002 ff6b 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002268:	f7ff fe02 	bl	8001e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	2208      	movs	r2, #8
 8002270:	4619      	mov	r1, r3
 8002272:	480d      	ldr	r0, [pc, #52]	; (80022a8 <MX_TIM2_Init+0x12c>)
 8002274:	f002 ff60 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800227e:	f7ff fdf7 	bl	8001e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	220c      	movs	r2, #12
 8002286:	4619      	mov	r1, r3
 8002288:	4807      	ldr	r0, [pc, #28]	; (80022a8 <MX_TIM2_Init+0x12c>)
 800228a:	f002 ff55 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8002294:	f7ff fdec 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002298:	4803      	ldr	r0, [pc, #12]	; (80022a8 <MX_TIM2_Init+0x12c>)
 800229a:	f000 f8c1 	bl	8002420 <HAL_TIM_MspPostInit>

}
 800229e:	bf00      	nop
 80022a0:	3738      	adds	r7, #56	; 0x38
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000178 	.word	0x20000178

080022ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08e      	sub	sp, #56	; 0x38
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]
 80022bc:	609a      	str	r2, [r3, #8]
 80022be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c0:	f107 0320 	add.w	r3, r7, #32
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
 80022d8:	615a      	str	r2, [r3, #20]
 80022da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022dc:	4b33      	ldr	r3, [pc, #204]	; (80023ac <MX_TIM3_Init+0x100>)
 80022de:	4a34      	ldr	r2, [pc, #208]	; (80023b0 <MX_TIM3_Init+0x104>)
 80022e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 180-1;
 80022e2:	4b32      	ldr	r3, [pc, #200]	; (80023ac <MX_TIM3_Init+0x100>)
 80022e4:	22b3      	movs	r2, #179	; 0xb3
 80022e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e8:	4b30      	ldr	r3, [pc, #192]	; (80023ac <MX_TIM3_Init+0x100>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80022ee:	4b2f      	ldr	r3, [pc, #188]	; (80023ac <MX_TIM3_Init+0x100>)
 80022f0:	f242 720f 	movw	r2, #9999	; 0x270f
 80022f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f6:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <MX_TIM3_Init+0x100>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fc:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <MX_TIM3_Init+0x100>)
 80022fe:	2200      	movs	r2, #0
 8002300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002302:	482a      	ldr	r0, [pc, #168]	; (80023ac <MX_TIM3_Init+0x100>)
 8002304:	f002 fca0 	bl	8004c48 <HAL_TIM_Base_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800230e:	f7ff fdaf 	bl	8001e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800231c:	4619      	mov	r1, r3
 800231e:	4823      	ldr	r0, [pc, #140]	; (80023ac <MX_TIM3_Init+0x100>)
 8002320:	f002 ffcc 	bl	80052bc <HAL_TIM_ConfigClockSource>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800232a:	f7ff fda1 	bl	8001e70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800232e:	481f      	ldr	r0, [pc, #124]	; (80023ac <MX_TIM3_Init+0x100>)
 8002330:	f002 fcd9 	bl	8004ce6 <HAL_TIM_PWM_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800233a:	f7ff fd99 	bl	8001e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002346:	f107 0320 	add.w	r3, r7, #32
 800234a:	4619      	mov	r1, r3
 800234c:	4817      	ldr	r0, [pc, #92]	; (80023ac <MX_TIM3_Init+0x100>)
 800234e:	f003 fbbf 	bl	8005ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002358:	f7ff fd8a 	bl	8001e70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800235c:	2360      	movs	r3, #96	; 0x60
 800235e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002360:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002364:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	2200      	movs	r2, #0
 8002372:	4619      	mov	r1, r3
 8002374:	480d      	ldr	r0, [pc, #52]	; (80023ac <MX_TIM3_Init+0x100>)
 8002376:	f002 fedf 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002380:	f7ff fd76 	bl	8001e70 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	2204      	movs	r2, #4
 800238c:	4619      	mov	r1, r3
 800238e:	4807      	ldr	r0, [pc, #28]	; (80023ac <MX_TIM3_Init+0x100>)
 8002390:	f002 fed2 	bl	8005138 <HAL_TIM_PWM_ConfigChannel>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 800239a:	f7ff fd69 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800239e:	4803      	ldr	r0, [pc, #12]	; (80023ac <MX_TIM3_Init+0x100>)
 80023a0:	f000 f83e 	bl	8002420 <HAL_TIM_MspPostInit>

}
 80023a4:	bf00      	nop
 80023a6:	3738      	adds	r7, #56	; 0x38
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	200001c0 	.word	0x200001c0
 80023b0:	40000400 	.word	0x40000400

080023b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c4:	d10e      	bne.n	80023e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b13      	ldr	r3, [pc, #76]	; (8002418 <HAL_TIM_Base_MspInit+0x64>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	4a12      	ldr	r2, [pc, #72]	; (8002418 <HAL_TIM_Base_MspInit+0x64>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6413      	str	r3, [r2, #64]	; 0x40
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <HAL_TIM_Base_MspInit+0x64>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80023e2:	e012      	b.n	800240a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0c      	ldr	r2, [pc, #48]	; (800241c <HAL_TIM_Base_MspInit+0x68>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d10d      	bne.n	800240a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <HAL_TIM_Base_MspInit+0x64>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a08      	ldr	r2, [pc, #32]	; (8002418 <HAL_TIM_Base_MspInit+0x64>)
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_TIM_Base_MspInit+0x64>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800
 800241c:	40000400 	.word	0x40000400

08002420 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08c      	sub	sp, #48	; 0x30
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 031c 	add.w	r3, r7, #28
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002440:	d13d      	bne.n	80024be <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	4b40      	ldr	r3, [pc, #256]	; (8002548 <HAL_TIM_MspPostInit+0x128>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a3f      	ldr	r2, [pc, #252]	; (8002548 <HAL_TIM_MspPostInit+0x128>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b3d      	ldr	r3, [pc, #244]	; (8002548 <HAL_TIM_MspPostInit+0x128>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	4b39      	ldr	r3, [pc, #228]	; (8002548 <HAL_TIM_MspPostInit+0x128>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	4a38      	ldr	r2, [pc, #224]	; (8002548 <HAL_TIM_MspPostInit+0x128>)
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4b36      	ldr	r3, [pc, #216]	; (8002548 <HAL_TIM_MspPostInit+0x128>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	697b      	ldr	r3, [r7, #20]
    PA0/WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800247a:	2301      	movs	r3, #1
 800247c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800248a:	2301      	movs	r3, #1
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248e:	f107 031c 	add.w	r3, r7, #28
 8002492:	4619      	mov	r1, r3
 8002494:	482d      	ldr	r0, [pc, #180]	; (800254c <HAL_TIM_MspPostInit+0x12c>)
 8002496:	f001 fac9 	bl	8003a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 800249a:	f640 4308 	movw	r3, #3080	; 0xc08
 800249e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	2302      	movs	r3, #2
 80024a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a8:	2300      	movs	r3, #0
 80024aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024ac:	2301      	movs	r3, #1
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b0:	f107 031c 	add.w	r3, r7, #28
 80024b4:	4619      	mov	r1, r3
 80024b6:	4826      	ldr	r0, [pc, #152]	; (8002550 <HAL_TIM_MspPostInit+0x130>)
 80024b8:	f001 fab8 	bl	8003a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80024bc:	e040      	b.n	8002540 <HAL_TIM_MspPostInit+0x120>
  else if(timHandle->Instance==TIM3)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a24      	ldr	r2, [pc, #144]	; (8002554 <HAL_TIM_MspPostInit+0x134>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d13b      	bne.n	8002540 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c8:	2300      	movs	r3, #0
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <HAL_TIM_MspPostInit+0x128>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	4a1d      	ldr	r2, [pc, #116]	; (8002548 <HAL_TIM_MspPostInit+0x128>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6313      	str	r3, [r2, #48]	; 0x30
 80024d8:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <HAL_TIM_MspPostInit+0x128>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	4b17      	ldr	r3, [pc, #92]	; (8002548 <HAL_TIM_MspPostInit+0x128>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	4a16      	ldr	r2, [pc, #88]	; (8002548 <HAL_TIM_MspPostInit+0x128>)
 80024ee:	f043 0304 	orr.w	r3, r3, #4
 80024f2:	6313      	str	r3, [r2, #48]	; 0x30
 80024f4:	4b14      	ldr	r3, [pc, #80]	; (8002548 <HAL_TIM_MspPostInit+0x128>)
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002500:	2340      	movs	r3, #64	; 0x40
 8002502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250c:	2300      	movs	r3, #0
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002510:	2302      	movs	r3, #2
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002514:	f107 031c 	add.w	r3, r7, #28
 8002518:	4619      	mov	r1, r3
 800251a:	480c      	ldr	r0, [pc, #48]	; (800254c <HAL_TIM_MspPostInit+0x12c>)
 800251c:	f001 fa86 	bl	8003a2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002524:	2302      	movs	r3, #2
 8002526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252c:	2300      	movs	r3, #0
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002530:	2302      	movs	r3, #2
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002534:	f107 031c 	add.w	r3, r7, #28
 8002538:	4619      	mov	r1, r3
 800253a:	4807      	ldr	r0, [pc, #28]	; (8002558 <HAL_TIM_MspPostInit+0x138>)
 800253c:	f001 fa76 	bl	8003a2c <HAL_GPIO_Init>
}
 8002540:	bf00      	nop
 8002542:	3730      	adds	r7, #48	; 0x30
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40023800 	.word	0x40023800
 800254c:	40020000 	.word	0x40020000
 8002550:	40020400 	.word	0x40020400
 8002554:	40000400 	.word	0x40000400
 8002558:	40020800 	.word	0x40020800

0800255c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <MX_USART3_UART_Init+0x4c>)
 8002562:	4a12      	ldr	r2, [pc, #72]	; (80025ac <MX_USART3_UART_Init+0x50>)
 8002564:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <MX_USART3_UART_Init+0x4c>)
 8002568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800256c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <MX_USART3_UART_Init+0x4c>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <MX_USART3_UART_Init+0x4c>)
 8002576:	2200      	movs	r2, #0
 8002578:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <MX_USART3_UART_Init+0x4c>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <MX_USART3_UART_Init+0x4c>)
 8002582:	220c      	movs	r2, #12
 8002584:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <MX_USART3_UART_Init+0x4c>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <MX_USART3_UART_Init+0x4c>)
 800258e:	2200      	movs	r2, #0
 8002590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <MX_USART3_UART_Init+0x4c>)
 8002594:	f003 fb2c 	bl	8005bf0 <HAL_UART_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800259e:	f7ff fc67 	bl	8001e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000208 	.word	0x20000208
 80025ac:	40004800 	.word	0x40004800

080025b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a19      	ldr	r2, [pc, #100]	; (8002634 <HAL_UART_MspInit+0x84>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d12c      	bne.n	800262c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	4b18      	ldr	r3, [pc, #96]	; (8002638 <HAL_UART_MspInit+0x88>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	4a17      	ldr	r2, [pc, #92]	; (8002638 <HAL_UART_MspInit+0x88>)
 80025dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e0:	6413      	str	r3, [r2, #64]	; 0x40
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <HAL_UART_MspInit+0x88>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_UART_MspInit+0x88>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a10      	ldr	r2, [pc, #64]	; (8002638 <HAL_UART_MspInit+0x88>)
 80025f8:	f043 0308 	orr.w	r3, r3, #8
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <HAL_UART_MspInit+0x88>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800260a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800260e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002618:	2303      	movs	r3, #3
 800261a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800261c:	2307      	movs	r3, #7
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	4619      	mov	r1, r3
 8002626:	4805      	ldr	r0, [pc, #20]	; (800263c <HAL_UART_MspInit+0x8c>)
 8002628:	f001 fa00 	bl	8003a2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800262c:	bf00      	nop
 800262e:	3728      	adds	r7, #40	; 0x28
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40004800 	.word	0x40004800
 8002638:	40023800 	.word	0x40023800
 800263c:	40020c00 	.word	0x40020c00

08002640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002678 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002644:	480d      	ldr	r0, [pc, #52]	; (800267c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002646:	490e      	ldr	r1, [pc, #56]	; (8002680 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002648:	4a0e      	ldr	r2, [pc, #56]	; (8002684 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800264c:	e002      	b.n	8002654 <LoopCopyDataInit>

0800264e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002652:	3304      	adds	r3, #4

08002654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002658:	d3f9      	bcc.n	800264e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800265a:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800265c:	4c0b      	ldr	r4, [pc, #44]	; (800268c <LoopFillZerobss+0x26>)
  movs r3, #0
 800265e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002660:	e001      	b.n	8002666 <LoopFillZerobss>

08002662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002664:	3204      	adds	r2, #4

08002666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002668:	d3fb      	bcc.n	8002662 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800266a:	f7ff fd75 	bl	8002158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800266e:	f004 fb3d 	bl	8006cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002672:	f7fe fd11 	bl	8001098 <main>
  bx  lr    
 8002676:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002678:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800267c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002680:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002684:	08007fdc 	.word	0x08007fdc
  ldr r2, =_sbss
 8002688:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800268c:	20000260 	.word	0x20000260

08002690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002690:	e7fe      	b.n	8002690 <ADC_IRQHandler>
	...

08002694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002698:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <HAL_Init+0x40>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0d      	ldr	r2, [pc, #52]	; (80026d4 <HAL_Init+0x40>)
 800269e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_Init+0x40>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <HAL_Init+0x40>)
 80026aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <HAL_Init+0x40>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a07      	ldr	r2, [pc, #28]	; (80026d4 <HAL_Init+0x40>)
 80026b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026bc:	2003      	movs	r0, #3
 80026be:	f000 fd71 	bl	80031a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026c2:	200f      	movs	r0, #15
 80026c4:	f000 f808 	bl	80026d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026c8:	f7ff fc28 	bl	8001f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023c00 	.word	0x40023c00

080026d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_InitTick+0x54>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_InitTick+0x58>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	4619      	mov	r1, r3
 80026ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80026f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fd89 	bl	800320e <HAL_SYSTICK_Config>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e00e      	b.n	8002724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b0f      	cmp	r3, #15
 800270a:	d80a      	bhi.n	8002722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800270c:	2200      	movs	r2, #0
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	f000 fd51 	bl	80031ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002718:	4a06      	ldr	r2, [pc, #24]	; (8002734 <HAL_InitTick+0x5c>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	e000      	b.n	8002724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000004 	.word	0x20000004
 8002730:	2000000c 	.word	0x2000000c
 8002734:	20000008 	.word	0x20000008

08002738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_IncTick+0x20>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	461a      	mov	r2, r3
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_IncTick+0x24>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4413      	add	r3, r2
 8002748:	4a04      	ldr	r2, [pc, #16]	; (800275c <HAL_IncTick+0x24>)
 800274a:	6013      	str	r3, [r2, #0]
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	2000000c 	.word	0x2000000c
 800275c:	2000024c 	.word	0x2000024c

08002760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return uwTick;
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <HAL_GetTick+0x14>)
 8002766:	681b      	ldr	r3, [r3, #0]
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	2000024c 	.word	0x2000024c

08002778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002780:	f7ff ffee 	bl	8002760 <HAL_GetTick>
 8002784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d005      	beq.n	800279e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_Delay+0x44>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4413      	add	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800279e:	bf00      	nop
 80027a0:	f7ff ffde 	bl	8002760 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d8f7      	bhi.n	80027a0 <HAL_Delay+0x28>
  {
  }
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	2000000c 	.word	0x2000000c

080027c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e033      	b.n	800283e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe fb50 	bl	8000e84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d118      	bne.n	8002830 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002806:	f023 0302 	bic.w	r3, r3, #2
 800280a:	f043 0202 	orr.w	r2, r3, #2
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fa78 	bl	8002d08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f023 0303 	bic.w	r3, r3, #3
 8002826:	f043 0201 	orr.w	r2, r3, #1
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
 800282e:	e001      	b.n	8002834 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800283c:	7bfb      	ldrb	r3, [r7, #15]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_ADC_Start_DMA+0x1e>
 8002862:	2302      	movs	r3, #2
 8002864:	e0e9      	b.n	8002a3a <HAL_ADC_Start_DMA+0x1f2>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	d018      	beq.n	80028ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800288c:	4b6d      	ldr	r3, [pc, #436]	; (8002a44 <HAL_ADC_Start_DMA+0x1fc>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a6d      	ldr	r2, [pc, #436]	; (8002a48 <HAL_ADC_Start_DMA+0x200>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	0c9a      	lsrs	r2, r3, #18
 8002898:	4613      	mov	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4413      	add	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80028a0:	e002      	b.n	80028a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f9      	bne.n	80028a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028bc:	d107      	bne.n	80028ce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b01      	cmp	r3, #1
 80028da:	f040 80a1 	bne.w	8002a20 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028e6:	f023 0301 	bic.w	r3, r3, #1
 80028ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d007      	beq.n	8002910 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002908:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291c:	d106      	bne.n	800292c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f023 0206 	bic.w	r2, r3, #6
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	645a      	str	r2, [r3, #68]	; 0x44
 800292a:	e002      	b.n	8002932 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800293a:	4b44      	ldr	r3, [pc, #272]	; (8002a4c <HAL_ADC_Start_DMA+0x204>)
 800293c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	4a43      	ldr	r2, [pc, #268]	; (8002a50 <HAL_ADC_Start_DMA+0x208>)
 8002944:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	4a42      	ldr	r2, [pc, #264]	; (8002a54 <HAL_ADC_Start_DMA+0x20c>)
 800294c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002952:	4a41      	ldr	r2, [pc, #260]	; (8002a58 <HAL_ADC_Start_DMA+0x210>)
 8002954:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800295e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800296e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800297e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	334c      	adds	r3, #76	; 0x4c
 800298a:	4619      	mov	r1, r3
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f000 fcf8 	bl	8003384 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	2b00      	cmp	r3, #0
 800299e:	d12a      	bne.n	80029f6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a2d      	ldr	r2, [pc, #180]	; (8002a5c <HAL_ADC_Start_DMA+0x214>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d015      	beq.n	80029d6 <HAL_ADC_Start_DMA+0x18e>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a2c      	ldr	r2, [pc, #176]	; (8002a60 <HAL_ADC_Start_DMA+0x218>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d105      	bne.n	80029c0 <HAL_ADC_Start_DMA+0x178>
 80029b4:	4b25      	ldr	r3, [pc, #148]	; (8002a4c <HAL_ADC_Start_DMA+0x204>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a27      	ldr	r2, [pc, #156]	; (8002a64 <HAL_ADC_Start_DMA+0x21c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d136      	bne.n	8002a38 <HAL_ADC_Start_DMA+0x1f0>
 80029ca:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_ADC_Start_DMA+0x204>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d130      	bne.n	8002a38 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d129      	bne.n	8002a38 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	e020      	b.n	8002a38 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a18      	ldr	r2, [pc, #96]	; (8002a5c <HAL_ADC_Start_DMA+0x214>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d11b      	bne.n	8002a38 <HAL_ADC_Start_DMA+0x1f0>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d114      	bne.n	8002a38 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a1c:	609a      	str	r2, [r3, #8]
 8002a1e:	e00b      	b.n	8002a38 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	f043 0210 	orr.w	r2, r3, #16
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	f043 0201 	orr.w	r2, r3, #1
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000004 	.word	0x20000004
 8002a48:	431bde83 	.word	0x431bde83
 8002a4c:	40012300 	.word	0x40012300
 8002a50:	08002f01 	.word	0x08002f01
 8002a54:	08002fbb 	.word	0x08002fbb
 8002a58:	08002fd7 	.word	0x08002fd7
 8002a5c:	40012000 	.word	0x40012000
 8002a60:	40012100 	.word	0x40012100
 8002a64:	40012200 	.word	0x40012200

08002a68 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x1c>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e113      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x244>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b09      	cmp	r3, #9
 8002ace:	d925      	bls.n	8002b1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68d9      	ldr	r1, [r3, #12]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3b1e      	subs	r3, #30
 8002ae6:	2207      	movs	r2, #7
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43da      	mvns	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	400a      	ands	r2, r1
 8002af4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68d9      	ldr	r1, [r3, #12]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	4618      	mov	r0, r3
 8002b08:	4603      	mov	r3, r0
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4403      	add	r3, r0
 8002b0e:	3b1e      	subs	r3, #30
 8002b10:	409a      	lsls	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	e022      	b.n	8002b62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6919      	ldr	r1, [r3, #16]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4413      	add	r3, r2
 8002b30:	2207      	movs	r2, #7
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43da      	mvns	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	400a      	ands	r2, r1
 8002b3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6919      	ldr	r1, [r3, #16]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	4618      	mov	r0, r3
 8002b52:	4603      	mov	r3, r0
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	4403      	add	r3, r0
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b06      	cmp	r3, #6
 8002b68:	d824      	bhi.n	8002bb4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	3b05      	subs	r3, #5
 8002b7c:	221f      	movs	r2, #31
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43da      	mvns	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	400a      	ands	r2, r1
 8002b8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	4618      	mov	r0, r3
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3b05      	subs	r3, #5
 8002ba6:	fa00 f203 	lsl.w	r2, r0, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8002bb2:	e04c      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b0c      	cmp	r3, #12
 8002bba:	d824      	bhi.n	8002c06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	3b23      	subs	r3, #35	; 0x23
 8002bce:	221f      	movs	r2, #31
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43da      	mvns	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	400a      	ands	r2, r1
 8002bdc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	4618      	mov	r0, r3
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3b23      	subs	r3, #35	; 0x23
 8002bf8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	631a      	str	r2, [r3, #48]	; 0x30
 8002c04:	e023      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	3b41      	subs	r3, #65	; 0x41
 8002c18:	221f      	movs	r2, #31
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	400a      	ands	r2, r1
 8002c26:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	4618      	mov	r0, r3
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	3b41      	subs	r3, #65	; 0x41
 8002c42:	fa00 f203 	lsl.w	r2, r0, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c4e:	4b29      	ldr	r3, [pc, #164]	; (8002cf4 <HAL_ADC_ConfigChannel+0x250>)
 8002c50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a28      	ldr	r2, [pc, #160]	; (8002cf8 <HAL_ADC_ConfigChannel+0x254>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d10f      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x1d8>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b12      	cmp	r3, #18
 8002c62:	d10b      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <HAL_ADC_ConfigChannel+0x254>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d12b      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x23a>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1c      	ldr	r2, [pc, #112]	; (8002cfc <HAL_ADC_ConfigChannel+0x258>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d003      	beq.n	8002c98 <HAL_ADC_ConfigChannel+0x1f4>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b11      	cmp	r3, #17
 8002c96:	d122      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a11      	ldr	r2, [pc, #68]	; (8002cfc <HAL_ADC_ConfigChannel+0x258>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d111      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_ADC_ConfigChannel+0x25c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a11      	ldr	r2, [pc, #68]	; (8002d04 <HAL_ADC_ConfigChannel+0x260>)
 8002cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc4:	0c9a      	lsrs	r2, r3, #18
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cd0:	e002      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f9      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	40012300 	.word	0x40012300
 8002cf8:	40012000 	.word	0x40012000
 8002cfc:	10000012 	.word	0x10000012
 8002d00:	20000004 	.word	0x20000004
 8002d04:	431bde83 	.word	0x431bde83

08002d08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d10:	4b79      	ldr	r3, [pc, #484]	; (8002ef8 <ADC_Init+0x1f0>)
 8002d12:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	021a      	lsls	r2, r3, #8
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6899      	ldr	r1, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9a:	4a58      	ldr	r2, [pc, #352]	; (8002efc <ADC_Init+0x1f4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d022      	beq.n	8002de6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6899      	ldr	r1, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6899      	ldr	r1, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	e00f      	b.n	8002e06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002df4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0202 	bic.w	r2, r2, #2
 8002e14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6899      	ldr	r1, [r3, #8]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	7e1b      	ldrb	r3, [r3, #24]
 8002e20:	005a      	lsls	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d01b      	beq.n	8002e6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6859      	ldr	r1, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	035a      	lsls	r2, r3, #13
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	e007      	b.n	8002e7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	051a      	lsls	r2, r3, #20
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002eb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6899      	ldr	r1, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ebe:	025a      	lsls	r2, r3, #9
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6899      	ldr	r1, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	029a      	lsls	r2, r3, #10
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	609a      	str	r2, [r3, #8]
}
 8002eec:	bf00      	nop
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40012300 	.word	0x40012300
 8002efc:	0f000001 	.word	0x0f000001

08002f00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d13c      	bne.n	8002f94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d12b      	bne.n	8002f8c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d127      	bne.n	8002f8c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d006      	beq.n	8002f58 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d119      	bne.n	8002f8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0220 	bic.w	r2, r2, #32
 8002f66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d105      	bne.n	8002f8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	f043 0201 	orr.w	r2, r3, #1
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f7ff fd6b 	bl	8002a68 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f92:	e00e      	b.n	8002fb2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f7ff fd75 	bl	8002a90 <HAL_ADC_ErrorCallback>
}
 8002fa6:	e004      	b.n	8002fb2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	4798      	blx	r3
}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f7ff fd57 	bl	8002a7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2240      	movs	r2, #64	; 0x40
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	f043 0204 	orr.w	r2, r3, #4
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f7ff fd4a 	bl	8002a90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ffc:	bf00      	nop
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <__NVIC_SetPriorityGrouping+0x44>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003020:	4013      	ands	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800302c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003036:	4a04      	ldr	r2, [pc, #16]	; (8003048 <__NVIC_SetPriorityGrouping+0x44>)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	60d3      	str	r3, [r2, #12]
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003050:	4b04      	ldr	r3, [pc, #16]	; (8003064 <__NVIC_GetPriorityGrouping+0x18>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	0a1b      	lsrs	r3, r3, #8
 8003056:	f003 0307 	and.w	r3, r3, #7
}
 800305a:	4618      	mov	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	2b00      	cmp	r3, #0
 8003078:	db0b      	blt.n	8003092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	f003 021f 	and.w	r2, r3, #31
 8003080:	4907      	ldr	r1, [pc, #28]	; (80030a0 <__NVIC_EnableIRQ+0x38>)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	2001      	movs	r0, #1
 800308a:	fa00 f202 	lsl.w	r2, r0, r2
 800308e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	e000e100 	.word	0xe000e100

080030a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	6039      	str	r1, [r7, #0]
 80030ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	db0a      	blt.n	80030ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	490c      	ldr	r1, [pc, #48]	; (80030f0 <__NVIC_SetPriority+0x4c>)
 80030be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c2:	0112      	lsls	r2, r2, #4
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	440b      	add	r3, r1
 80030c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030cc:	e00a      	b.n	80030e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	4908      	ldr	r1, [pc, #32]	; (80030f4 <__NVIC_SetPriority+0x50>)
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	3b04      	subs	r3, #4
 80030dc:	0112      	lsls	r2, r2, #4
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	440b      	add	r3, r1
 80030e2:	761a      	strb	r2, [r3, #24]
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	e000e100 	.word	0xe000e100
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b089      	sub	sp, #36	; 0x24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f1c3 0307 	rsb	r3, r3, #7
 8003112:	2b04      	cmp	r3, #4
 8003114:	bf28      	it	cs
 8003116:	2304      	movcs	r3, #4
 8003118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3304      	adds	r3, #4
 800311e:	2b06      	cmp	r3, #6
 8003120:	d902      	bls.n	8003128 <NVIC_EncodePriority+0x30>
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3b03      	subs	r3, #3
 8003126:	e000      	b.n	800312a <NVIC_EncodePriority+0x32>
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800312c:	f04f 32ff 	mov.w	r2, #4294967295
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43da      	mvns	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	401a      	ands	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003140:	f04f 31ff 	mov.w	r1, #4294967295
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	fa01 f303 	lsl.w	r3, r1, r3
 800314a:	43d9      	mvns	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003150:	4313      	orrs	r3, r2
         );
}
 8003152:	4618      	mov	r0, r3
 8003154:	3724      	adds	r7, #36	; 0x24
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3b01      	subs	r3, #1
 800316c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003170:	d301      	bcc.n	8003176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003172:	2301      	movs	r3, #1
 8003174:	e00f      	b.n	8003196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003176:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <SysTick_Config+0x40>)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3b01      	subs	r3, #1
 800317c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800317e:	210f      	movs	r1, #15
 8003180:	f04f 30ff 	mov.w	r0, #4294967295
 8003184:	f7ff ff8e 	bl	80030a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <SysTick_Config+0x40>)
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800318e:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <SysTick_Config+0x40>)
 8003190:	2207      	movs	r2, #7
 8003192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	e000e010 	.word	0xe000e010

080031a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff ff29 	bl	8003004 <__NVIC_SetPriorityGrouping>
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b086      	sub	sp, #24
 80031be:	af00      	add	r7, sp, #0
 80031c0:	4603      	mov	r3, r0
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031cc:	f7ff ff3e 	bl	800304c <__NVIC_GetPriorityGrouping>
 80031d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	6978      	ldr	r0, [r7, #20]
 80031d8:	f7ff ff8e 	bl	80030f8 <NVIC_EncodePriority>
 80031dc:	4602      	mov	r2, r0
 80031de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031e2:	4611      	mov	r1, r2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff5d 	bl	80030a4 <__NVIC_SetPriority>
}
 80031ea:	bf00      	nop
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	4603      	mov	r3, r0
 80031fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff ff31 	bl	8003068 <__NVIC_EnableIRQ>
}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff ffa2 	bl	8003160 <SysTick_Config>
 800321c:	4603      	mov	r3, r0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003234:	f7ff fa94 	bl	8002760 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e099      	b.n	8003378 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003264:	e00f      	b.n	8003286 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003266:	f7ff fa7b 	bl	8002760 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b05      	cmp	r3, #5
 8003272:	d908      	bls.n	8003286 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2220      	movs	r2, #32
 8003278:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2203      	movs	r2, #3
 800327e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e078      	b.n	8003378 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1e8      	bne.n	8003266 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	4b38      	ldr	r3, [pc, #224]	; (8003380 <HAL_DMA_Init+0x158>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d107      	bne.n	80032f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	4313      	orrs	r3, r2
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f023 0307 	bic.w	r3, r3, #7
 8003306:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	2b04      	cmp	r3, #4
 8003318:	d117      	bne.n	800334a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00e      	beq.n	800334a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fb01 	bl	8003934 <DMA_CheckFifoParam>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2240      	movs	r2, #64	; 0x40
 800333c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003346:	2301      	movs	r3, #1
 8003348:	e016      	b.n	8003378 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fab8 	bl	80038c8 <DMA_CalcBaseAndBitshift>
 8003358:	4603      	mov	r3, r0
 800335a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003360:	223f      	movs	r2, #63	; 0x3f
 8003362:	409a      	lsls	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	f010803f 	.word	0xf010803f

08003384 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_DMA_Start_IT+0x26>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e040      	b.n	800342c <HAL_DMA_Start_IT+0xa8>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d12f      	bne.n	800341e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2202      	movs	r2, #2
 80033c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fa4a 	bl	800386c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033dc:	223f      	movs	r2, #63	; 0x3f
 80033de:	409a      	lsls	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0216 	orr.w	r2, r2, #22
 80033f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d007      	beq.n	800340c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0208 	orr.w	r2, r2, #8
 800340a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	e005      	b.n	800342a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003426:	2302      	movs	r3, #2
 8003428:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800342a:	7dfb      	ldrb	r3, [r7, #23]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003440:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003442:	f7ff f98d 	bl	8002760 <HAL_GetTick>
 8003446:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d008      	beq.n	8003466 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2280      	movs	r2, #128	; 0x80
 8003458:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e052      	b.n	800350c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0216 	bic.w	r2, r2, #22
 8003474:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695a      	ldr	r2, [r3, #20]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003484:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d103      	bne.n	8003496 <HAL_DMA_Abort+0x62>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0208 	bic.w	r2, r2, #8
 80034a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0201 	bic.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034b6:	e013      	b.n	80034e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034b8:	f7ff f952 	bl	8002760 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b05      	cmp	r3, #5
 80034c4:	d90c      	bls.n	80034e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2203      	movs	r2, #3
 80034d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e015      	b.n	800350c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e4      	bne.n	80034b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f2:	223f      	movs	r2, #63	; 0x3f
 80034f4:	409a      	lsls	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d004      	beq.n	8003532 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2280      	movs	r2, #128	; 0x80
 800352c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e00c      	b.n	800354c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2205      	movs	r2, #5
 8003536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0201 	bic.w	r2, r2, #1
 8003548:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003564:	4b8e      	ldr	r3, [pc, #568]	; (80037a0 <HAL_DMA_IRQHandler+0x248>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a8e      	ldr	r2, [pc, #568]	; (80037a4 <HAL_DMA_IRQHandler+0x24c>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	0a9b      	lsrs	r3, r3, #10
 8003570:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003576:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003582:	2208      	movs	r2, #8
 8003584:	409a      	lsls	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4013      	ands	r3, r2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d01a      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0204 	bic.w	r2, r2, #4
 80035aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b0:	2208      	movs	r2, #8
 80035b2:	409a      	lsls	r2, r3
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	f043 0201 	orr.w	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c8:	2201      	movs	r2, #1
 80035ca:	409a      	lsls	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d012      	beq.n	80035fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00b      	beq.n	80035fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e6:	2201      	movs	r2, #1
 80035e8:	409a      	lsls	r2, r3
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f2:	f043 0202 	orr.w	r2, r3, #2
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fe:	2204      	movs	r2, #4
 8003600:	409a      	lsls	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4013      	ands	r3, r2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d012      	beq.n	8003630 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00b      	beq.n	8003630 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	2204      	movs	r2, #4
 800361e:	409a      	lsls	r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003628:	f043 0204 	orr.w	r2, r3, #4
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003634:	2210      	movs	r2, #16
 8003636:	409a      	lsls	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d043      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d03c      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	2210      	movs	r2, #16
 8003654:	409a      	lsls	r2, r3
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d018      	beq.n	800369a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d108      	bne.n	8003688 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	2b00      	cmp	r3, #0
 800367c:	d024      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	4798      	blx	r3
 8003686:	e01f      	b.n	80036c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01b      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	4798      	blx	r3
 8003698:	e016      	b.n	80036c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d107      	bne.n	80036b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0208 	bic.w	r2, r2, #8
 80036b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	2220      	movs	r2, #32
 80036ce:	409a      	lsls	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 808f 	beq.w	80037f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 8087 	beq.w	80037f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ee:	2220      	movs	r2, #32
 80036f0:	409a      	lsls	r2, r3
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b05      	cmp	r3, #5
 8003700:	d136      	bne.n	8003770 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0216 	bic.w	r2, r2, #22
 8003710:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003720:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d103      	bne.n	8003732 <HAL_DMA_IRQHandler+0x1da>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0208 	bic.w	r2, r2, #8
 8003740:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003746:	223f      	movs	r2, #63	; 0x3f
 8003748:	409a      	lsls	r2, r3
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003762:	2b00      	cmp	r3, #0
 8003764:	d07e      	beq.n	8003864 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	4798      	blx	r3
        }
        return;
 800376e:	e079      	b.n	8003864 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01d      	beq.n	80037ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10d      	bne.n	80037a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	2b00      	cmp	r3, #0
 8003792:	d031      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
 800379c:	e02c      	b.n	80037f8 <HAL_DMA_IRQHandler+0x2a0>
 800379e:	bf00      	nop
 80037a0:	20000004 	.word	0x20000004
 80037a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d023      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	4798      	blx	r3
 80037b8:	e01e      	b.n	80037f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10f      	bne.n	80037e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0210 	bic.w	r2, r2, #16
 80037d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d032      	beq.n	8003866 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d022      	beq.n	8003852 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2205      	movs	r2, #5
 8003810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	3301      	adds	r3, #1
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	429a      	cmp	r2, r3
 800382e:	d307      	bcc.n	8003840 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f2      	bne.n	8003824 <HAL_DMA_IRQHandler+0x2cc>
 800383e:	e000      	b.n	8003842 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003840:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d005      	beq.n	8003866 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	4798      	blx	r3
 8003862:	e000      	b.n	8003866 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003864:	bf00      	nop
    }
  }
}
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003888:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b40      	cmp	r3, #64	; 0x40
 8003898:	d108      	bne.n	80038ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038aa:	e007      	b.n	80038bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	60da      	str	r2, [r3, #12]
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	3b10      	subs	r3, #16
 80038d8:	4a14      	ldr	r2, [pc, #80]	; (800392c <DMA_CalcBaseAndBitshift+0x64>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	091b      	lsrs	r3, r3, #4
 80038e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038e2:	4a13      	ldr	r2, [pc, #76]	; (8003930 <DMA_CalcBaseAndBitshift+0x68>)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4413      	add	r3, r2
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d909      	bls.n	800390a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038fe:	f023 0303 	bic.w	r3, r3, #3
 8003902:	1d1a      	adds	r2, r3, #4
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	659a      	str	r2, [r3, #88]	; 0x58
 8003908:	e007      	b.n	800391a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003912:	f023 0303 	bic.w	r3, r3, #3
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	aaaaaaab 	.word	0xaaaaaaab
 8003930:	08007f2c 	.word	0x08007f2c

08003934 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003944:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d11f      	bne.n	800398e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d856      	bhi.n	8003a02 <DMA_CheckFifoParam+0xce>
 8003954:	a201      	add	r2, pc, #4	; (adr r2, 800395c <DMA_CheckFifoParam+0x28>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	0800396d 	.word	0x0800396d
 8003960:	0800397f 	.word	0x0800397f
 8003964:	0800396d 	.word	0x0800396d
 8003968:	08003a03 	.word	0x08003a03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d046      	beq.n	8003a06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800397c:	e043      	b.n	8003a06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003986:	d140      	bne.n	8003a0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800398c:	e03d      	b.n	8003a0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003996:	d121      	bne.n	80039dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b03      	cmp	r3, #3
 800399c:	d837      	bhi.n	8003a0e <DMA_CheckFifoParam+0xda>
 800399e:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <DMA_CheckFifoParam+0x70>)
 80039a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a4:	080039b5 	.word	0x080039b5
 80039a8:	080039bb 	.word	0x080039bb
 80039ac:	080039b5 	.word	0x080039b5
 80039b0:	080039cd 	.word	0x080039cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
      break;
 80039b8:	e030      	b.n	8003a1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d025      	beq.n	8003a12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ca:	e022      	b.n	8003a12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039d4:	d11f      	bne.n	8003a16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039da:	e01c      	b.n	8003a16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d903      	bls.n	80039ea <DMA_CheckFifoParam+0xb6>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d003      	beq.n	80039f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039e8:	e018      	b.n	8003a1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
      break;
 80039ee:	e015      	b.n	8003a1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00e      	beq.n	8003a1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003a00:	e00b      	b.n	8003a1a <DMA_CheckFifoParam+0xe6>
      break;
 8003a02:	bf00      	nop
 8003a04:	e00a      	b.n	8003a1c <DMA_CheckFifoParam+0xe8>
      break;
 8003a06:	bf00      	nop
 8003a08:	e008      	b.n	8003a1c <DMA_CheckFifoParam+0xe8>
      break;
 8003a0a:	bf00      	nop
 8003a0c:	e006      	b.n	8003a1c <DMA_CheckFifoParam+0xe8>
      break;
 8003a0e:	bf00      	nop
 8003a10:	e004      	b.n	8003a1c <DMA_CheckFifoParam+0xe8>
      break;
 8003a12:	bf00      	nop
 8003a14:	e002      	b.n	8003a1c <DMA_CheckFifoParam+0xe8>
      break;   
 8003a16:	bf00      	nop
 8003a18:	e000      	b.n	8003a1c <DMA_CheckFifoParam+0xe8>
      break;
 8003a1a:	bf00      	nop
    }
  } 
  
  return status; 
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop

08003a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b089      	sub	sp, #36	; 0x24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	e177      	b.n	8003d38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a48:	2201      	movs	r2, #1
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	f040 8166 	bne.w	8003d32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d005      	beq.n	8003a7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d130      	bne.n	8003ae0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	2203      	movs	r2, #3
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4013      	ands	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	091b      	lsrs	r3, r3, #4
 8003aca:	f003 0201 	and.w	r2, r3, #1
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d017      	beq.n	8003b1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	2203      	movs	r2, #3
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d123      	bne.n	8003b70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	08da      	lsrs	r2, r3, #3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3208      	adds	r2, #8
 8003b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	220f      	movs	r2, #15
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	08da      	lsrs	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3208      	adds	r2, #8
 8003b6a:	69b9      	ldr	r1, [r7, #24]
 8003b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 0203 	and.w	r2, r3, #3
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80c0 	beq.w	8003d32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	4b66      	ldr	r3, [pc, #408]	; (8003d50 <HAL_GPIO_Init+0x324>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	4a65      	ldr	r2, [pc, #404]	; (8003d50 <HAL_GPIO_Init+0x324>)
 8003bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bc2:	4b63      	ldr	r3, [pc, #396]	; (8003d50 <HAL_GPIO_Init+0x324>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bce:	4a61      	ldr	r2, [pc, #388]	; (8003d54 <HAL_GPIO_Init+0x328>)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	089b      	lsrs	r3, r3, #2
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	220f      	movs	r2, #15
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43db      	mvns	r3, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a58      	ldr	r2, [pc, #352]	; (8003d58 <HAL_GPIO_Init+0x32c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d037      	beq.n	8003c6a <HAL_GPIO_Init+0x23e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a57      	ldr	r2, [pc, #348]	; (8003d5c <HAL_GPIO_Init+0x330>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d031      	beq.n	8003c66 <HAL_GPIO_Init+0x23a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a56      	ldr	r2, [pc, #344]	; (8003d60 <HAL_GPIO_Init+0x334>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d02b      	beq.n	8003c62 <HAL_GPIO_Init+0x236>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a55      	ldr	r2, [pc, #340]	; (8003d64 <HAL_GPIO_Init+0x338>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d025      	beq.n	8003c5e <HAL_GPIO_Init+0x232>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a54      	ldr	r2, [pc, #336]	; (8003d68 <HAL_GPIO_Init+0x33c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01f      	beq.n	8003c5a <HAL_GPIO_Init+0x22e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a53      	ldr	r2, [pc, #332]	; (8003d6c <HAL_GPIO_Init+0x340>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d019      	beq.n	8003c56 <HAL_GPIO_Init+0x22a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a52      	ldr	r2, [pc, #328]	; (8003d70 <HAL_GPIO_Init+0x344>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_GPIO_Init+0x226>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a51      	ldr	r2, [pc, #324]	; (8003d74 <HAL_GPIO_Init+0x348>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00d      	beq.n	8003c4e <HAL_GPIO_Init+0x222>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a50      	ldr	r2, [pc, #320]	; (8003d78 <HAL_GPIO_Init+0x34c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <HAL_GPIO_Init+0x21e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a4f      	ldr	r2, [pc, #316]	; (8003d7c <HAL_GPIO_Init+0x350>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d101      	bne.n	8003c46 <HAL_GPIO_Init+0x21a>
 8003c42:	2309      	movs	r3, #9
 8003c44:	e012      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c46:	230a      	movs	r3, #10
 8003c48:	e010      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	e00e      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c4e:	2307      	movs	r3, #7
 8003c50:	e00c      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c52:	2306      	movs	r3, #6
 8003c54:	e00a      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c56:	2305      	movs	r3, #5
 8003c58:	e008      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	e006      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e004      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e002      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_GPIO_Init+0x240>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	69fa      	ldr	r2, [r7, #28]
 8003c6e:	f002 0203 	and.w	r2, r2, #3
 8003c72:	0092      	lsls	r2, r2, #2
 8003c74:	4093      	lsls	r3, r2
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c7c:	4935      	ldr	r1, [pc, #212]	; (8003d54 <HAL_GPIO_Init+0x328>)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	3302      	adds	r3, #2
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c8a:	4b3d      	ldr	r3, [pc, #244]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	43db      	mvns	r3, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4013      	ands	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cae:	4a34      	ldr	r2, [pc, #208]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cb4:	4b32      	ldr	r3, [pc, #200]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cd8:	4a29      	ldr	r2, [pc, #164]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cde:	4b28      	ldr	r3, [pc, #160]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4013      	ands	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d02:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d08:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d2c:	4a14      	ldr	r2, [pc, #80]	; (8003d80 <HAL_GPIO_Init+0x354>)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	3301      	adds	r3, #1
 8003d36:	61fb      	str	r3, [r7, #28]
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	2b0f      	cmp	r3, #15
 8003d3c:	f67f ae84 	bls.w	8003a48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	3724      	adds	r7, #36	; 0x24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40013800 	.word	0x40013800
 8003d58:	40020000 	.word	0x40020000
 8003d5c:	40020400 	.word	0x40020400
 8003d60:	40020800 	.word	0x40020800
 8003d64:	40020c00 	.word	0x40020c00
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40021400 	.word	0x40021400
 8003d70:	40021800 	.word	0x40021800
 8003d74:	40021c00 	.word	0x40021c00
 8003d78:	40022000 	.word	0x40022000
 8003d7c:	40022400 	.word	0x40022400
 8003d80:	40013c00 	.word	0x40013c00

08003d84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	603b      	str	r3, [r7, #0]
 8003d92:	4b20      	ldr	r3, [pc, #128]	; (8003e14 <HAL_PWREx_EnableOverDrive+0x90>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	4a1f      	ldr	r2, [pc, #124]	; (8003e14 <HAL_PWREx_EnableOverDrive+0x90>)
 8003d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d9e:	4b1d      	ldr	r3, [pc, #116]	; (8003e14 <HAL_PWREx_EnableOverDrive+0x90>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003daa:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <HAL_PWREx_EnableOverDrive+0x94>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003db0:	f7fe fcd6 	bl	8002760 <HAL_GetTick>
 8003db4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003db6:	e009      	b.n	8003dcc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003db8:	f7fe fcd2 	bl	8002760 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dc6:	d901      	bls.n	8003dcc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e01f      	b.n	8003e0c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003dcc:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <HAL_PWREx_EnableOverDrive+0x98>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd8:	d1ee      	bne.n	8003db8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003dda:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003de0:	f7fe fcbe 	bl	8002760 <HAL_GetTick>
 8003de4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003de6:	e009      	b.n	8003dfc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003de8:	f7fe fcba 	bl	8002760 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003df6:	d901      	bls.n	8003dfc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e007      	b.n	8003e0c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003dfc:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <HAL_PWREx_EnableOverDrive+0x98>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e08:	d1ee      	bne.n	8003de8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40023800 	.word	0x40023800
 8003e18:	420e0040 	.word	0x420e0040
 8003e1c:	40007000 	.word	0x40007000
 8003e20:	420e0044 	.word	0x420e0044

08003e24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e267      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d075      	beq.n	8003f2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e42:	4b88      	ldr	r3, [pc, #544]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d00c      	beq.n	8003e68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e4e:	4b85      	ldr	r3, [pc, #532]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d112      	bne.n	8003e80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e5a:	4b82      	ldr	r3, [pc, #520]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e66:	d10b      	bne.n	8003e80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e68:	4b7e      	ldr	r3, [pc, #504]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d05b      	beq.n	8003f2c <HAL_RCC_OscConfig+0x108>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d157      	bne.n	8003f2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e242      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e88:	d106      	bne.n	8003e98 <HAL_RCC_OscConfig+0x74>
 8003e8a:	4b76      	ldr	r3, [pc, #472]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a75      	ldr	r2, [pc, #468]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	e01d      	b.n	8003ed4 <HAL_RCC_OscConfig+0xb0>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ea0:	d10c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x98>
 8003ea2:	4b70      	ldr	r3, [pc, #448]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a6f      	ldr	r2, [pc, #444]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	4b6d      	ldr	r3, [pc, #436]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a6c      	ldr	r2, [pc, #432]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	e00b      	b.n	8003ed4 <HAL_RCC_OscConfig+0xb0>
 8003ebc:	4b69      	ldr	r3, [pc, #420]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a68      	ldr	r2, [pc, #416]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	4b66      	ldr	r3, [pc, #408]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a65      	ldr	r2, [pc, #404]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d013      	beq.n	8003f04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003edc:	f7fe fc40 	bl	8002760 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ee4:	f7fe fc3c 	bl	8002760 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b64      	cmp	r3, #100	; 0x64
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e207      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef6:	4b5b      	ldr	r3, [pc, #364]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0xc0>
 8003f02:	e014      	b.n	8003f2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f04:	f7fe fc2c 	bl	8002760 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f0c:	f7fe fc28 	bl	8002760 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b64      	cmp	r3, #100	; 0x64
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e1f3      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f1e:	4b51      	ldr	r3, [pc, #324]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCC_OscConfig+0xe8>
 8003f2a:	e000      	b.n	8003f2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d063      	beq.n	8004002 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f3a:	4b4a      	ldr	r3, [pc, #296]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00b      	beq.n	8003f5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f46:	4b47      	ldr	r3, [pc, #284]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f4e:	2b08      	cmp	r3, #8
 8003f50:	d11c      	bne.n	8003f8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f52:	4b44      	ldr	r3, [pc, #272]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d116      	bne.n	8003f8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f5e:	4b41      	ldr	r3, [pc, #260]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_RCC_OscConfig+0x152>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d001      	beq.n	8003f76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e1c7      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f76:	4b3b      	ldr	r3, [pc, #236]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4937      	ldr	r1, [pc, #220]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8a:	e03a      	b.n	8004002 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d020      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f94:	4b34      	ldr	r3, [pc, #208]	; (8004068 <HAL_RCC_OscConfig+0x244>)
 8003f96:	2201      	movs	r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9a:	f7fe fbe1 	bl	8002760 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa2:	f7fe fbdd 	bl	8002760 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e1a8      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb4:	4b2b      	ldr	r3, [pc, #172]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc0:	4b28      	ldr	r3, [pc, #160]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4925      	ldr	r1, [pc, #148]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	600b      	str	r3, [r1, #0]
 8003fd4:	e015      	b.n	8004002 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fd6:	4b24      	ldr	r3, [pc, #144]	; (8004068 <HAL_RCC_OscConfig+0x244>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fdc:	f7fe fbc0 	bl	8002760 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fe4:	f7fe fbbc 	bl	8002760 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e187      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ff6:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d036      	beq.n	800407c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d016      	beq.n	8004044 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004016:	4b15      	ldr	r3, [pc, #84]	; (800406c <HAL_RCC_OscConfig+0x248>)
 8004018:	2201      	movs	r2, #1
 800401a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401c:	f7fe fba0 	bl	8002760 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004024:	f7fe fb9c 	bl	8002760 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e167      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004036:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <HAL_RCC_OscConfig+0x240>)
 8004038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0x200>
 8004042:	e01b      	b.n	800407c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004044:	4b09      	ldr	r3, [pc, #36]	; (800406c <HAL_RCC_OscConfig+0x248>)
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800404a:	f7fe fb89 	bl	8002760 <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004050:	e00e      	b.n	8004070 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004052:	f7fe fb85 	bl	8002760 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d907      	bls.n	8004070 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e150      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
 8004064:	40023800 	.word	0x40023800
 8004068:	42470000 	.word	0x42470000
 800406c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004070:	4b88      	ldr	r3, [pc, #544]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1ea      	bne.n	8004052 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 8097 	beq.w	80041b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800408a:	2300      	movs	r3, #0
 800408c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800408e:	4b81      	ldr	r3, [pc, #516]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10f      	bne.n	80040ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800409a:	2300      	movs	r3, #0
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	4b7d      	ldr	r3, [pc, #500]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	4a7c      	ldr	r2, [pc, #496]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 80040a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a8:	6413      	str	r3, [r2, #64]	; 0x40
 80040aa:	4b7a      	ldr	r3, [pc, #488]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040b6:	2301      	movs	r3, #1
 80040b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ba:	4b77      	ldr	r3, [pc, #476]	; (8004298 <HAL_RCC_OscConfig+0x474>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d118      	bne.n	80040f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040c6:	4b74      	ldr	r3, [pc, #464]	; (8004298 <HAL_RCC_OscConfig+0x474>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a73      	ldr	r2, [pc, #460]	; (8004298 <HAL_RCC_OscConfig+0x474>)
 80040cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040d2:	f7fe fb45 	bl	8002760 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040da:	f7fe fb41 	bl	8002760 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e10c      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ec:	4b6a      	ldr	r3, [pc, #424]	; (8004298 <HAL_RCC_OscConfig+0x474>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d106      	bne.n	800410e <HAL_RCC_OscConfig+0x2ea>
 8004100:	4b64      	ldr	r3, [pc, #400]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004104:	4a63      	ldr	r2, [pc, #396]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	6713      	str	r3, [r2, #112]	; 0x70
 800410c:	e01c      	b.n	8004148 <HAL_RCC_OscConfig+0x324>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b05      	cmp	r3, #5
 8004114:	d10c      	bne.n	8004130 <HAL_RCC_OscConfig+0x30c>
 8004116:	4b5f      	ldr	r3, [pc, #380]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411a:	4a5e      	ldr	r2, [pc, #376]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 800411c:	f043 0304 	orr.w	r3, r3, #4
 8004120:	6713      	str	r3, [r2, #112]	; 0x70
 8004122:	4b5c      	ldr	r3, [pc, #368]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004126:	4a5b      	ldr	r2, [pc, #364]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	6713      	str	r3, [r2, #112]	; 0x70
 800412e:	e00b      	b.n	8004148 <HAL_RCC_OscConfig+0x324>
 8004130:	4b58      	ldr	r3, [pc, #352]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004134:	4a57      	ldr	r2, [pc, #348]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004136:	f023 0301 	bic.w	r3, r3, #1
 800413a:	6713      	str	r3, [r2, #112]	; 0x70
 800413c:	4b55      	ldr	r3, [pc, #340]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 800413e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004140:	4a54      	ldr	r2, [pc, #336]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004142:	f023 0304 	bic.w	r3, r3, #4
 8004146:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d015      	beq.n	800417c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004150:	f7fe fb06 	bl	8002760 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004156:	e00a      	b.n	800416e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004158:	f7fe fb02 	bl	8002760 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	f241 3288 	movw	r2, #5000	; 0x1388
 8004166:	4293      	cmp	r3, r2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e0cb      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416e:	4b49      	ldr	r3, [pc, #292]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0ee      	beq.n	8004158 <HAL_RCC_OscConfig+0x334>
 800417a:	e014      	b.n	80041a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417c:	f7fe faf0 	bl	8002760 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004182:	e00a      	b.n	800419a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004184:	f7fe faec 	bl	8002760 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e0b5      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800419a:	4b3e      	ldr	r3, [pc, #248]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1ee      	bne.n	8004184 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d105      	bne.n	80041b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ac:	4b39      	ldr	r3, [pc, #228]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	4a38      	ldr	r2, [pc, #224]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 80041b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 80a1 	beq.w	8004304 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041c2:	4b34      	ldr	r3, [pc, #208]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 030c 	and.w	r3, r3, #12
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d05c      	beq.n	8004288 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d141      	bne.n	800425a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d6:	4b31      	ldr	r3, [pc, #196]	; (800429c <HAL_RCC_OscConfig+0x478>)
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041dc:	f7fe fac0 	bl	8002760 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e4:	f7fe fabc 	bl	8002760 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e087      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f6:	4b27      	ldr	r3, [pc, #156]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f0      	bne.n	80041e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69da      	ldr	r2, [r3, #28]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	019b      	lsls	r3, r3, #6
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	085b      	lsrs	r3, r3, #1
 800421a:	3b01      	subs	r3, #1
 800421c:	041b      	lsls	r3, r3, #16
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	061b      	lsls	r3, r3, #24
 8004226:	491b      	ldr	r1, [pc, #108]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 8004228:	4313      	orrs	r3, r2
 800422a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800422c:	4b1b      	ldr	r3, [pc, #108]	; (800429c <HAL_RCC_OscConfig+0x478>)
 800422e:	2201      	movs	r2, #1
 8004230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004232:	f7fe fa95 	bl	8002760 <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800423a:	f7fe fa91 	bl	8002760 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e05c      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800424c:	4b11      	ldr	r3, [pc, #68]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0f0      	beq.n	800423a <HAL_RCC_OscConfig+0x416>
 8004258:	e054      	b.n	8004304 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425a:	4b10      	ldr	r3, [pc, #64]	; (800429c <HAL_RCC_OscConfig+0x478>)
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004260:	f7fe fa7e 	bl	8002760 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004268:	f7fe fa7a 	bl	8002760 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e045      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800427a:	4b06      	ldr	r3, [pc, #24]	; (8004294 <HAL_RCC_OscConfig+0x470>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f0      	bne.n	8004268 <HAL_RCC_OscConfig+0x444>
 8004286:	e03d      	b.n	8004304 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d107      	bne.n	80042a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e038      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
 8004294:	40023800 	.word	0x40023800
 8004298:	40007000 	.word	0x40007000
 800429c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042a0:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <HAL_RCC_OscConfig+0x4ec>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d028      	beq.n	8004300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d121      	bne.n	8004300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d11a      	bne.n	8004300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042d0:	4013      	ands	r3, r2
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042d8:	4293      	cmp	r3, r2
 80042da:	d111      	bne.n	8004300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	085b      	lsrs	r3, r3, #1
 80042e8:	3b01      	subs	r3, #1
 80042ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d107      	bne.n	8004300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d001      	beq.n	8004304 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e000      	b.n	8004306 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40023800 	.word	0x40023800

08004314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0cc      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004328:	4b68      	ldr	r3, [pc, #416]	; (80044cc <HAL_RCC_ClockConfig+0x1b8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d90c      	bls.n	8004350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004336:	4b65      	ldr	r3, [pc, #404]	; (80044cc <HAL_RCC_ClockConfig+0x1b8>)
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800433e:	4b63      	ldr	r3, [pc, #396]	; (80044cc <HAL_RCC_ClockConfig+0x1b8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d001      	beq.n	8004350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e0b8      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d020      	beq.n	800439e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004368:	4b59      	ldr	r3, [pc, #356]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	4a58      	ldr	r2, [pc, #352]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004372:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004380:	4b53      	ldr	r3, [pc, #332]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	4a52      	ldr	r2, [pc, #328]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800438a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800438c:	4b50      	ldr	r3, [pc, #320]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	494d      	ldr	r1, [pc, #308]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	4313      	orrs	r3, r2
 800439c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d044      	beq.n	8004434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d107      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b2:	4b47      	ldr	r3, [pc, #284]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d119      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e07f      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d003      	beq.n	80043d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d107      	bne.n	80043e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d2:	4b3f      	ldr	r3, [pc, #252]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d109      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e06f      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e2:	4b3b      	ldr	r3, [pc, #236]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e067      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043f2:	4b37      	ldr	r3, [pc, #220]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f023 0203 	bic.w	r2, r3, #3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	4934      	ldr	r1, [pc, #208]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	4313      	orrs	r3, r2
 8004402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004404:	f7fe f9ac 	bl	8002760 <HAL_GetTick>
 8004408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440a:	e00a      	b.n	8004422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800440c:	f7fe f9a8 	bl	8002760 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	f241 3288 	movw	r2, #5000	; 0x1388
 800441a:	4293      	cmp	r3, r2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e04f      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004422:	4b2b      	ldr	r3, [pc, #172]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 020c 	and.w	r2, r3, #12
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	429a      	cmp	r2, r3
 8004432:	d1eb      	bne.n	800440c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004434:	4b25      	ldr	r3, [pc, #148]	; (80044cc <HAL_RCC_ClockConfig+0x1b8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 030f 	and.w	r3, r3, #15
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d20c      	bcs.n	800445c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004442:	4b22      	ldr	r3, [pc, #136]	; (80044cc <HAL_RCC_ClockConfig+0x1b8>)
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800444a:	4b20      	ldr	r3, [pc, #128]	; (80044cc <HAL_RCC_ClockConfig+0x1b8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d001      	beq.n	800445c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e032      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004468:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4916      	ldr	r1, [pc, #88]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	4313      	orrs	r3, r2
 8004478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d009      	beq.n	800449a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004486:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	490e      	ldr	r1, [pc, #56]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	4313      	orrs	r3, r2
 8004498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800449a:	f000 f821 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 800449e:	4602      	mov	r2, r0
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	091b      	lsrs	r3, r3, #4
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	490a      	ldr	r1, [pc, #40]	; (80044d4 <HAL_RCC_ClockConfig+0x1c0>)
 80044ac:	5ccb      	ldrb	r3, [r1, r3]
 80044ae:	fa22 f303 	lsr.w	r3, r2, r3
 80044b2:	4a09      	ldr	r2, [pc, #36]	; (80044d8 <HAL_RCC_ClockConfig+0x1c4>)
 80044b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044b6:	4b09      	ldr	r3, [pc, #36]	; (80044dc <HAL_RCC_ClockConfig+0x1c8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe f90c 	bl	80026d8 <HAL_InitTick>

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40023c00 	.word	0x40023c00
 80044d0:	40023800 	.word	0x40023800
 80044d4:	08007f14 	.word	0x08007f14
 80044d8:	20000004 	.word	0x20000004
 80044dc:	20000008 	.word	0x20000008

080044e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044e4:	b090      	sub	sp, #64	; 0x40
 80044e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	637b      	str	r3, [r7, #52]	; 0x34
 80044ec:	2300      	movs	r3, #0
 80044ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044f0:	2300      	movs	r3, #0
 80044f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044f8:	4b59      	ldr	r3, [pc, #356]	; (8004660 <HAL_RCC_GetSysClockFreq+0x180>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 030c 	and.w	r3, r3, #12
 8004500:	2b08      	cmp	r3, #8
 8004502:	d00d      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0x40>
 8004504:	2b08      	cmp	r3, #8
 8004506:	f200 80a1 	bhi.w	800464c <HAL_RCC_GetSysClockFreq+0x16c>
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <HAL_RCC_GetSysClockFreq+0x34>
 800450e:	2b04      	cmp	r3, #4
 8004510:	d003      	beq.n	800451a <HAL_RCC_GetSysClockFreq+0x3a>
 8004512:	e09b      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004514:	4b53      	ldr	r3, [pc, #332]	; (8004664 <HAL_RCC_GetSysClockFreq+0x184>)
 8004516:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004518:	e09b      	b.n	8004652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800451a:	4b53      	ldr	r3, [pc, #332]	; (8004668 <HAL_RCC_GetSysClockFreq+0x188>)
 800451c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800451e:	e098      	b.n	8004652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004520:	4b4f      	ldr	r3, [pc, #316]	; (8004660 <HAL_RCC_GetSysClockFreq+0x180>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004528:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800452a:	4b4d      	ldr	r3, [pc, #308]	; (8004660 <HAL_RCC_GetSysClockFreq+0x180>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d028      	beq.n	8004588 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004536:	4b4a      	ldr	r3, [pc, #296]	; (8004660 <HAL_RCC_GetSysClockFreq+0x180>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	099b      	lsrs	r3, r3, #6
 800453c:	2200      	movs	r2, #0
 800453e:	623b      	str	r3, [r7, #32]
 8004540:	627a      	str	r2, [r7, #36]	; 0x24
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004548:	2100      	movs	r1, #0
 800454a:	4b47      	ldr	r3, [pc, #284]	; (8004668 <HAL_RCC_GetSysClockFreq+0x188>)
 800454c:	fb03 f201 	mul.w	r2, r3, r1
 8004550:	2300      	movs	r3, #0
 8004552:	fb00 f303 	mul.w	r3, r0, r3
 8004556:	4413      	add	r3, r2
 8004558:	4a43      	ldr	r2, [pc, #268]	; (8004668 <HAL_RCC_GetSysClockFreq+0x188>)
 800455a:	fba0 1202 	umull	r1, r2, r0, r2
 800455e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004560:	460a      	mov	r2, r1
 8004562:	62ba      	str	r2, [r7, #40]	; 0x28
 8004564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004566:	4413      	add	r3, r2
 8004568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800456a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800456c:	2200      	movs	r2, #0
 800456e:	61bb      	str	r3, [r7, #24]
 8004570:	61fa      	str	r2, [r7, #28]
 8004572:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004576:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800457a:	f7fc fa77 	bl	8000a6c <__aeabi_uldivmod>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4613      	mov	r3, r2
 8004584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004586:	e053      	b.n	8004630 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004588:	4b35      	ldr	r3, [pc, #212]	; (8004660 <HAL_RCC_GetSysClockFreq+0x180>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	099b      	lsrs	r3, r3, #6
 800458e:	2200      	movs	r2, #0
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	617a      	str	r2, [r7, #20]
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800459a:	f04f 0b00 	mov.w	fp, #0
 800459e:	4652      	mov	r2, sl
 80045a0:	465b      	mov	r3, fp
 80045a2:	f04f 0000 	mov.w	r0, #0
 80045a6:	f04f 0100 	mov.w	r1, #0
 80045aa:	0159      	lsls	r1, r3, #5
 80045ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045b0:	0150      	lsls	r0, r2, #5
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	ebb2 080a 	subs.w	r8, r2, sl
 80045ba:	eb63 090b 	sbc.w	r9, r3, fp
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	f04f 0300 	mov.w	r3, #0
 80045c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80045ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80045ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80045d2:	ebb2 0408 	subs.w	r4, r2, r8
 80045d6:	eb63 0509 	sbc.w	r5, r3, r9
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	00eb      	lsls	r3, r5, #3
 80045e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045e8:	00e2      	lsls	r2, r4, #3
 80045ea:	4614      	mov	r4, r2
 80045ec:	461d      	mov	r5, r3
 80045ee:	eb14 030a 	adds.w	r3, r4, sl
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	eb45 030b 	adc.w	r3, r5, fp
 80045f8:	607b      	str	r3, [r7, #4]
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004606:	4629      	mov	r1, r5
 8004608:	028b      	lsls	r3, r1, #10
 800460a:	4621      	mov	r1, r4
 800460c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004610:	4621      	mov	r1, r4
 8004612:	028a      	lsls	r2, r1, #10
 8004614:	4610      	mov	r0, r2
 8004616:	4619      	mov	r1, r3
 8004618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461a:	2200      	movs	r2, #0
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	60fa      	str	r2, [r7, #12]
 8004620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004624:	f7fc fa22 	bl	8000a6c <__aeabi_uldivmod>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4613      	mov	r3, r2
 800462e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_RCC_GetSysClockFreq+0x180>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	0c1b      	lsrs	r3, r3, #16
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	3301      	adds	r3, #1
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004640:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004644:	fbb2 f3f3 	udiv	r3, r2, r3
 8004648:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800464a:	e002      	b.n	8004652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_RCC_GetSysClockFreq+0x184>)
 800464e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004654:	4618      	mov	r0, r3
 8004656:	3740      	adds	r7, #64	; 0x40
 8004658:	46bd      	mov	sp, r7
 800465a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800465e:	bf00      	nop
 8004660:	40023800 	.word	0x40023800
 8004664:	00f42400 	.word	0x00f42400
 8004668:	017d7840 	.word	0x017d7840

0800466c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004670:	4b03      	ldr	r3, [pc, #12]	; (8004680 <HAL_RCC_GetHCLKFreq+0x14>)
 8004672:	681b      	ldr	r3, [r3, #0]
}
 8004674:	4618      	mov	r0, r3
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	20000004 	.word	0x20000004

08004684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004688:	f7ff fff0 	bl	800466c <HAL_RCC_GetHCLKFreq>
 800468c:	4602      	mov	r2, r0
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	0a9b      	lsrs	r3, r3, #10
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	4903      	ldr	r1, [pc, #12]	; (80046a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800469a:	5ccb      	ldrb	r3, [r1, r3]
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40023800 	.word	0x40023800
 80046a8:	08007f24 	.word	0x08007f24

080046ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046b0:	f7ff ffdc 	bl	800466c <HAL_RCC_GetHCLKFreq>
 80046b4:	4602      	mov	r2, r0
 80046b6:	4b05      	ldr	r3, [pc, #20]	; (80046cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	0b5b      	lsrs	r3, r3, #13
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	4903      	ldr	r1, [pc, #12]	; (80046d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046c2:	5ccb      	ldrb	r3, [r1, r3]
 80046c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40023800 	.word	0x40023800
 80046d0:	08007f24 	.word	0x08007f24

080046d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10b      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d105      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004704:	2b00      	cmp	r3, #0
 8004706:	d075      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004708:	4b91      	ldr	r3, [pc, #580]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800470e:	f7fe f827 	bl	8002760 <HAL_GetTick>
 8004712:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004714:	e008      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004716:	f7fe f823 	bl	8002760 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e189      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004728:	4b8a      	ldr	r3, [pc, #552]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1f0      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d009      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	019a      	lsls	r2, r3, #6
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	071b      	lsls	r3, r3, #28
 800474c:	4981      	ldr	r1, [pc, #516]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01f      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004760:	4b7c      	ldr	r3, [pc, #496]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004766:	0f1b      	lsrs	r3, r3, #28
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	019a      	lsls	r2, r3, #6
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	061b      	lsls	r3, r3, #24
 800477a:	431a      	orrs	r2, r3
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	071b      	lsls	r3, r3, #28
 8004780:	4974      	ldr	r1, [pc, #464]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004788:	4b72      	ldr	r3, [pc, #456]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800478a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800478e:	f023 021f 	bic.w	r2, r3, #31
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	3b01      	subs	r3, #1
 8004798:	496e      	ldr	r1, [pc, #440]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00d      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	019a      	lsls	r2, r3, #6
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	061b      	lsls	r3, r3, #24
 80047b8:	431a      	orrs	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	071b      	lsls	r3, r3, #28
 80047c0:	4964      	ldr	r1, [pc, #400]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047c8:	4b61      	ldr	r3, [pc, #388]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80047ca:	2201      	movs	r2, #1
 80047cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047ce:	f7fd ffc7 	bl	8002760 <HAL_GetTick>
 80047d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047d4:	e008      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047d6:	f7fd ffc3 	bl	8002760 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e129      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047e8:	4b5a      	ldr	r3, [pc, #360]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0f0      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d105      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004808:	2b00      	cmp	r3, #0
 800480a:	d079      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800480c:	4b52      	ldr	r3, [pc, #328]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004812:	f7fd ffa5 	bl	8002760 <HAL_GetTick>
 8004816:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004818:	e008      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800481a:	f7fd ffa1 	bl	8002760 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e107      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800482c:	4b49      	ldr	r3, [pc, #292]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004838:	d0ef      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	d020      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004846:	4b43      	ldr	r3, [pc, #268]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484c:	0f1b      	lsrs	r3, r3, #28
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	019a      	lsls	r2, r3, #6
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	061b      	lsls	r3, r3, #24
 8004860:	431a      	orrs	r2, r3
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	071b      	lsls	r3, r3, #28
 8004866:	493b      	ldr	r1, [pc, #236]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800486e:	4b39      	ldr	r3, [pc, #228]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004874:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	3b01      	subs	r3, #1
 800487e:	021b      	lsls	r3, r3, #8
 8004880:	4934      	ldr	r1, [pc, #208]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0308 	and.w	r3, r3, #8
 8004890:	2b00      	cmp	r3, #0
 8004892:	d01e      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004894:	4b2f      	ldr	r3, [pc, #188]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489a:	0e1b      	lsrs	r3, r3, #24
 800489c:	f003 030f 	and.w	r3, r3, #15
 80048a0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	019a      	lsls	r2, r3, #6
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	061b      	lsls	r3, r3, #24
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	071b      	lsls	r3, r3, #28
 80048b4:	4927      	ldr	r1, [pc, #156]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80048bc:	4b25      	ldr	r3, [pc, #148]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	4922      	ldr	r1, [pc, #136]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80048d2:	4b21      	ldr	r3, [pc, #132]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80048d4:	2201      	movs	r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048d8:	f7fd ff42 	bl	8002760 <HAL_GetTick>
 80048dc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80048e0:	f7fd ff3e 	bl	8002760 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e0a4      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048f2:	4b18      	ldr	r3, [pc, #96]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048fe:	d1ef      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 808b 	beq.w	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	4b10      	ldr	r3, [pc, #64]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	4a0f      	ldr	r2, [pc, #60]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491c:	6413      	str	r3, [r2, #64]	; 0x40
 800491e:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800492a:	4b0c      	ldr	r3, [pc, #48]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a0b      	ldr	r2, [pc, #44]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004934:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004936:	f7fd ff13 	bl	8002760 <HAL_GetTick>
 800493a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800493c:	e010      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800493e:	f7fd ff0f 	bl	8002760 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d909      	bls.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e075      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004950:	42470068 	.word	0x42470068
 8004954:	40023800 	.word	0x40023800
 8004958:	42470070 	.word	0x42470070
 800495c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004960:	4b38      	ldr	r3, [pc, #224]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0e8      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800496c:	4b36      	ldr	r3, [pc, #216]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800496e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004974:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d02f      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	429a      	cmp	r2, r3
 8004988:	d028      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800498a:	4b2f      	ldr	r3, [pc, #188]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004992:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004994:	4b2d      	ldr	r3, [pc, #180]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004996:	2201      	movs	r2, #1
 8004998:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800499a:	4b2c      	ldr	r3, [pc, #176]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80049a0:	4a29      	ldr	r2, [pc, #164]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049a6:	4b28      	ldr	r3, [pc, #160]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80049a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d114      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80049b2:	f7fd fed5 	bl	8002760 <HAL_GetTick>
 80049b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b8:	e00a      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ba:	f7fd fed1 	bl	8002760 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e035      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d0:	4b1d      	ldr	r3, [pc, #116]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0ee      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049e8:	d10d      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80049ea:	4b17      	ldr	r3, [pc, #92]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80049fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fe:	4912      	ldr	r1, [pc, #72]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	608b      	str	r3, [r1, #8]
 8004a04:	e005      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004a06:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	4a0f      	ldr	r2, [pc, #60]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a0c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a10:	6093      	str	r3, [r2, #8]
 8004a12:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a1e:	490a      	ldr	r1, [pc, #40]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d004      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004a36:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004a38:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40007000 	.word	0x40007000
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	42470e40 	.word	0x42470e40
 8004a50:	424711e0 	.word	0x424711e0

08004a54 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e066      	b.n	8004b38 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	7f5b      	ldrb	r3, [r3, #29]
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d105      	bne.n	8004a80 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fd fa24 	bl	8001ec8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	22ca      	movs	r2, #202	; 0xca
 8004a8c:	625a      	str	r2, [r3, #36]	; 0x24
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2253      	movs	r2, #83	; 0x53
 8004a94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f87a 	bl	8004b90 <RTC_EnterInitMode>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d12c      	bne.n	8004b00 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ab8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6899      	ldr	r1, [r3, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	68d2      	ldr	r2, [r2, #12]
 8004ae0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6919      	ldr	r1, [r3, #16]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	041a      	lsls	r2, r3, #16
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f881 	bl	8004bfe <RTC_ExitInitMode>
 8004afc:	4603      	mov	r3, r0
 8004afe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d113      	bne.n	8004b2e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699a      	ldr	r2, [r3, #24]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	22ff      	movs	r2, #255	; 0xff
 8004b34:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b5a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b5c:	f7fd fe00 	bl	8002760 <HAL_GetTick>
 8004b60:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b62:	e009      	b.n	8004b78 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b64:	f7fd fdfc 	bl	8002760 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b72:	d901      	bls.n	8004b78 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e007      	b.n	8004b88 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f003 0320 	and.w	r3, r3, #32
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0ee      	beq.n	8004b64 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d122      	bne.n	8004bf4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bbc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bbe:	f7fd fdcf 	bl	8002760 <HAL_GetTick>
 8004bc2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004bc4:	e00c      	b.n	8004be0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004bc6:	f7fd fdcb 	bl	8002760 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bd4:	d904      	bls.n	8004be0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2204      	movs	r2, #4
 8004bda:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d102      	bne.n	8004bf4 <RTC_EnterInitMode+0x64>
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d1e8      	bne.n	8004bc6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b084      	sub	sp, #16
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c18:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10a      	bne.n	8004c3e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff ff89 	bl	8004b40 <HAL_RTC_WaitForSynchro>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d004      	beq.n	8004c3e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2204      	movs	r2, #4
 8004c38:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e041      	b.n	8004cde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d106      	bne.n	8004c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fd fba0 	bl	80023b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3304      	adds	r3, #4
 8004c84:	4619      	mov	r1, r3
 8004c86:	4610      	mov	r0, r2
 8004c88:	f000 fc12 	bl	80054b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e041      	b.n	8004d7c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d106      	bne.n	8004d12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f839 	bl	8004d84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2202      	movs	r2, #2
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	3304      	adds	r3, #4
 8004d22:	4619      	mov	r1, r3
 8004d24:	4610      	mov	r0, r2
 8004d26:	f000 fbc3 	bl	80054b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d109      	bne.n	8004dbc <HAL_TIM_PWM_Start+0x24>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	bf14      	ite	ne
 8004db4:	2301      	movne	r3, #1
 8004db6:	2300      	moveq	r3, #0
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	e022      	b.n	8004e02 <HAL_TIM_PWM_Start+0x6a>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d109      	bne.n	8004dd6 <HAL_TIM_PWM_Start+0x3e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	bf14      	ite	ne
 8004dce:	2301      	movne	r3, #1
 8004dd0:	2300      	moveq	r3, #0
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	e015      	b.n	8004e02 <HAL_TIM_PWM_Start+0x6a>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d109      	bne.n	8004df0 <HAL_TIM_PWM_Start+0x58>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	bf14      	ite	ne
 8004de8:	2301      	movne	r3, #1
 8004dea:	2300      	moveq	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	e008      	b.n	8004e02 <HAL_TIM_PWM_Start+0x6a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	bf14      	ite	ne
 8004dfc:	2301      	movne	r3, #1
 8004dfe:	2300      	moveq	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e07c      	b.n	8004f04 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d104      	bne.n	8004e1a <HAL_TIM_PWM_Start+0x82>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e18:	e013      	b.n	8004e42 <HAL_TIM_PWM_Start+0xaa>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d104      	bne.n	8004e2a <HAL_TIM_PWM_Start+0x92>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e28:	e00b      	b.n	8004e42 <HAL_TIM_PWM_Start+0xaa>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d104      	bne.n	8004e3a <HAL_TIM_PWM_Start+0xa2>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e38:	e003      	b.n	8004e42 <HAL_TIM_PWM_Start+0xaa>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2201      	movs	r2, #1
 8004e48:	6839      	ldr	r1, [r7, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fe1a 	bl	8005a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a2d      	ldr	r2, [pc, #180]	; (8004f0c <HAL_TIM_PWM_Start+0x174>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d004      	beq.n	8004e64 <HAL_TIM_PWM_Start+0xcc>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a2c      	ldr	r2, [pc, #176]	; (8004f10 <HAL_TIM_PWM_Start+0x178>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d101      	bne.n	8004e68 <HAL_TIM_PWM_Start+0xd0>
 8004e64:	2301      	movs	r3, #1
 8004e66:	e000      	b.n	8004e6a <HAL_TIM_PWM_Start+0xd2>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d007      	beq.n	8004e7e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a22      	ldr	r2, [pc, #136]	; (8004f0c <HAL_TIM_PWM_Start+0x174>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d022      	beq.n	8004ece <HAL_TIM_PWM_Start+0x136>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e90:	d01d      	beq.n	8004ece <HAL_TIM_PWM_Start+0x136>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a1f      	ldr	r2, [pc, #124]	; (8004f14 <HAL_TIM_PWM_Start+0x17c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d018      	beq.n	8004ece <HAL_TIM_PWM_Start+0x136>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a1d      	ldr	r2, [pc, #116]	; (8004f18 <HAL_TIM_PWM_Start+0x180>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d013      	beq.n	8004ece <HAL_TIM_PWM_Start+0x136>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1c      	ldr	r2, [pc, #112]	; (8004f1c <HAL_TIM_PWM_Start+0x184>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00e      	beq.n	8004ece <HAL_TIM_PWM_Start+0x136>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a16      	ldr	r2, [pc, #88]	; (8004f10 <HAL_TIM_PWM_Start+0x178>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d009      	beq.n	8004ece <HAL_TIM_PWM_Start+0x136>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a18      	ldr	r2, [pc, #96]	; (8004f20 <HAL_TIM_PWM_Start+0x188>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d004      	beq.n	8004ece <HAL_TIM_PWM_Start+0x136>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a16      	ldr	r2, [pc, #88]	; (8004f24 <HAL_TIM_PWM_Start+0x18c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d111      	bne.n	8004ef2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b06      	cmp	r3, #6
 8004ede:	d010      	beq.n	8004f02 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef0:	e007      	b.n	8004f02 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0201 	orr.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40010400 	.word	0x40010400
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40000c00 	.word	0x40000c00
 8004f20:	40014000 	.word	0x40014000
 8004f24:	40001800 	.word	0x40001800

08004f28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d122      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d11b      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0202 	mvn.w	r2, #2
 8004f54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fa81 	bl	8005472 <HAL_TIM_IC_CaptureCallback>
 8004f70:	e005      	b.n	8004f7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fa73 	bl	800545e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fa84 	bl	8005486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0304 	and.w	r3, r3, #4
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d122      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d11b      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0204 	mvn.w	r2, #4
 8004fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2202      	movs	r2, #2
 8004fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fa57 	bl	8005472 <HAL_TIM_IC_CaptureCallback>
 8004fc4:	e005      	b.n	8004fd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fa49 	bl	800545e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 fa5a 	bl	8005486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b08      	cmp	r3, #8
 8004fe4:	d122      	bne.n	800502c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d11b      	bne.n	800502c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0208 	mvn.w	r2, #8
 8004ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2204      	movs	r2, #4
 8005002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fa2d 	bl	8005472 <HAL_TIM_IC_CaptureCallback>
 8005018:	e005      	b.n	8005026 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fa1f 	bl	800545e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fa30 	bl	8005486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f003 0310 	and.w	r3, r3, #16
 8005036:	2b10      	cmp	r3, #16
 8005038:	d122      	bne.n	8005080 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0310 	and.w	r3, r3, #16
 8005044:	2b10      	cmp	r3, #16
 8005046:	d11b      	bne.n	8005080 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0210 	mvn.w	r2, #16
 8005050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2208      	movs	r2, #8
 8005056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fa03 	bl	8005472 <HAL_TIM_IC_CaptureCallback>
 800506c:	e005      	b.n	800507a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f9f5 	bl	800545e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 fa06 	bl	8005486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b01      	cmp	r3, #1
 800508c:	d10e      	bne.n	80050ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b01      	cmp	r3, #1
 800509a:	d107      	bne.n	80050ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f06f 0201 	mvn.w	r2, #1
 80050a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f9cf 	bl	800544a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b6:	2b80      	cmp	r3, #128	; 0x80
 80050b8:	d10e      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c4:	2b80      	cmp	r3, #128	; 0x80
 80050c6:	d107      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fd82 	bl	8005bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e2:	2b40      	cmp	r3, #64	; 0x40
 80050e4:	d10e      	bne.n	8005104 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f0:	2b40      	cmp	r3, #64	; 0x40
 80050f2:	d107      	bne.n	8005104 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f9cb 	bl	800549a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b20      	cmp	r3, #32
 8005110:	d10e      	bne.n	8005130 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0320 	and.w	r3, r3, #32
 800511c:	2b20      	cmp	r3, #32
 800511e:	d107      	bne.n	8005130 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0220 	mvn.w	r2, #32
 8005128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fd4c 	bl	8005bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005130:	bf00      	nop
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005152:	2302      	movs	r3, #2
 8005154:	e0ae      	b.n	80052b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b0c      	cmp	r3, #12
 8005162:	f200 809f 	bhi.w	80052a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005166:	a201      	add	r2, pc, #4	; (adr r2, 800516c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516c:	080051a1 	.word	0x080051a1
 8005170:	080052a5 	.word	0x080052a5
 8005174:	080052a5 	.word	0x080052a5
 8005178:	080052a5 	.word	0x080052a5
 800517c:	080051e1 	.word	0x080051e1
 8005180:	080052a5 	.word	0x080052a5
 8005184:	080052a5 	.word	0x080052a5
 8005188:	080052a5 	.word	0x080052a5
 800518c:	08005223 	.word	0x08005223
 8005190:	080052a5 	.word	0x080052a5
 8005194:	080052a5 	.word	0x080052a5
 8005198:	080052a5 	.word	0x080052a5
 800519c:	08005263 	.word	0x08005263
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fa22 	bl	80055f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699a      	ldr	r2, [r3, #24]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0208 	orr.w	r2, r2, #8
 80051ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0204 	bic.w	r2, r2, #4
 80051ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6999      	ldr	r1, [r3, #24]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	619a      	str	r2, [r3, #24]
      break;
 80051de:	e064      	b.n	80052aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68b9      	ldr	r1, [r7, #8]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fa72 	bl	80056d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699a      	ldr	r2, [r3, #24]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699a      	ldr	r2, [r3, #24]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800520a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6999      	ldr	r1, [r3, #24]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	021a      	lsls	r2, r3, #8
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	619a      	str	r2, [r3, #24]
      break;
 8005220:	e043      	b.n	80052aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68b9      	ldr	r1, [r7, #8]
 8005228:	4618      	mov	r0, r3
 800522a:	f000 fac7 	bl	80057bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0208 	orr.w	r2, r2, #8
 800523c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0204 	bic.w	r2, r2, #4
 800524c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69d9      	ldr	r1, [r3, #28]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	61da      	str	r2, [r3, #28]
      break;
 8005260:	e023      	b.n	80052aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	4618      	mov	r0, r3
 800526a:	f000 fb1b 	bl	80058a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69da      	ldr	r2, [r3, #28]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800527c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69da      	ldr	r2, [r3, #28]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800528c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69d9      	ldr	r1, [r3, #28]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	021a      	lsls	r2, r3, #8
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	61da      	str	r2, [r3, #28]
      break;
 80052a2:	e002      	b.n	80052aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	75fb      	strb	r3, [r7, #23]
      break;
 80052a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_TIM_ConfigClockSource+0x1c>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e0b4      	b.n	8005442 <HAL_TIM_ConfigClockSource+0x186>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005310:	d03e      	beq.n	8005390 <HAL_TIM_ConfigClockSource+0xd4>
 8005312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005316:	f200 8087 	bhi.w	8005428 <HAL_TIM_ConfigClockSource+0x16c>
 800531a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531e:	f000 8086 	beq.w	800542e <HAL_TIM_ConfigClockSource+0x172>
 8005322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005326:	d87f      	bhi.n	8005428 <HAL_TIM_ConfigClockSource+0x16c>
 8005328:	2b70      	cmp	r3, #112	; 0x70
 800532a:	d01a      	beq.n	8005362 <HAL_TIM_ConfigClockSource+0xa6>
 800532c:	2b70      	cmp	r3, #112	; 0x70
 800532e:	d87b      	bhi.n	8005428 <HAL_TIM_ConfigClockSource+0x16c>
 8005330:	2b60      	cmp	r3, #96	; 0x60
 8005332:	d050      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0x11a>
 8005334:	2b60      	cmp	r3, #96	; 0x60
 8005336:	d877      	bhi.n	8005428 <HAL_TIM_ConfigClockSource+0x16c>
 8005338:	2b50      	cmp	r3, #80	; 0x50
 800533a:	d03c      	beq.n	80053b6 <HAL_TIM_ConfigClockSource+0xfa>
 800533c:	2b50      	cmp	r3, #80	; 0x50
 800533e:	d873      	bhi.n	8005428 <HAL_TIM_ConfigClockSource+0x16c>
 8005340:	2b40      	cmp	r3, #64	; 0x40
 8005342:	d058      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0x13a>
 8005344:	2b40      	cmp	r3, #64	; 0x40
 8005346:	d86f      	bhi.n	8005428 <HAL_TIM_ConfigClockSource+0x16c>
 8005348:	2b30      	cmp	r3, #48	; 0x30
 800534a:	d064      	beq.n	8005416 <HAL_TIM_ConfigClockSource+0x15a>
 800534c:	2b30      	cmp	r3, #48	; 0x30
 800534e:	d86b      	bhi.n	8005428 <HAL_TIM_ConfigClockSource+0x16c>
 8005350:	2b20      	cmp	r3, #32
 8005352:	d060      	beq.n	8005416 <HAL_TIM_ConfigClockSource+0x15a>
 8005354:	2b20      	cmp	r3, #32
 8005356:	d867      	bhi.n	8005428 <HAL_TIM_ConfigClockSource+0x16c>
 8005358:	2b00      	cmp	r3, #0
 800535a:	d05c      	beq.n	8005416 <HAL_TIM_ConfigClockSource+0x15a>
 800535c:	2b10      	cmp	r3, #16
 800535e:	d05a      	beq.n	8005416 <HAL_TIM_ConfigClockSource+0x15a>
 8005360:	e062      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6818      	ldr	r0, [r3, #0]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	6899      	ldr	r1, [r3, #8]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f000 fb67 	bl	8005a44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005384:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	609a      	str	r2, [r3, #8]
      break;
 800538e:	e04f      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	6899      	ldr	r1, [r3, #8]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f000 fb50 	bl	8005a44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053b2:	609a      	str	r2, [r3, #8]
      break;
 80053b4:	e03c      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6859      	ldr	r1, [r3, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	461a      	mov	r2, r3
 80053c4:	f000 fac4 	bl	8005950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2150      	movs	r1, #80	; 0x50
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fb1d 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 80053d4:	e02c      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6818      	ldr	r0, [r3, #0]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	6859      	ldr	r1, [r3, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	461a      	mov	r2, r3
 80053e4:	f000 fae3 	bl	80059ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2160      	movs	r1, #96	; 0x60
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fb0d 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 80053f4:	e01c      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6859      	ldr	r1, [r3, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	461a      	mov	r2, r3
 8005404:	f000 faa4 	bl	8005950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2140      	movs	r1, #64	; 0x40
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fafd 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 8005414:	e00c      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4619      	mov	r1, r3
 8005420:	4610      	mov	r0, r2
 8005422:	f000 faf4 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 8005426:	e003      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	73fb      	strb	r3, [r7, #15]
      break;
 800542c:	e000      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800542e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005440:	7bfb      	ldrb	r3, [r7, #15]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
	...

080054b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a40      	ldr	r2, [pc, #256]	; (80055c4 <TIM_Base_SetConfig+0x114>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d013      	beq.n	80054f0 <TIM_Base_SetConfig+0x40>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ce:	d00f      	beq.n	80054f0 <TIM_Base_SetConfig+0x40>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a3d      	ldr	r2, [pc, #244]	; (80055c8 <TIM_Base_SetConfig+0x118>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00b      	beq.n	80054f0 <TIM_Base_SetConfig+0x40>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a3c      	ldr	r2, [pc, #240]	; (80055cc <TIM_Base_SetConfig+0x11c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d007      	beq.n	80054f0 <TIM_Base_SetConfig+0x40>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a3b      	ldr	r2, [pc, #236]	; (80055d0 <TIM_Base_SetConfig+0x120>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d003      	beq.n	80054f0 <TIM_Base_SetConfig+0x40>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a3a      	ldr	r2, [pc, #232]	; (80055d4 <TIM_Base_SetConfig+0x124>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d108      	bne.n	8005502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a2f      	ldr	r2, [pc, #188]	; (80055c4 <TIM_Base_SetConfig+0x114>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d02b      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005510:	d027      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a2c      	ldr	r2, [pc, #176]	; (80055c8 <TIM_Base_SetConfig+0x118>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d023      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a2b      	ldr	r2, [pc, #172]	; (80055cc <TIM_Base_SetConfig+0x11c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d01f      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a2a      	ldr	r2, [pc, #168]	; (80055d0 <TIM_Base_SetConfig+0x120>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d01b      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a29      	ldr	r2, [pc, #164]	; (80055d4 <TIM_Base_SetConfig+0x124>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d017      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a28      	ldr	r2, [pc, #160]	; (80055d8 <TIM_Base_SetConfig+0x128>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d013      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a27      	ldr	r2, [pc, #156]	; (80055dc <TIM_Base_SetConfig+0x12c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00f      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a26      	ldr	r2, [pc, #152]	; (80055e0 <TIM_Base_SetConfig+0x130>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00b      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a25      	ldr	r2, [pc, #148]	; (80055e4 <TIM_Base_SetConfig+0x134>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d007      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a24      	ldr	r2, [pc, #144]	; (80055e8 <TIM_Base_SetConfig+0x138>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d003      	beq.n	8005562 <TIM_Base_SetConfig+0xb2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a23      	ldr	r2, [pc, #140]	; (80055ec <TIM_Base_SetConfig+0x13c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d108      	bne.n	8005574 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a0a      	ldr	r2, [pc, #40]	; (80055c4 <TIM_Base_SetConfig+0x114>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d003      	beq.n	80055a8 <TIM_Base_SetConfig+0xf8>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a0c      	ldr	r2, [pc, #48]	; (80055d4 <TIM_Base_SetConfig+0x124>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d103      	bne.n	80055b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	691a      	ldr	r2, [r3, #16]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	615a      	str	r2, [r3, #20]
}
 80055b6:	bf00      	nop
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	40010000 	.word	0x40010000
 80055c8:	40000400 	.word	0x40000400
 80055cc:	40000800 	.word	0x40000800
 80055d0:	40000c00 	.word	0x40000c00
 80055d4:	40010400 	.word	0x40010400
 80055d8:	40014000 	.word	0x40014000
 80055dc:	40014400 	.word	0x40014400
 80055e0:	40014800 	.word	0x40014800
 80055e4:	40001800 	.word	0x40001800
 80055e8:	40001c00 	.word	0x40001c00
 80055ec:	40002000 	.word	0x40002000

080055f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	f023 0201 	bic.w	r2, r3, #1
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0303 	bic.w	r3, r3, #3
 8005626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f023 0302 	bic.w	r3, r3, #2
 8005638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a20      	ldr	r2, [pc, #128]	; (80056c8 <TIM_OC1_SetConfig+0xd8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d003      	beq.n	8005654 <TIM_OC1_SetConfig+0x64>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a1f      	ldr	r2, [pc, #124]	; (80056cc <TIM_OC1_SetConfig+0xdc>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d10c      	bne.n	800566e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f023 0308 	bic.w	r3, r3, #8
 800565a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f023 0304 	bic.w	r3, r3, #4
 800566c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a15      	ldr	r2, [pc, #84]	; (80056c8 <TIM_OC1_SetConfig+0xd8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d003      	beq.n	800567e <TIM_OC1_SetConfig+0x8e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a14      	ldr	r2, [pc, #80]	; (80056cc <TIM_OC1_SetConfig+0xdc>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d111      	bne.n	80056a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800568c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	4313      	orrs	r3, r2
 80056a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	621a      	str	r2, [r3, #32]
}
 80056bc:	bf00      	nop
 80056be:	371c      	adds	r7, #28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	40010000 	.word	0x40010000
 80056cc:	40010400 	.word	0x40010400

080056d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	f023 0210 	bic.w	r2, r3, #16
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	021b      	lsls	r3, r3, #8
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	4313      	orrs	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f023 0320 	bic.w	r3, r3, #32
 800571a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a22      	ldr	r2, [pc, #136]	; (80057b4 <TIM_OC2_SetConfig+0xe4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d003      	beq.n	8005738 <TIM_OC2_SetConfig+0x68>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a21      	ldr	r2, [pc, #132]	; (80057b8 <TIM_OC2_SetConfig+0xe8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d10d      	bne.n	8005754 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800573e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4313      	orrs	r3, r2
 800574a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005752:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a17      	ldr	r2, [pc, #92]	; (80057b4 <TIM_OC2_SetConfig+0xe4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d003      	beq.n	8005764 <TIM_OC2_SetConfig+0x94>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a16      	ldr	r2, [pc, #88]	; (80057b8 <TIM_OC2_SetConfig+0xe8>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d113      	bne.n	800578c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800576a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	4313      	orrs	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	621a      	str	r2, [r3, #32]
}
 80057a6:	bf00      	nop
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	40010000 	.word	0x40010000
 80057b8:	40010400 	.word	0x40010400

080057bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0303 	bic.w	r3, r3, #3
 80057f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	021b      	lsls	r3, r3, #8
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a21      	ldr	r2, [pc, #132]	; (800589c <TIM_OC3_SetConfig+0xe0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d003      	beq.n	8005822 <TIM_OC3_SetConfig+0x66>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a20      	ldr	r2, [pc, #128]	; (80058a0 <TIM_OC3_SetConfig+0xe4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d10d      	bne.n	800583e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005828:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	021b      	lsls	r3, r3, #8
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4313      	orrs	r3, r2
 8005834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800583c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a16      	ldr	r2, [pc, #88]	; (800589c <TIM_OC3_SetConfig+0xe0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d003      	beq.n	800584e <TIM_OC3_SetConfig+0x92>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a15      	ldr	r2, [pc, #84]	; (80058a0 <TIM_OC3_SetConfig+0xe4>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d113      	bne.n	8005876 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800585c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	4313      	orrs	r3, r2
 8005868:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4313      	orrs	r3, r2
 8005874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	621a      	str	r2, [r3, #32]
}
 8005890:	bf00      	nop
 8005892:	371c      	adds	r7, #28
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	40010000 	.word	0x40010000
 80058a0:	40010400 	.word	0x40010400

080058a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	021b      	lsls	r3, r3, #8
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	031b      	lsls	r3, r3, #12
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a12      	ldr	r2, [pc, #72]	; (8005948 <TIM_OC4_SetConfig+0xa4>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d003      	beq.n	800590c <TIM_OC4_SetConfig+0x68>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a11      	ldr	r2, [pc, #68]	; (800594c <TIM_OC4_SetConfig+0xa8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d109      	bne.n	8005920 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005912:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	019b      	lsls	r3, r3, #6
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	4313      	orrs	r3, r2
 800591e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	621a      	str	r2, [r3, #32]
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40010000 	.word	0x40010000
 800594c:	40010400 	.word	0x40010400

08005950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005950:	b480      	push	{r7}
 8005952:	b087      	sub	sp, #28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	f023 0201 	bic.w	r2, r3, #1
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800597a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	4313      	orrs	r3, r2
 8005984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f023 030a 	bic.w	r3, r3, #10
 800598c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4313      	orrs	r3, r2
 8005994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	621a      	str	r2, [r3, #32]
}
 80059a2:	bf00      	nop
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b087      	sub	sp, #28
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	f023 0210 	bic.w	r2, r3, #16
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	031b      	lsls	r3, r3, #12
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	621a      	str	r2, [r3, #32]
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b085      	sub	sp, #20
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f043 0307 	orr.w	r3, r3, #7
 8005a30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	609a      	str	r2, [r3, #8]
}
 8005a38:	bf00      	nop
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	021a      	lsls	r2, r3, #8
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	609a      	str	r2, [r3, #8]
}
 8005a78:	bf00      	nop
 8005a7a:	371c      	adds	r7, #28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f003 031f 	and.w	r3, r3, #31
 8005a96:	2201      	movs	r2, #1
 8005a98:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6a1a      	ldr	r2, [r3, #32]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	43db      	mvns	r3, r3
 8005aa6:	401a      	ands	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6a1a      	ldr	r2, [r3, #32]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8005abc:	431a      	orrs	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	621a      	str	r2, [r3, #32]
}
 8005ac2:	bf00      	nop
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
	...

08005ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e05a      	b.n	8005b9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a21      	ldr	r2, [pc, #132]	; (8005bac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d022      	beq.n	8005b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b34:	d01d      	beq.n	8005b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a1d      	ldr	r2, [pc, #116]	; (8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d018      	beq.n	8005b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a1b      	ldr	r2, [pc, #108]	; (8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d013      	beq.n	8005b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a1a      	ldr	r2, [pc, #104]	; (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00e      	beq.n	8005b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a18      	ldr	r2, [pc, #96]	; (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d009      	beq.n	8005b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a17      	ldr	r2, [pc, #92]	; (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d004      	beq.n	8005b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a15      	ldr	r2, [pc, #84]	; (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d10c      	bne.n	8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40010000 	.word	0x40010000
 8005bb0:	40000400 	.word	0x40000400
 8005bb4:	40000800 	.word	0x40000800
 8005bb8:	40000c00 	.word	0x40000c00
 8005bbc:	40010400 	.word	0x40010400
 8005bc0:	40014000 	.word	0x40014000
 8005bc4:	40001800 	.word	0x40001800

08005bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e03f      	b.n	8005c82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d106      	bne.n	8005c1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7fc fcca 	bl	80025b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2224      	movs	r2, #36	; 0x24
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fddf 	bl	80067f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695a      	ldr	r2, [r3, #20]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b08a      	sub	sp, #40	; 0x28
 8005c8e:	af02      	add	r7, sp, #8
 8005c90:	60f8      	str	r0, [r7, #12]
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	603b      	str	r3, [r7, #0]
 8005c96:	4613      	mov	r3, r2
 8005c98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	d17c      	bne.n	8005da4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <HAL_UART_Transmit+0x2c>
 8005cb0:	88fb      	ldrh	r3, [r7, #6]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e075      	b.n	8005da6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_UART_Transmit+0x3e>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e06e      	b.n	8005da6 <HAL_UART_Transmit+0x11c>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2221      	movs	r2, #33	; 0x21
 8005cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cde:	f7fc fd3f 	bl	8002760 <HAL_GetTick>
 8005ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	88fa      	ldrh	r2, [r7, #6]
 8005ce8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	88fa      	ldrh	r2, [r7, #6]
 8005cee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf8:	d108      	bne.n	8005d0c <HAL_UART_Transmit+0x82>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d104      	bne.n	8005d0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d02:	2300      	movs	r3, #0
 8005d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	61bb      	str	r3, [r7, #24]
 8005d0a:	e003      	b.n	8005d14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d10:	2300      	movs	r3, #0
 8005d12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d1c:	e02a      	b.n	8005d74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2200      	movs	r2, #0
 8005d26:	2180      	movs	r1, #128	; 0x80
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 fb1f 	bl	800636c <UART_WaitOnFlagUntilTimeout>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e036      	b.n	8005da6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10b      	bne.n	8005d56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	461a      	mov	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	3302      	adds	r3, #2
 8005d52:	61bb      	str	r3, [r7, #24]
 8005d54:	e007      	b.n	8005d66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	781a      	ldrb	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	3301      	adds	r3, #1
 8005d64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1cf      	bne.n	8005d1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2200      	movs	r2, #0
 8005d86:	2140      	movs	r1, #64	; 0x40
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 faef 	bl	800636c <UART_WaitOnFlagUntilTimeout>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e006      	b.n	8005da6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	e000      	b.n	8005da6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005da4:	2302      	movs	r3, #2
  }
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3720      	adds	r7, #32
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b084      	sub	sp, #16
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	4613      	mov	r3, r2
 8005dba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	d11d      	bne.n	8005e04 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <HAL_UART_Receive_IT+0x26>
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e016      	b.n	8005e06 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d101      	bne.n	8005de6 <HAL_UART_Receive_IT+0x38>
 8005de2:	2302      	movs	r3, #2
 8005de4:	e00f      	b.n	8005e06 <HAL_UART_Receive_IT+0x58>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005df4:	88fb      	ldrh	r3, [r7, #6]
 8005df6:	461a      	mov	r2, r3
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 fb24 	bl	8006448 <UART_Start_Receive_IT>
 8005e00:	4603      	mov	r3, r0
 8005e02:	e000      	b.n	8005e06 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005e04:	2302      	movs	r3, #2
  }
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
	...

08005e10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b0ba      	sub	sp, #232	; 0xe8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e46:	f003 030f 	and.w	r3, r3, #15
 8005e4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10f      	bne.n	8005e76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d009      	beq.n	8005e76 <HAL_UART_IRQHandler+0x66>
 8005e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fc07 	bl	8006682 <UART_Receive_IT>
      return;
 8005e74:	e256      	b.n	8006324 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 80de 	beq.w	800603c <HAL_UART_IRQHandler+0x22c>
 8005e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d106      	bne.n	8005e9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 80d1 	beq.w	800603c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00b      	beq.n	8005ebe <HAL_UART_IRQHandler+0xae>
 8005ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d005      	beq.n	8005ebe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	f043 0201 	orr.w	r2, r3, #1
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00b      	beq.n	8005ee2 <HAL_UART_IRQHandler+0xd2>
 8005eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	f043 0202 	orr.w	r2, r3, #2
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00b      	beq.n	8005f06 <HAL_UART_IRQHandler+0xf6>
 8005eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	f043 0204 	orr.w	r2, r3, #4
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d011      	beq.n	8005f36 <HAL_UART_IRQHandler+0x126>
 8005f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d105      	bne.n	8005f2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d005      	beq.n	8005f36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	f043 0208 	orr.w	r2, r3, #8
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 81ed 	beq.w	800631a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f44:	f003 0320 	and.w	r3, r3, #32
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d008      	beq.n	8005f5e <HAL_UART_IRQHandler+0x14e>
 8005f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f50:	f003 0320 	and.w	r3, r3, #32
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fb92 	bl	8006682 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f68:	2b40      	cmp	r3, #64	; 0x40
 8005f6a:	bf0c      	ite	eq
 8005f6c:	2301      	moveq	r3, #1
 8005f6e:	2300      	movne	r3, #0
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d103      	bne.n	8005f8a <HAL_UART_IRQHandler+0x17a>
 8005f82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d04f      	beq.n	800602a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fa9a 	bl	80064c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9a:	2b40      	cmp	r3, #64	; 0x40
 8005f9c:	d141      	bne.n	8006022 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3314      	adds	r3, #20
 8005fa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fac:	e853 3f00 	ldrex	r3, [r3]
 8005fb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3314      	adds	r3, #20
 8005fc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005fca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005fce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005fd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005fe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1d9      	bne.n	8005f9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d013      	beq.n	800601a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	4a7d      	ldr	r2, [pc, #500]	; (80061ec <HAL_UART_IRQHandler+0x3dc>)
 8005ff8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fd fa88 	bl	8003514 <HAL_DMA_Abort_IT>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d016      	beq.n	8006038 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006014:	4610      	mov	r0, r2
 8006016:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006018:	e00e      	b.n	8006038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f990 	bl	8006340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006020:	e00a      	b.n	8006038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f98c 	bl	8006340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006028:	e006      	b.n	8006038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f988 	bl	8006340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006036:	e170      	b.n	800631a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006038:	bf00      	nop
    return;
 800603a:	e16e      	b.n	800631a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006040:	2b01      	cmp	r3, #1
 8006042:	f040 814a 	bne.w	80062da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800604a:	f003 0310 	and.w	r3, r3, #16
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 8143 	beq.w	80062da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 813c 	beq.w	80062da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006062:	2300      	movs	r3, #0
 8006064:	60bb      	str	r3, [r7, #8]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	60bb      	str	r3, [r7, #8]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	60bb      	str	r3, [r7, #8]
 8006076:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006082:	2b40      	cmp	r3, #64	; 0x40
 8006084:	f040 80b4 	bne.w	80061f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006094:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 8140 	beq.w	800631e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060a6:	429a      	cmp	r2, r3
 80060a8:	f080 8139 	bcs.w	800631e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060be:	f000 8088 	beq.w	80061d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	330c      	adds	r3, #12
 80060c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	330c      	adds	r3, #12
 80060ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80060ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060fe:	e841 2300 	strex	r3, r2, [r1]
 8006102:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006106:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1d9      	bne.n	80060c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3314      	adds	r3, #20
 8006114:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006116:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800611e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006120:	f023 0301 	bic.w	r3, r3, #1
 8006124:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3314      	adds	r3, #20
 800612e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006132:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006136:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006138:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800613a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e1      	bne.n	800610e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3314      	adds	r3, #20
 8006150:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800615a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800615c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006160:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3314      	adds	r3, #20
 800616a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800616e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006170:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006174:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800617c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e3      	bne.n	800614a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2220      	movs	r2, #32
 8006186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	330c      	adds	r3, #12
 8006196:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800619a:	e853 3f00 	ldrex	r3, [r3]
 800619e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061a2:	f023 0310 	bic.w	r3, r3, #16
 80061a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	330c      	adds	r3, #12
 80061b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80061b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80061b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e3      	bne.n	8006190 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fd f931 	bl	8003434 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061da:	b29b      	uxth	r3, r3
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	b29b      	uxth	r3, r3
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f8b6 	bl	8006354 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061e8:	e099      	b.n	800631e <HAL_UART_IRQHandler+0x50e>
 80061ea:	bf00      	nop
 80061ec:	0800658b 	.word	0x0800658b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 808b 	beq.w	8006322 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800620c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8086 	beq.w	8006322 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	330c      	adds	r3, #12
 800621c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006228:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800622c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	330c      	adds	r3, #12
 8006236:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800623a:	647a      	str	r2, [r7, #68]	; 0x44
 800623c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006240:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1e3      	bne.n	8006216 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3314      	adds	r3, #20
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	e853 3f00 	ldrex	r3, [r3]
 800625c:	623b      	str	r3, [r7, #32]
   return(result);
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	f023 0301 	bic.w	r3, r3, #1
 8006264:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3314      	adds	r3, #20
 800626e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006272:	633a      	str	r2, [r7, #48]	; 0x30
 8006274:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1e3      	bne.n	800624e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2220      	movs	r2, #32
 800628a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	330c      	adds	r3, #12
 800629a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	e853 3f00 	ldrex	r3, [r3]
 80062a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0310 	bic.w	r3, r3, #16
 80062aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	330c      	adds	r3, #12
 80062b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80062b8:	61fa      	str	r2, [r7, #28]
 80062ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062bc:	69b9      	ldr	r1, [r7, #24]
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	e841 2300 	strex	r3, r2, [r1]
 80062c4:	617b      	str	r3, [r7, #20]
   return(result);
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1e3      	bne.n	8006294 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062d0:	4619      	mov	r1, r3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f83e 	bl	8006354 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062d8:	e023      	b.n	8006322 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d009      	beq.n	80062fa <HAL_UART_IRQHandler+0x4ea>
 80062e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f95d 	bl	80065b2 <UART_Transmit_IT>
    return;
 80062f8:	e014      	b.n	8006324 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00e      	beq.n	8006324 <HAL_UART_IRQHandler+0x514>
 8006306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800630a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630e:	2b00      	cmp	r3, #0
 8006310:	d008      	beq.n	8006324 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f99d 	bl	8006652 <UART_EndTransmit_IT>
    return;
 8006318:	e004      	b.n	8006324 <HAL_UART_IRQHandler+0x514>
    return;
 800631a:	bf00      	nop
 800631c:	e002      	b.n	8006324 <HAL_UART_IRQHandler+0x514>
      return;
 800631e:	bf00      	nop
 8006320:	e000      	b.n	8006324 <HAL_UART_IRQHandler+0x514>
      return;
 8006322:	bf00      	nop
  }
}
 8006324:	37e8      	adds	r7, #232	; 0xe8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop

0800632c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b090      	sub	sp, #64	; 0x40
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	603b      	str	r3, [r7, #0]
 8006378:	4613      	mov	r3, r2
 800637a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800637c:	e050      	b.n	8006420 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800637e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006384:	d04c      	beq.n	8006420 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006388:	2b00      	cmp	r3, #0
 800638a:	d007      	beq.n	800639c <UART_WaitOnFlagUntilTimeout+0x30>
 800638c:	f7fc f9e8 	bl	8002760 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006398:	429a      	cmp	r2, r3
 800639a:	d241      	bcs.n	8006420 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	330c      	adds	r3, #12
 80063a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	e853 3f00 	ldrex	r3, [r3]
 80063aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	330c      	adds	r3, #12
 80063ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063bc:	637a      	str	r2, [r7, #52]	; 0x34
 80063be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063c4:	e841 2300 	strex	r3, r2, [r1]
 80063c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1e5      	bne.n	800639c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3314      	adds	r3, #20
 80063d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	e853 3f00 	ldrex	r3, [r3]
 80063de:	613b      	str	r3, [r7, #16]
   return(result);
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f023 0301 	bic.w	r3, r3, #1
 80063e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3314      	adds	r3, #20
 80063ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063f0:	623a      	str	r2, [r7, #32]
 80063f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f4:	69f9      	ldr	r1, [r7, #28]
 80063f6:	6a3a      	ldr	r2, [r7, #32]
 80063f8:	e841 2300 	strex	r3, r2, [r1]
 80063fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1e5      	bne.n	80063d0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2220      	movs	r2, #32
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2220      	movs	r2, #32
 8006410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e00f      	b.n	8006440 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	4013      	ands	r3, r2
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	429a      	cmp	r2, r3
 800642e:	bf0c      	ite	eq
 8006430:	2301      	moveq	r3, #1
 8006432:	2300      	movne	r3, #0
 8006434:	b2db      	uxtb	r3, r3
 8006436:	461a      	mov	r2, r3
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	429a      	cmp	r2, r3
 800643c:	d09f      	beq.n	800637e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3740      	adds	r7, #64	; 0x40
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	4613      	mov	r3, r2
 8006454:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	88fa      	ldrh	r2, [r7, #6]
 8006460:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	88fa      	ldrh	r2, [r7, #6]
 8006466:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2222      	movs	r2, #34	; 0x22
 8006472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d007      	beq.n	8006496 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006494:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	695a      	ldr	r2, [r3, #20]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f042 0201 	orr.w	r2, r2, #1
 80064a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f042 0220 	orr.w	r2, r2, #32
 80064b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b095      	sub	sp, #84	; 0x54
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	330c      	adds	r3, #12
 80064d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d6:	e853 3f00 	ldrex	r3, [r3]
 80064da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	330c      	adds	r3, #12
 80064ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064ec:	643a      	str	r2, [r7, #64]	; 0x40
 80064ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064f4:	e841 2300 	strex	r3, r2, [r1]
 80064f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e5      	bne.n	80064cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3314      	adds	r3, #20
 8006506:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	e853 3f00 	ldrex	r3, [r3]
 800650e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	f023 0301 	bic.w	r3, r3, #1
 8006516:	64bb      	str	r3, [r7, #72]	; 0x48
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3314      	adds	r3, #20
 800651e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006520:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006522:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006528:	e841 2300 	strex	r3, r2, [r1]
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e5      	bne.n	8006500 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006538:	2b01      	cmp	r3, #1
 800653a:	d119      	bne.n	8006570 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	330c      	adds	r3, #12
 8006542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	e853 3f00 	ldrex	r3, [r3]
 800654a:	60bb      	str	r3, [r7, #8]
   return(result);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f023 0310 	bic.w	r3, r3, #16
 8006552:	647b      	str	r3, [r7, #68]	; 0x44
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	330c      	adds	r3, #12
 800655a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800655c:	61ba      	str	r2, [r7, #24]
 800655e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006560:	6979      	ldr	r1, [r7, #20]
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	e841 2300 	strex	r3, r2, [r1]
 8006568:	613b      	str	r3, [r7, #16]
   return(result);
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1e5      	bne.n	800653c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2220      	movs	r2, #32
 8006574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800657e:	bf00      	nop
 8006580:	3754      	adds	r7, #84	; 0x54
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006596:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f7ff fecb 	bl	8006340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065aa:	bf00      	nop
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b085      	sub	sp, #20
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b21      	cmp	r3, #33	; 0x21
 80065c4:	d13e      	bne.n	8006644 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ce:	d114      	bne.n	80065fa <UART_Transmit_IT+0x48>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d110      	bne.n	80065fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	1c9a      	adds	r2, r3, #2
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	621a      	str	r2, [r3, #32]
 80065f8:	e008      	b.n	800660c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	1c59      	adds	r1, r3, #1
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6211      	str	r1, [r2, #32]
 8006604:	781a      	ldrb	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006610:	b29b      	uxth	r3, r3
 8006612:	3b01      	subs	r3, #1
 8006614:	b29b      	uxth	r3, r3
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	4619      	mov	r1, r3
 800661a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10f      	bne.n	8006640 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800662e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800663e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	e000      	b.n	8006646 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006644:	2302      	movs	r3, #2
  }
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b082      	sub	sp, #8
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68da      	ldr	r2, [r3, #12]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006668:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2220      	movs	r2, #32
 800666e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7ff fe5a 	bl	800632c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b08c      	sub	sp, #48	; 0x30
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b22      	cmp	r3, #34	; 0x22
 8006694:	f040 80ab 	bne.w	80067ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066a0:	d117      	bne.n	80066d2 <UART_Receive_IT+0x50>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d113      	bne.n	80066d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80066aa:	2300      	movs	r3, #0
 80066ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ca:	1c9a      	adds	r2, r3, #2
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	629a      	str	r2, [r3, #40]	; 0x28
 80066d0:	e026      	b.n	8006720 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80066d8:	2300      	movs	r3, #0
 80066da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e4:	d007      	beq.n	80066f6 <UART_Receive_IT+0x74>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10a      	bne.n	8006704 <UART_Receive_IT+0x82>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d106      	bne.n	8006704 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006700:	701a      	strb	r2, [r3, #0]
 8006702:	e008      	b.n	8006716 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	b2db      	uxtb	r3, r3
 800670c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006710:	b2da      	uxtb	r2, r3
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006724:	b29b      	uxth	r3, r3
 8006726:	3b01      	subs	r3, #1
 8006728:	b29b      	uxth	r3, r3
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	4619      	mov	r1, r3
 800672e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006730:	2b00      	cmp	r3, #0
 8006732:	d15a      	bne.n	80067ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0220 	bic.w	r2, r2, #32
 8006742:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006752:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0201 	bic.w	r2, r2, #1
 8006762:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2220      	movs	r2, #32
 8006768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	2b01      	cmp	r3, #1
 8006772:	d135      	bne.n	80067e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	330c      	adds	r3, #12
 8006780:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	e853 3f00 	ldrex	r3, [r3]
 8006788:	613b      	str	r3, [r7, #16]
   return(result);
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f023 0310 	bic.w	r3, r3, #16
 8006790:	627b      	str	r3, [r7, #36]	; 0x24
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	330c      	adds	r3, #12
 8006798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800679a:	623a      	str	r2, [r7, #32]
 800679c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679e:	69f9      	ldr	r1, [r7, #28]
 80067a0:	6a3a      	ldr	r2, [r7, #32]
 80067a2:	e841 2300 	strex	r3, r2, [r1]
 80067a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1e5      	bne.n	800677a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0310 	and.w	r3, r3, #16
 80067b8:	2b10      	cmp	r3, #16
 80067ba:	d10a      	bne.n	80067d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067bc:	2300      	movs	r3, #0
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	60fb      	str	r3, [r7, #12]
 80067d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff fdbb 	bl	8006354 <HAL_UARTEx_RxEventCallback>
 80067de:	e002      	b.n	80067e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7fb f9c7 	bl	8001b74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	e002      	b.n	80067f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	e000      	b.n	80067f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80067ee:	2302      	movs	r3, #2
  }
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3730      	adds	r7, #48	; 0x30
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067fc:	b0c0      	sub	sp, #256	; 0x100
 80067fe:	af00      	add	r7, sp, #0
 8006800:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006814:	68d9      	ldr	r1, [r3, #12]
 8006816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	ea40 0301 	orr.w	r3, r0, r1
 8006820:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	431a      	orrs	r2, r3
 8006830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	431a      	orrs	r2, r3
 8006838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	4313      	orrs	r3, r2
 8006840:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006850:	f021 010c 	bic.w	r1, r1, #12
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800685e:	430b      	orrs	r3, r1
 8006860:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800686e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006872:	6999      	ldr	r1, [r3, #24]
 8006874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	ea40 0301 	orr.w	r3, r0, r1
 800687e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	4b8f      	ldr	r3, [pc, #572]	; (8006ac4 <UART_SetConfig+0x2cc>)
 8006888:	429a      	cmp	r2, r3
 800688a:	d005      	beq.n	8006898 <UART_SetConfig+0xa0>
 800688c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	4b8d      	ldr	r3, [pc, #564]	; (8006ac8 <UART_SetConfig+0x2d0>)
 8006894:	429a      	cmp	r2, r3
 8006896:	d104      	bne.n	80068a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006898:	f7fd ff08 	bl	80046ac <HAL_RCC_GetPCLK2Freq>
 800689c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80068a0:	e003      	b.n	80068aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068a2:	f7fd feef 	bl	8004684 <HAL_RCC_GetPCLK1Freq>
 80068a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068b4:	f040 810c 	bne.w	8006ad0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068bc:	2200      	movs	r2, #0
 80068be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80068c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80068ca:	4622      	mov	r2, r4
 80068cc:	462b      	mov	r3, r5
 80068ce:	1891      	adds	r1, r2, r2
 80068d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80068d2:	415b      	adcs	r3, r3
 80068d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068da:	4621      	mov	r1, r4
 80068dc:	eb12 0801 	adds.w	r8, r2, r1
 80068e0:	4629      	mov	r1, r5
 80068e2:	eb43 0901 	adc.w	r9, r3, r1
 80068e6:	f04f 0200 	mov.w	r2, #0
 80068ea:	f04f 0300 	mov.w	r3, #0
 80068ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068fa:	4690      	mov	r8, r2
 80068fc:	4699      	mov	r9, r3
 80068fe:	4623      	mov	r3, r4
 8006900:	eb18 0303 	adds.w	r3, r8, r3
 8006904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006908:	462b      	mov	r3, r5
 800690a:	eb49 0303 	adc.w	r3, r9, r3
 800690e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800691e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006922:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006926:	460b      	mov	r3, r1
 8006928:	18db      	adds	r3, r3, r3
 800692a:	653b      	str	r3, [r7, #80]	; 0x50
 800692c:	4613      	mov	r3, r2
 800692e:	eb42 0303 	adc.w	r3, r2, r3
 8006932:	657b      	str	r3, [r7, #84]	; 0x54
 8006934:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006938:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800693c:	f7fa f896 	bl	8000a6c <__aeabi_uldivmod>
 8006940:	4602      	mov	r2, r0
 8006942:	460b      	mov	r3, r1
 8006944:	4b61      	ldr	r3, [pc, #388]	; (8006acc <UART_SetConfig+0x2d4>)
 8006946:	fba3 2302 	umull	r2, r3, r3, r2
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	011c      	lsls	r4, r3, #4
 800694e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006952:	2200      	movs	r2, #0
 8006954:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006958:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800695c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006960:	4642      	mov	r2, r8
 8006962:	464b      	mov	r3, r9
 8006964:	1891      	adds	r1, r2, r2
 8006966:	64b9      	str	r1, [r7, #72]	; 0x48
 8006968:	415b      	adcs	r3, r3
 800696a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800696c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006970:	4641      	mov	r1, r8
 8006972:	eb12 0a01 	adds.w	sl, r2, r1
 8006976:	4649      	mov	r1, r9
 8006978:	eb43 0b01 	adc.w	fp, r3, r1
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	f04f 0300 	mov.w	r3, #0
 8006984:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006988:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800698c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006990:	4692      	mov	sl, r2
 8006992:	469b      	mov	fp, r3
 8006994:	4643      	mov	r3, r8
 8006996:	eb1a 0303 	adds.w	r3, sl, r3
 800699a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800699e:	464b      	mov	r3, r9
 80069a0:	eb4b 0303 	adc.w	r3, fp, r3
 80069a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80069b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80069bc:	460b      	mov	r3, r1
 80069be:	18db      	adds	r3, r3, r3
 80069c0:	643b      	str	r3, [r7, #64]	; 0x40
 80069c2:	4613      	mov	r3, r2
 80069c4:	eb42 0303 	adc.w	r3, r2, r3
 80069c8:	647b      	str	r3, [r7, #68]	; 0x44
 80069ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80069d2:	f7fa f84b 	bl	8000a6c <__aeabi_uldivmod>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	4611      	mov	r1, r2
 80069dc:	4b3b      	ldr	r3, [pc, #236]	; (8006acc <UART_SetConfig+0x2d4>)
 80069de:	fba3 2301 	umull	r2, r3, r3, r1
 80069e2:	095b      	lsrs	r3, r3, #5
 80069e4:	2264      	movs	r2, #100	; 0x64
 80069e6:	fb02 f303 	mul.w	r3, r2, r3
 80069ea:	1acb      	subs	r3, r1, r3
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80069f2:	4b36      	ldr	r3, [pc, #216]	; (8006acc <UART_SetConfig+0x2d4>)
 80069f4:	fba3 2302 	umull	r2, r3, r3, r2
 80069f8:	095b      	lsrs	r3, r3, #5
 80069fa:	005b      	lsls	r3, r3, #1
 80069fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a00:	441c      	add	r4, r3
 8006a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a06:	2200      	movs	r2, #0
 8006a08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006a10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006a14:	4642      	mov	r2, r8
 8006a16:	464b      	mov	r3, r9
 8006a18:	1891      	adds	r1, r2, r2
 8006a1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a1c:	415b      	adcs	r3, r3
 8006a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a24:	4641      	mov	r1, r8
 8006a26:	1851      	adds	r1, r2, r1
 8006a28:	6339      	str	r1, [r7, #48]	; 0x30
 8006a2a:	4649      	mov	r1, r9
 8006a2c:	414b      	adcs	r3, r1
 8006a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a30:	f04f 0200 	mov.w	r2, #0
 8006a34:	f04f 0300 	mov.w	r3, #0
 8006a38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a3c:	4659      	mov	r1, fp
 8006a3e:	00cb      	lsls	r3, r1, #3
 8006a40:	4651      	mov	r1, sl
 8006a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a46:	4651      	mov	r1, sl
 8006a48:	00ca      	lsls	r2, r1, #3
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	4603      	mov	r3, r0
 8006a50:	4642      	mov	r2, r8
 8006a52:	189b      	adds	r3, r3, r2
 8006a54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a58:	464b      	mov	r3, r9
 8006a5a:	460a      	mov	r2, r1
 8006a5c:	eb42 0303 	adc.w	r3, r2, r3
 8006a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a78:	460b      	mov	r3, r1
 8006a7a:	18db      	adds	r3, r3, r3
 8006a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a7e:	4613      	mov	r3, r2
 8006a80:	eb42 0303 	adc.w	r3, r2, r3
 8006a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a8e:	f7f9 ffed 	bl	8000a6c <__aeabi_uldivmod>
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <UART_SetConfig+0x2d4>)
 8006a98:	fba3 1302 	umull	r1, r3, r3, r2
 8006a9c:	095b      	lsrs	r3, r3, #5
 8006a9e:	2164      	movs	r1, #100	; 0x64
 8006aa0:	fb01 f303 	mul.w	r3, r1, r3
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	00db      	lsls	r3, r3, #3
 8006aa8:	3332      	adds	r3, #50	; 0x32
 8006aaa:	4a08      	ldr	r2, [pc, #32]	; (8006acc <UART_SetConfig+0x2d4>)
 8006aac:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab0:	095b      	lsrs	r3, r3, #5
 8006ab2:	f003 0207 	and.w	r2, r3, #7
 8006ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4422      	add	r2, r4
 8006abe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ac0:	e105      	b.n	8006cce <UART_SetConfig+0x4d6>
 8006ac2:	bf00      	nop
 8006ac4:	40011000 	.word	0x40011000
 8006ac8:	40011400 	.word	0x40011400
 8006acc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ad0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ada:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ade:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ae2:	4642      	mov	r2, r8
 8006ae4:	464b      	mov	r3, r9
 8006ae6:	1891      	adds	r1, r2, r2
 8006ae8:	6239      	str	r1, [r7, #32]
 8006aea:	415b      	adcs	r3, r3
 8006aec:	627b      	str	r3, [r7, #36]	; 0x24
 8006aee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006af2:	4641      	mov	r1, r8
 8006af4:	1854      	adds	r4, r2, r1
 8006af6:	4649      	mov	r1, r9
 8006af8:	eb43 0501 	adc.w	r5, r3, r1
 8006afc:	f04f 0200 	mov.w	r2, #0
 8006b00:	f04f 0300 	mov.w	r3, #0
 8006b04:	00eb      	lsls	r3, r5, #3
 8006b06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b0a:	00e2      	lsls	r2, r4, #3
 8006b0c:	4614      	mov	r4, r2
 8006b0e:	461d      	mov	r5, r3
 8006b10:	4643      	mov	r3, r8
 8006b12:	18e3      	adds	r3, r4, r3
 8006b14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b18:	464b      	mov	r3, r9
 8006b1a:	eb45 0303 	adc.w	r3, r5, r3
 8006b1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b32:	f04f 0200 	mov.w	r2, #0
 8006b36:	f04f 0300 	mov.w	r3, #0
 8006b3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b3e:	4629      	mov	r1, r5
 8006b40:	008b      	lsls	r3, r1, #2
 8006b42:	4621      	mov	r1, r4
 8006b44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b48:	4621      	mov	r1, r4
 8006b4a:	008a      	lsls	r2, r1, #2
 8006b4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b50:	f7f9 ff8c 	bl	8000a6c <__aeabi_uldivmod>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4b60      	ldr	r3, [pc, #384]	; (8006cdc <UART_SetConfig+0x4e4>)
 8006b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b5e:	095b      	lsrs	r3, r3, #5
 8006b60:	011c      	lsls	r4, r3, #4
 8006b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b74:	4642      	mov	r2, r8
 8006b76:	464b      	mov	r3, r9
 8006b78:	1891      	adds	r1, r2, r2
 8006b7a:	61b9      	str	r1, [r7, #24]
 8006b7c:	415b      	adcs	r3, r3
 8006b7e:	61fb      	str	r3, [r7, #28]
 8006b80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b84:	4641      	mov	r1, r8
 8006b86:	1851      	adds	r1, r2, r1
 8006b88:	6139      	str	r1, [r7, #16]
 8006b8a:	4649      	mov	r1, r9
 8006b8c:	414b      	adcs	r3, r1
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	f04f 0200 	mov.w	r2, #0
 8006b94:	f04f 0300 	mov.w	r3, #0
 8006b98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b9c:	4659      	mov	r1, fp
 8006b9e:	00cb      	lsls	r3, r1, #3
 8006ba0:	4651      	mov	r1, sl
 8006ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ba6:	4651      	mov	r1, sl
 8006ba8:	00ca      	lsls	r2, r1, #3
 8006baa:	4610      	mov	r0, r2
 8006bac:	4619      	mov	r1, r3
 8006bae:	4603      	mov	r3, r0
 8006bb0:	4642      	mov	r2, r8
 8006bb2:	189b      	adds	r3, r3, r2
 8006bb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bb8:	464b      	mov	r3, r9
 8006bba:	460a      	mov	r2, r1
 8006bbc:	eb42 0303 	adc.w	r3, r2, r3
 8006bc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006bd0:	f04f 0200 	mov.w	r2, #0
 8006bd4:	f04f 0300 	mov.w	r3, #0
 8006bd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006bdc:	4649      	mov	r1, r9
 8006bde:	008b      	lsls	r3, r1, #2
 8006be0:	4641      	mov	r1, r8
 8006be2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006be6:	4641      	mov	r1, r8
 8006be8:	008a      	lsls	r2, r1, #2
 8006bea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006bee:	f7f9 ff3d 	bl	8000a6c <__aeabi_uldivmod>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	4b39      	ldr	r3, [pc, #228]	; (8006cdc <UART_SetConfig+0x4e4>)
 8006bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8006bfc:	095b      	lsrs	r3, r3, #5
 8006bfe:	2164      	movs	r1, #100	; 0x64
 8006c00:	fb01 f303 	mul.w	r3, r1, r3
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	3332      	adds	r3, #50	; 0x32
 8006c0a:	4a34      	ldr	r2, [pc, #208]	; (8006cdc <UART_SetConfig+0x4e4>)
 8006c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c10:	095b      	lsrs	r3, r3, #5
 8006c12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c16:	441c      	add	r4, r3
 8006c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	673b      	str	r3, [r7, #112]	; 0x70
 8006c20:	677a      	str	r2, [r7, #116]	; 0x74
 8006c22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c26:	4642      	mov	r2, r8
 8006c28:	464b      	mov	r3, r9
 8006c2a:	1891      	adds	r1, r2, r2
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	415b      	adcs	r3, r3
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c36:	4641      	mov	r1, r8
 8006c38:	1851      	adds	r1, r2, r1
 8006c3a:	6039      	str	r1, [r7, #0]
 8006c3c:	4649      	mov	r1, r9
 8006c3e:	414b      	adcs	r3, r1
 8006c40:	607b      	str	r3, [r7, #4]
 8006c42:	f04f 0200 	mov.w	r2, #0
 8006c46:	f04f 0300 	mov.w	r3, #0
 8006c4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c4e:	4659      	mov	r1, fp
 8006c50:	00cb      	lsls	r3, r1, #3
 8006c52:	4651      	mov	r1, sl
 8006c54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c58:	4651      	mov	r1, sl
 8006c5a:	00ca      	lsls	r2, r1, #3
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4603      	mov	r3, r0
 8006c62:	4642      	mov	r2, r8
 8006c64:	189b      	adds	r3, r3, r2
 8006c66:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c68:	464b      	mov	r3, r9
 8006c6a:	460a      	mov	r2, r1
 8006c6c:	eb42 0303 	adc.w	r3, r2, r3
 8006c70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	663b      	str	r3, [r7, #96]	; 0x60
 8006c7c:	667a      	str	r2, [r7, #100]	; 0x64
 8006c7e:	f04f 0200 	mov.w	r2, #0
 8006c82:	f04f 0300 	mov.w	r3, #0
 8006c86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c8a:	4649      	mov	r1, r9
 8006c8c:	008b      	lsls	r3, r1, #2
 8006c8e:	4641      	mov	r1, r8
 8006c90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c94:	4641      	mov	r1, r8
 8006c96:	008a      	lsls	r2, r1, #2
 8006c98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c9c:	f7f9 fee6 	bl	8000a6c <__aeabi_uldivmod>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4b0d      	ldr	r3, [pc, #52]	; (8006cdc <UART_SetConfig+0x4e4>)
 8006ca6:	fba3 1302 	umull	r1, r3, r3, r2
 8006caa:	095b      	lsrs	r3, r3, #5
 8006cac:	2164      	movs	r1, #100	; 0x64
 8006cae:	fb01 f303 	mul.w	r3, r1, r3
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	3332      	adds	r3, #50	; 0x32
 8006cb8:	4a08      	ldr	r2, [pc, #32]	; (8006cdc <UART_SetConfig+0x4e4>)
 8006cba:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbe:	095b      	lsrs	r3, r3, #5
 8006cc0:	f003 020f 	and.w	r2, r3, #15
 8006cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4422      	add	r2, r4
 8006ccc:	609a      	str	r2, [r3, #8]
}
 8006cce:	bf00      	nop
 8006cd0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cda:	bf00      	nop
 8006cdc:	51eb851f 	.word	0x51eb851f

08006ce0 <__errno>:
 8006ce0:	4b01      	ldr	r3, [pc, #4]	; (8006ce8 <__errno+0x8>)
 8006ce2:	6818      	ldr	r0, [r3, #0]
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	20000010 	.word	0x20000010

08006cec <__libc_init_array>:
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	4d0d      	ldr	r5, [pc, #52]	; (8006d24 <__libc_init_array+0x38>)
 8006cf0:	4c0d      	ldr	r4, [pc, #52]	; (8006d28 <__libc_init_array+0x3c>)
 8006cf2:	1b64      	subs	r4, r4, r5
 8006cf4:	10a4      	asrs	r4, r4, #2
 8006cf6:	2600      	movs	r6, #0
 8006cf8:	42a6      	cmp	r6, r4
 8006cfa:	d109      	bne.n	8006d10 <__libc_init_array+0x24>
 8006cfc:	4d0b      	ldr	r5, [pc, #44]	; (8006d2c <__libc_init_array+0x40>)
 8006cfe:	4c0c      	ldr	r4, [pc, #48]	; (8006d30 <__libc_init_array+0x44>)
 8006d00:	f001 f834 	bl	8007d6c <_init>
 8006d04:	1b64      	subs	r4, r4, r5
 8006d06:	10a4      	asrs	r4, r4, #2
 8006d08:	2600      	movs	r6, #0
 8006d0a:	42a6      	cmp	r6, r4
 8006d0c:	d105      	bne.n	8006d1a <__libc_init_array+0x2e>
 8006d0e:	bd70      	pop	{r4, r5, r6, pc}
 8006d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d14:	4798      	blx	r3
 8006d16:	3601      	adds	r6, #1
 8006d18:	e7ee      	b.n	8006cf8 <__libc_init_array+0xc>
 8006d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d1e:	4798      	blx	r3
 8006d20:	3601      	adds	r6, #1
 8006d22:	e7f2      	b.n	8006d0a <__libc_init_array+0x1e>
 8006d24:	08007fd4 	.word	0x08007fd4
 8006d28:	08007fd4 	.word	0x08007fd4
 8006d2c:	08007fd4 	.word	0x08007fd4
 8006d30:	08007fd8 	.word	0x08007fd8

08006d34 <malloc>:
 8006d34:	4b02      	ldr	r3, [pc, #8]	; (8006d40 <malloc+0xc>)
 8006d36:	4601      	mov	r1, r0
 8006d38:	6818      	ldr	r0, [r3, #0]
 8006d3a:	f000 b87f 	b.w	8006e3c <_malloc_r>
 8006d3e:	bf00      	nop
 8006d40:	20000010 	.word	0x20000010

08006d44 <free>:
 8006d44:	4b02      	ldr	r3, [pc, #8]	; (8006d50 <free+0xc>)
 8006d46:	4601      	mov	r1, r0
 8006d48:	6818      	ldr	r0, [r3, #0]
 8006d4a:	f000 b80b 	b.w	8006d64 <_free_r>
 8006d4e:	bf00      	nop
 8006d50:	20000010 	.word	0x20000010

08006d54 <memset>:
 8006d54:	4402      	add	r2, r0
 8006d56:	4603      	mov	r3, r0
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d100      	bne.n	8006d5e <memset+0xa>
 8006d5c:	4770      	bx	lr
 8006d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d62:	e7f9      	b.n	8006d58 <memset+0x4>

08006d64 <_free_r>:
 8006d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d66:	2900      	cmp	r1, #0
 8006d68:	d044      	beq.n	8006df4 <_free_r+0x90>
 8006d6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d6e:	9001      	str	r0, [sp, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f1a1 0404 	sub.w	r4, r1, #4
 8006d76:	bfb8      	it	lt
 8006d78:	18e4      	addlt	r4, r4, r3
 8006d7a:	f000 fc51 	bl	8007620 <__malloc_lock>
 8006d7e:	4a1e      	ldr	r2, [pc, #120]	; (8006df8 <_free_r+0x94>)
 8006d80:	9801      	ldr	r0, [sp, #4]
 8006d82:	6813      	ldr	r3, [r2, #0]
 8006d84:	b933      	cbnz	r3, 8006d94 <_free_r+0x30>
 8006d86:	6063      	str	r3, [r4, #4]
 8006d88:	6014      	str	r4, [r2, #0]
 8006d8a:	b003      	add	sp, #12
 8006d8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d90:	f000 bc4c 	b.w	800762c <__malloc_unlock>
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	d908      	bls.n	8006daa <_free_r+0x46>
 8006d98:	6825      	ldr	r5, [r4, #0]
 8006d9a:	1961      	adds	r1, r4, r5
 8006d9c:	428b      	cmp	r3, r1
 8006d9e:	bf01      	itttt	eq
 8006da0:	6819      	ldreq	r1, [r3, #0]
 8006da2:	685b      	ldreq	r3, [r3, #4]
 8006da4:	1949      	addeq	r1, r1, r5
 8006da6:	6021      	streq	r1, [r4, #0]
 8006da8:	e7ed      	b.n	8006d86 <_free_r+0x22>
 8006daa:	461a      	mov	r2, r3
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	b10b      	cbz	r3, 8006db4 <_free_r+0x50>
 8006db0:	42a3      	cmp	r3, r4
 8006db2:	d9fa      	bls.n	8006daa <_free_r+0x46>
 8006db4:	6811      	ldr	r1, [r2, #0]
 8006db6:	1855      	adds	r5, r2, r1
 8006db8:	42a5      	cmp	r5, r4
 8006dba:	d10b      	bne.n	8006dd4 <_free_r+0x70>
 8006dbc:	6824      	ldr	r4, [r4, #0]
 8006dbe:	4421      	add	r1, r4
 8006dc0:	1854      	adds	r4, r2, r1
 8006dc2:	42a3      	cmp	r3, r4
 8006dc4:	6011      	str	r1, [r2, #0]
 8006dc6:	d1e0      	bne.n	8006d8a <_free_r+0x26>
 8006dc8:	681c      	ldr	r4, [r3, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	6053      	str	r3, [r2, #4]
 8006dce:	4421      	add	r1, r4
 8006dd0:	6011      	str	r1, [r2, #0]
 8006dd2:	e7da      	b.n	8006d8a <_free_r+0x26>
 8006dd4:	d902      	bls.n	8006ddc <_free_r+0x78>
 8006dd6:	230c      	movs	r3, #12
 8006dd8:	6003      	str	r3, [r0, #0]
 8006dda:	e7d6      	b.n	8006d8a <_free_r+0x26>
 8006ddc:	6825      	ldr	r5, [r4, #0]
 8006dde:	1961      	adds	r1, r4, r5
 8006de0:	428b      	cmp	r3, r1
 8006de2:	bf04      	itt	eq
 8006de4:	6819      	ldreq	r1, [r3, #0]
 8006de6:	685b      	ldreq	r3, [r3, #4]
 8006de8:	6063      	str	r3, [r4, #4]
 8006dea:	bf04      	itt	eq
 8006dec:	1949      	addeq	r1, r1, r5
 8006dee:	6021      	streq	r1, [r4, #0]
 8006df0:	6054      	str	r4, [r2, #4]
 8006df2:	e7ca      	b.n	8006d8a <_free_r+0x26>
 8006df4:	b003      	add	sp, #12
 8006df6:	bd30      	pop	{r4, r5, pc}
 8006df8:	20000250 	.word	0x20000250

08006dfc <sbrk_aligned>:
 8006dfc:	b570      	push	{r4, r5, r6, lr}
 8006dfe:	4e0e      	ldr	r6, [pc, #56]	; (8006e38 <sbrk_aligned+0x3c>)
 8006e00:	460c      	mov	r4, r1
 8006e02:	6831      	ldr	r1, [r6, #0]
 8006e04:	4605      	mov	r5, r0
 8006e06:	b911      	cbnz	r1, 8006e0e <sbrk_aligned+0x12>
 8006e08:	f000 f91a 	bl	8007040 <_sbrk_r>
 8006e0c:	6030      	str	r0, [r6, #0]
 8006e0e:	4621      	mov	r1, r4
 8006e10:	4628      	mov	r0, r5
 8006e12:	f000 f915 	bl	8007040 <_sbrk_r>
 8006e16:	1c43      	adds	r3, r0, #1
 8006e18:	d00a      	beq.n	8006e30 <sbrk_aligned+0x34>
 8006e1a:	1cc4      	adds	r4, r0, #3
 8006e1c:	f024 0403 	bic.w	r4, r4, #3
 8006e20:	42a0      	cmp	r0, r4
 8006e22:	d007      	beq.n	8006e34 <sbrk_aligned+0x38>
 8006e24:	1a21      	subs	r1, r4, r0
 8006e26:	4628      	mov	r0, r5
 8006e28:	f000 f90a 	bl	8007040 <_sbrk_r>
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	d101      	bne.n	8006e34 <sbrk_aligned+0x38>
 8006e30:	f04f 34ff 	mov.w	r4, #4294967295
 8006e34:	4620      	mov	r0, r4
 8006e36:	bd70      	pop	{r4, r5, r6, pc}
 8006e38:	20000254 	.word	0x20000254

08006e3c <_malloc_r>:
 8006e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e40:	1ccd      	adds	r5, r1, #3
 8006e42:	f025 0503 	bic.w	r5, r5, #3
 8006e46:	3508      	adds	r5, #8
 8006e48:	2d0c      	cmp	r5, #12
 8006e4a:	bf38      	it	cc
 8006e4c:	250c      	movcc	r5, #12
 8006e4e:	2d00      	cmp	r5, #0
 8006e50:	4607      	mov	r7, r0
 8006e52:	db01      	blt.n	8006e58 <_malloc_r+0x1c>
 8006e54:	42a9      	cmp	r1, r5
 8006e56:	d905      	bls.n	8006e64 <_malloc_r+0x28>
 8006e58:	230c      	movs	r3, #12
 8006e5a:	603b      	str	r3, [r7, #0]
 8006e5c:	2600      	movs	r6, #0
 8006e5e:	4630      	mov	r0, r6
 8006e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e64:	4e2e      	ldr	r6, [pc, #184]	; (8006f20 <_malloc_r+0xe4>)
 8006e66:	f000 fbdb 	bl	8007620 <__malloc_lock>
 8006e6a:	6833      	ldr	r3, [r6, #0]
 8006e6c:	461c      	mov	r4, r3
 8006e6e:	bb34      	cbnz	r4, 8006ebe <_malloc_r+0x82>
 8006e70:	4629      	mov	r1, r5
 8006e72:	4638      	mov	r0, r7
 8006e74:	f7ff ffc2 	bl	8006dfc <sbrk_aligned>
 8006e78:	1c43      	adds	r3, r0, #1
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	d14d      	bne.n	8006f1a <_malloc_r+0xde>
 8006e7e:	6834      	ldr	r4, [r6, #0]
 8006e80:	4626      	mov	r6, r4
 8006e82:	2e00      	cmp	r6, #0
 8006e84:	d140      	bne.n	8006f08 <_malloc_r+0xcc>
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	4631      	mov	r1, r6
 8006e8a:	4638      	mov	r0, r7
 8006e8c:	eb04 0803 	add.w	r8, r4, r3
 8006e90:	f000 f8d6 	bl	8007040 <_sbrk_r>
 8006e94:	4580      	cmp	r8, r0
 8006e96:	d13a      	bne.n	8006f0e <_malloc_r+0xd2>
 8006e98:	6821      	ldr	r1, [r4, #0]
 8006e9a:	3503      	adds	r5, #3
 8006e9c:	1a6d      	subs	r5, r5, r1
 8006e9e:	f025 0503 	bic.w	r5, r5, #3
 8006ea2:	3508      	adds	r5, #8
 8006ea4:	2d0c      	cmp	r5, #12
 8006ea6:	bf38      	it	cc
 8006ea8:	250c      	movcc	r5, #12
 8006eaa:	4629      	mov	r1, r5
 8006eac:	4638      	mov	r0, r7
 8006eae:	f7ff ffa5 	bl	8006dfc <sbrk_aligned>
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	d02b      	beq.n	8006f0e <_malloc_r+0xd2>
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	442b      	add	r3, r5
 8006eba:	6023      	str	r3, [r4, #0]
 8006ebc:	e00e      	b.n	8006edc <_malloc_r+0xa0>
 8006ebe:	6822      	ldr	r2, [r4, #0]
 8006ec0:	1b52      	subs	r2, r2, r5
 8006ec2:	d41e      	bmi.n	8006f02 <_malloc_r+0xc6>
 8006ec4:	2a0b      	cmp	r2, #11
 8006ec6:	d916      	bls.n	8006ef6 <_malloc_r+0xba>
 8006ec8:	1961      	adds	r1, r4, r5
 8006eca:	42a3      	cmp	r3, r4
 8006ecc:	6025      	str	r5, [r4, #0]
 8006ece:	bf18      	it	ne
 8006ed0:	6059      	strne	r1, [r3, #4]
 8006ed2:	6863      	ldr	r3, [r4, #4]
 8006ed4:	bf08      	it	eq
 8006ed6:	6031      	streq	r1, [r6, #0]
 8006ed8:	5162      	str	r2, [r4, r5]
 8006eda:	604b      	str	r3, [r1, #4]
 8006edc:	4638      	mov	r0, r7
 8006ede:	f104 060b 	add.w	r6, r4, #11
 8006ee2:	f000 fba3 	bl	800762c <__malloc_unlock>
 8006ee6:	f026 0607 	bic.w	r6, r6, #7
 8006eea:	1d23      	adds	r3, r4, #4
 8006eec:	1af2      	subs	r2, r6, r3
 8006eee:	d0b6      	beq.n	8006e5e <_malloc_r+0x22>
 8006ef0:	1b9b      	subs	r3, r3, r6
 8006ef2:	50a3      	str	r3, [r4, r2]
 8006ef4:	e7b3      	b.n	8006e5e <_malloc_r+0x22>
 8006ef6:	6862      	ldr	r2, [r4, #4]
 8006ef8:	42a3      	cmp	r3, r4
 8006efa:	bf0c      	ite	eq
 8006efc:	6032      	streq	r2, [r6, #0]
 8006efe:	605a      	strne	r2, [r3, #4]
 8006f00:	e7ec      	b.n	8006edc <_malloc_r+0xa0>
 8006f02:	4623      	mov	r3, r4
 8006f04:	6864      	ldr	r4, [r4, #4]
 8006f06:	e7b2      	b.n	8006e6e <_malloc_r+0x32>
 8006f08:	4634      	mov	r4, r6
 8006f0a:	6876      	ldr	r6, [r6, #4]
 8006f0c:	e7b9      	b.n	8006e82 <_malloc_r+0x46>
 8006f0e:	230c      	movs	r3, #12
 8006f10:	603b      	str	r3, [r7, #0]
 8006f12:	4638      	mov	r0, r7
 8006f14:	f000 fb8a 	bl	800762c <__malloc_unlock>
 8006f18:	e7a1      	b.n	8006e5e <_malloc_r+0x22>
 8006f1a:	6025      	str	r5, [r4, #0]
 8006f1c:	e7de      	b.n	8006edc <_malloc_r+0xa0>
 8006f1e:	bf00      	nop
 8006f20:	20000250 	.word	0x20000250

08006f24 <iprintf>:
 8006f24:	b40f      	push	{r0, r1, r2, r3}
 8006f26:	4b0a      	ldr	r3, [pc, #40]	; (8006f50 <iprintf+0x2c>)
 8006f28:	b513      	push	{r0, r1, r4, lr}
 8006f2a:	681c      	ldr	r4, [r3, #0]
 8006f2c:	b124      	cbz	r4, 8006f38 <iprintf+0x14>
 8006f2e:	69a3      	ldr	r3, [r4, #24]
 8006f30:	b913      	cbnz	r3, 8006f38 <iprintf+0x14>
 8006f32:	4620      	mov	r0, r4
 8006f34:	f000 fa6e 	bl	8007414 <__sinit>
 8006f38:	ab05      	add	r3, sp, #20
 8006f3a:	9a04      	ldr	r2, [sp, #16]
 8006f3c:	68a1      	ldr	r1, [r4, #8]
 8006f3e:	9301      	str	r3, [sp, #4]
 8006f40:	4620      	mov	r0, r4
 8006f42:	f000 fba3 	bl	800768c <_vfiprintf_r>
 8006f46:	b002      	add	sp, #8
 8006f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f4c:	b004      	add	sp, #16
 8006f4e:	4770      	bx	lr
 8006f50:	20000010 	.word	0x20000010

08006f54 <_puts_r>:
 8006f54:	b570      	push	{r4, r5, r6, lr}
 8006f56:	460e      	mov	r6, r1
 8006f58:	4605      	mov	r5, r0
 8006f5a:	b118      	cbz	r0, 8006f64 <_puts_r+0x10>
 8006f5c:	6983      	ldr	r3, [r0, #24]
 8006f5e:	b90b      	cbnz	r3, 8006f64 <_puts_r+0x10>
 8006f60:	f000 fa58 	bl	8007414 <__sinit>
 8006f64:	69ab      	ldr	r3, [r5, #24]
 8006f66:	68ac      	ldr	r4, [r5, #8]
 8006f68:	b913      	cbnz	r3, 8006f70 <_puts_r+0x1c>
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	f000 fa52 	bl	8007414 <__sinit>
 8006f70:	4b2c      	ldr	r3, [pc, #176]	; (8007024 <_puts_r+0xd0>)
 8006f72:	429c      	cmp	r4, r3
 8006f74:	d120      	bne.n	8006fb8 <_puts_r+0x64>
 8006f76:	686c      	ldr	r4, [r5, #4]
 8006f78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f7a:	07db      	lsls	r3, r3, #31
 8006f7c:	d405      	bmi.n	8006f8a <_puts_r+0x36>
 8006f7e:	89a3      	ldrh	r3, [r4, #12]
 8006f80:	0598      	lsls	r0, r3, #22
 8006f82:	d402      	bmi.n	8006f8a <_puts_r+0x36>
 8006f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f86:	f000 fae3 	bl	8007550 <__retarget_lock_acquire_recursive>
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	0719      	lsls	r1, r3, #28
 8006f8e:	d51d      	bpl.n	8006fcc <_puts_r+0x78>
 8006f90:	6923      	ldr	r3, [r4, #16]
 8006f92:	b1db      	cbz	r3, 8006fcc <_puts_r+0x78>
 8006f94:	3e01      	subs	r6, #1
 8006f96:	68a3      	ldr	r3, [r4, #8]
 8006f98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	60a3      	str	r3, [r4, #8]
 8006fa0:	bb39      	cbnz	r1, 8006ff2 <_puts_r+0x9e>
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	da38      	bge.n	8007018 <_puts_r+0xc4>
 8006fa6:	4622      	mov	r2, r4
 8006fa8:	210a      	movs	r1, #10
 8006faa:	4628      	mov	r0, r5
 8006fac:	f000 f858 	bl	8007060 <__swbuf_r>
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	d011      	beq.n	8006fd8 <_puts_r+0x84>
 8006fb4:	250a      	movs	r5, #10
 8006fb6:	e011      	b.n	8006fdc <_puts_r+0x88>
 8006fb8:	4b1b      	ldr	r3, [pc, #108]	; (8007028 <_puts_r+0xd4>)
 8006fba:	429c      	cmp	r4, r3
 8006fbc:	d101      	bne.n	8006fc2 <_puts_r+0x6e>
 8006fbe:	68ac      	ldr	r4, [r5, #8]
 8006fc0:	e7da      	b.n	8006f78 <_puts_r+0x24>
 8006fc2:	4b1a      	ldr	r3, [pc, #104]	; (800702c <_puts_r+0xd8>)
 8006fc4:	429c      	cmp	r4, r3
 8006fc6:	bf08      	it	eq
 8006fc8:	68ec      	ldreq	r4, [r5, #12]
 8006fca:	e7d5      	b.n	8006f78 <_puts_r+0x24>
 8006fcc:	4621      	mov	r1, r4
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f000 f898 	bl	8007104 <__swsetup_r>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d0dd      	beq.n	8006f94 <_puts_r+0x40>
 8006fd8:	f04f 35ff 	mov.w	r5, #4294967295
 8006fdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fde:	07da      	lsls	r2, r3, #31
 8006fe0:	d405      	bmi.n	8006fee <_puts_r+0x9a>
 8006fe2:	89a3      	ldrh	r3, [r4, #12]
 8006fe4:	059b      	lsls	r3, r3, #22
 8006fe6:	d402      	bmi.n	8006fee <_puts_r+0x9a>
 8006fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fea:	f000 fab2 	bl	8007552 <__retarget_lock_release_recursive>
 8006fee:	4628      	mov	r0, r5
 8006ff0:	bd70      	pop	{r4, r5, r6, pc}
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	da04      	bge.n	8007000 <_puts_r+0xac>
 8006ff6:	69a2      	ldr	r2, [r4, #24]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	dc06      	bgt.n	800700a <_puts_r+0xb6>
 8006ffc:	290a      	cmp	r1, #10
 8006ffe:	d004      	beq.n	800700a <_puts_r+0xb6>
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	6022      	str	r2, [r4, #0]
 8007006:	7019      	strb	r1, [r3, #0]
 8007008:	e7c5      	b.n	8006f96 <_puts_r+0x42>
 800700a:	4622      	mov	r2, r4
 800700c:	4628      	mov	r0, r5
 800700e:	f000 f827 	bl	8007060 <__swbuf_r>
 8007012:	3001      	adds	r0, #1
 8007014:	d1bf      	bne.n	8006f96 <_puts_r+0x42>
 8007016:	e7df      	b.n	8006fd8 <_puts_r+0x84>
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	250a      	movs	r5, #10
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	6022      	str	r2, [r4, #0]
 8007020:	701d      	strb	r5, [r3, #0]
 8007022:	e7db      	b.n	8006fdc <_puts_r+0x88>
 8007024:	08007f58 	.word	0x08007f58
 8007028:	08007f78 	.word	0x08007f78
 800702c:	08007f38 	.word	0x08007f38

08007030 <puts>:
 8007030:	4b02      	ldr	r3, [pc, #8]	; (800703c <puts+0xc>)
 8007032:	4601      	mov	r1, r0
 8007034:	6818      	ldr	r0, [r3, #0]
 8007036:	f7ff bf8d 	b.w	8006f54 <_puts_r>
 800703a:	bf00      	nop
 800703c:	20000010 	.word	0x20000010

08007040 <_sbrk_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4d06      	ldr	r5, [pc, #24]	; (800705c <_sbrk_r+0x1c>)
 8007044:	2300      	movs	r3, #0
 8007046:	4604      	mov	r4, r0
 8007048:	4608      	mov	r0, r1
 800704a:	602b      	str	r3, [r5, #0]
 800704c:	f7fb f84e 	bl	80020ec <_sbrk>
 8007050:	1c43      	adds	r3, r0, #1
 8007052:	d102      	bne.n	800705a <_sbrk_r+0x1a>
 8007054:	682b      	ldr	r3, [r5, #0]
 8007056:	b103      	cbz	r3, 800705a <_sbrk_r+0x1a>
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	bd38      	pop	{r3, r4, r5, pc}
 800705c:	2000025c 	.word	0x2000025c

08007060 <__swbuf_r>:
 8007060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007062:	460e      	mov	r6, r1
 8007064:	4614      	mov	r4, r2
 8007066:	4605      	mov	r5, r0
 8007068:	b118      	cbz	r0, 8007072 <__swbuf_r+0x12>
 800706a:	6983      	ldr	r3, [r0, #24]
 800706c:	b90b      	cbnz	r3, 8007072 <__swbuf_r+0x12>
 800706e:	f000 f9d1 	bl	8007414 <__sinit>
 8007072:	4b21      	ldr	r3, [pc, #132]	; (80070f8 <__swbuf_r+0x98>)
 8007074:	429c      	cmp	r4, r3
 8007076:	d12b      	bne.n	80070d0 <__swbuf_r+0x70>
 8007078:	686c      	ldr	r4, [r5, #4]
 800707a:	69a3      	ldr	r3, [r4, #24]
 800707c:	60a3      	str	r3, [r4, #8]
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	071a      	lsls	r2, r3, #28
 8007082:	d52f      	bpl.n	80070e4 <__swbuf_r+0x84>
 8007084:	6923      	ldr	r3, [r4, #16]
 8007086:	b36b      	cbz	r3, 80070e4 <__swbuf_r+0x84>
 8007088:	6923      	ldr	r3, [r4, #16]
 800708a:	6820      	ldr	r0, [r4, #0]
 800708c:	1ac0      	subs	r0, r0, r3
 800708e:	6963      	ldr	r3, [r4, #20]
 8007090:	b2f6      	uxtb	r6, r6
 8007092:	4283      	cmp	r3, r0
 8007094:	4637      	mov	r7, r6
 8007096:	dc04      	bgt.n	80070a2 <__swbuf_r+0x42>
 8007098:	4621      	mov	r1, r4
 800709a:	4628      	mov	r0, r5
 800709c:	f000 f926 	bl	80072ec <_fflush_r>
 80070a0:	bb30      	cbnz	r0, 80070f0 <__swbuf_r+0x90>
 80070a2:	68a3      	ldr	r3, [r4, #8]
 80070a4:	3b01      	subs	r3, #1
 80070a6:	60a3      	str	r3, [r4, #8]
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	1c5a      	adds	r2, r3, #1
 80070ac:	6022      	str	r2, [r4, #0]
 80070ae:	701e      	strb	r6, [r3, #0]
 80070b0:	6963      	ldr	r3, [r4, #20]
 80070b2:	3001      	adds	r0, #1
 80070b4:	4283      	cmp	r3, r0
 80070b6:	d004      	beq.n	80070c2 <__swbuf_r+0x62>
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	07db      	lsls	r3, r3, #31
 80070bc:	d506      	bpl.n	80070cc <__swbuf_r+0x6c>
 80070be:	2e0a      	cmp	r6, #10
 80070c0:	d104      	bne.n	80070cc <__swbuf_r+0x6c>
 80070c2:	4621      	mov	r1, r4
 80070c4:	4628      	mov	r0, r5
 80070c6:	f000 f911 	bl	80072ec <_fflush_r>
 80070ca:	b988      	cbnz	r0, 80070f0 <__swbuf_r+0x90>
 80070cc:	4638      	mov	r0, r7
 80070ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070d0:	4b0a      	ldr	r3, [pc, #40]	; (80070fc <__swbuf_r+0x9c>)
 80070d2:	429c      	cmp	r4, r3
 80070d4:	d101      	bne.n	80070da <__swbuf_r+0x7a>
 80070d6:	68ac      	ldr	r4, [r5, #8]
 80070d8:	e7cf      	b.n	800707a <__swbuf_r+0x1a>
 80070da:	4b09      	ldr	r3, [pc, #36]	; (8007100 <__swbuf_r+0xa0>)
 80070dc:	429c      	cmp	r4, r3
 80070de:	bf08      	it	eq
 80070e0:	68ec      	ldreq	r4, [r5, #12]
 80070e2:	e7ca      	b.n	800707a <__swbuf_r+0x1a>
 80070e4:	4621      	mov	r1, r4
 80070e6:	4628      	mov	r0, r5
 80070e8:	f000 f80c 	bl	8007104 <__swsetup_r>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d0cb      	beq.n	8007088 <__swbuf_r+0x28>
 80070f0:	f04f 37ff 	mov.w	r7, #4294967295
 80070f4:	e7ea      	b.n	80070cc <__swbuf_r+0x6c>
 80070f6:	bf00      	nop
 80070f8:	08007f58 	.word	0x08007f58
 80070fc:	08007f78 	.word	0x08007f78
 8007100:	08007f38 	.word	0x08007f38

08007104 <__swsetup_r>:
 8007104:	4b32      	ldr	r3, [pc, #200]	; (80071d0 <__swsetup_r+0xcc>)
 8007106:	b570      	push	{r4, r5, r6, lr}
 8007108:	681d      	ldr	r5, [r3, #0]
 800710a:	4606      	mov	r6, r0
 800710c:	460c      	mov	r4, r1
 800710e:	b125      	cbz	r5, 800711a <__swsetup_r+0x16>
 8007110:	69ab      	ldr	r3, [r5, #24]
 8007112:	b913      	cbnz	r3, 800711a <__swsetup_r+0x16>
 8007114:	4628      	mov	r0, r5
 8007116:	f000 f97d 	bl	8007414 <__sinit>
 800711a:	4b2e      	ldr	r3, [pc, #184]	; (80071d4 <__swsetup_r+0xd0>)
 800711c:	429c      	cmp	r4, r3
 800711e:	d10f      	bne.n	8007140 <__swsetup_r+0x3c>
 8007120:	686c      	ldr	r4, [r5, #4]
 8007122:	89a3      	ldrh	r3, [r4, #12]
 8007124:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007128:	0719      	lsls	r1, r3, #28
 800712a:	d42c      	bmi.n	8007186 <__swsetup_r+0x82>
 800712c:	06dd      	lsls	r5, r3, #27
 800712e:	d411      	bmi.n	8007154 <__swsetup_r+0x50>
 8007130:	2309      	movs	r3, #9
 8007132:	6033      	str	r3, [r6, #0]
 8007134:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007138:	81a3      	strh	r3, [r4, #12]
 800713a:	f04f 30ff 	mov.w	r0, #4294967295
 800713e:	e03e      	b.n	80071be <__swsetup_r+0xba>
 8007140:	4b25      	ldr	r3, [pc, #148]	; (80071d8 <__swsetup_r+0xd4>)
 8007142:	429c      	cmp	r4, r3
 8007144:	d101      	bne.n	800714a <__swsetup_r+0x46>
 8007146:	68ac      	ldr	r4, [r5, #8]
 8007148:	e7eb      	b.n	8007122 <__swsetup_r+0x1e>
 800714a:	4b24      	ldr	r3, [pc, #144]	; (80071dc <__swsetup_r+0xd8>)
 800714c:	429c      	cmp	r4, r3
 800714e:	bf08      	it	eq
 8007150:	68ec      	ldreq	r4, [r5, #12]
 8007152:	e7e6      	b.n	8007122 <__swsetup_r+0x1e>
 8007154:	0758      	lsls	r0, r3, #29
 8007156:	d512      	bpl.n	800717e <__swsetup_r+0x7a>
 8007158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800715a:	b141      	cbz	r1, 800716e <__swsetup_r+0x6a>
 800715c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007160:	4299      	cmp	r1, r3
 8007162:	d002      	beq.n	800716a <__swsetup_r+0x66>
 8007164:	4630      	mov	r0, r6
 8007166:	f7ff fdfd 	bl	8006d64 <_free_r>
 800716a:	2300      	movs	r3, #0
 800716c:	6363      	str	r3, [r4, #52]	; 0x34
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007174:	81a3      	strh	r3, [r4, #12]
 8007176:	2300      	movs	r3, #0
 8007178:	6063      	str	r3, [r4, #4]
 800717a:	6923      	ldr	r3, [r4, #16]
 800717c:	6023      	str	r3, [r4, #0]
 800717e:	89a3      	ldrh	r3, [r4, #12]
 8007180:	f043 0308 	orr.w	r3, r3, #8
 8007184:	81a3      	strh	r3, [r4, #12]
 8007186:	6923      	ldr	r3, [r4, #16]
 8007188:	b94b      	cbnz	r3, 800719e <__swsetup_r+0x9a>
 800718a:	89a3      	ldrh	r3, [r4, #12]
 800718c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007194:	d003      	beq.n	800719e <__swsetup_r+0x9a>
 8007196:	4621      	mov	r1, r4
 8007198:	4630      	mov	r0, r6
 800719a:	f000 fa01 	bl	80075a0 <__smakebuf_r>
 800719e:	89a0      	ldrh	r0, [r4, #12]
 80071a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071a4:	f010 0301 	ands.w	r3, r0, #1
 80071a8:	d00a      	beq.n	80071c0 <__swsetup_r+0xbc>
 80071aa:	2300      	movs	r3, #0
 80071ac:	60a3      	str	r3, [r4, #8]
 80071ae:	6963      	ldr	r3, [r4, #20]
 80071b0:	425b      	negs	r3, r3
 80071b2:	61a3      	str	r3, [r4, #24]
 80071b4:	6923      	ldr	r3, [r4, #16]
 80071b6:	b943      	cbnz	r3, 80071ca <__swsetup_r+0xc6>
 80071b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80071bc:	d1ba      	bne.n	8007134 <__swsetup_r+0x30>
 80071be:	bd70      	pop	{r4, r5, r6, pc}
 80071c0:	0781      	lsls	r1, r0, #30
 80071c2:	bf58      	it	pl
 80071c4:	6963      	ldrpl	r3, [r4, #20]
 80071c6:	60a3      	str	r3, [r4, #8]
 80071c8:	e7f4      	b.n	80071b4 <__swsetup_r+0xb0>
 80071ca:	2000      	movs	r0, #0
 80071cc:	e7f7      	b.n	80071be <__swsetup_r+0xba>
 80071ce:	bf00      	nop
 80071d0:	20000010 	.word	0x20000010
 80071d4:	08007f58 	.word	0x08007f58
 80071d8:	08007f78 	.word	0x08007f78
 80071dc:	08007f38 	.word	0x08007f38

080071e0 <__sflush_r>:
 80071e0:	898a      	ldrh	r2, [r1, #12]
 80071e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e6:	4605      	mov	r5, r0
 80071e8:	0710      	lsls	r0, r2, #28
 80071ea:	460c      	mov	r4, r1
 80071ec:	d458      	bmi.n	80072a0 <__sflush_r+0xc0>
 80071ee:	684b      	ldr	r3, [r1, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	dc05      	bgt.n	8007200 <__sflush_r+0x20>
 80071f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	dc02      	bgt.n	8007200 <__sflush_r+0x20>
 80071fa:	2000      	movs	r0, #0
 80071fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007202:	2e00      	cmp	r6, #0
 8007204:	d0f9      	beq.n	80071fa <__sflush_r+0x1a>
 8007206:	2300      	movs	r3, #0
 8007208:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800720c:	682f      	ldr	r7, [r5, #0]
 800720e:	602b      	str	r3, [r5, #0]
 8007210:	d032      	beq.n	8007278 <__sflush_r+0x98>
 8007212:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007214:	89a3      	ldrh	r3, [r4, #12]
 8007216:	075a      	lsls	r2, r3, #29
 8007218:	d505      	bpl.n	8007226 <__sflush_r+0x46>
 800721a:	6863      	ldr	r3, [r4, #4]
 800721c:	1ac0      	subs	r0, r0, r3
 800721e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007220:	b10b      	cbz	r3, 8007226 <__sflush_r+0x46>
 8007222:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007224:	1ac0      	subs	r0, r0, r3
 8007226:	2300      	movs	r3, #0
 8007228:	4602      	mov	r2, r0
 800722a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800722c:	6a21      	ldr	r1, [r4, #32]
 800722e:	4628      	mov	r0, r5
 8007230:	47b0      	blx	r6
 8007232:	1c43      	adds	r3, r0, #1
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	d106      	bne.n	8007246 <__sflush_r+0x66>
 8007238:	6829      	ldr	r1, [r5, #0]
 800723a:	291d      	cmp	r1, #29
 800723c:	d82c      	bhi.n	8007298 <__sflush_r+0xb8>
 800723e:	4a2a      	ldr	r2, [pc, #168]	; (80072e8 <__sflush_r+0x108>)
 8007240:	40ca      	lsrs	r2, r1
 8007242:	07d6      	lsls	r6, r2, #31
 8007244:	d528      	bpl.n	8007298 <__sflush_r+0xb8>
 8007246:	2200      	movs	r2, #0
 8007248:	6062      	str	r2, [r4, #4]
 800724a:	04d9      	lsls	r1, r3, #19
 800724c:	6922      	ldr	r2, [r4, #16]
 800724e:	6022      	str	r2, [r4, #0]
 8007250:	d504      	bpl.n	800725c <__sflush_r+0x7c>
 8007252:	1c42      	adds	r2, r0, #1
 8007254:	d101      	bne.n	800725a <__sflush_r+0x7a>
 8007256:	682b      	ldr	r3, [r5, #0]
 8007258:	b903      	cbnz	r3, 800725c <__sflush_r+0x7c>
 800725a:	6560      	str	r0, [r4, #84]	; 0x54
 800725c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800725e:	602f      	str	r7, [r5, #0]
 8007260:	2900      	cmp	r1, #0
 8007262:	d0ca      	beq.n	80071fa <__sflush_r+0x1a>
 8007264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007268:	4299      	cmp	r1, r3
 800726a:	d002      	beq.n	8007272 <__sflush_r+0x92>
 800726c:	4628      	mov	r0, r5
 800726e:	f7ff fd79 	bl	8006d64 <_free_r>
 8007272:	2000      	movs	r0, #0
 8007274:	6360      	str	r0, [r4, #52]	; 0x34
 8007276:	e7c1      	b.n	80071fc <__sflush_r+0x1c>
 8007278:	6a21      	ldr	r1, [r4, #32]
 800727a:	2301      	movs	r3, #1
 800727c:	4628      	mov	r0, r5
 800727e:	47b0      	blx	r6
 8007280:	1c41      	adds	r1, r0, #1
 8007282:	d1c7      	bne.n	8007214 <__sflush_r+0x34>
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0c4      	beq.n	8007214 <__sflush_r+0x34>
 800728a:	2b1d      	cmp	r3, #29
 800728c:	d001      	beq.n	8007292 <__sflush_r+0xb2>
 800728e:	2b16      	cmp	r3, #22
 8007290:	d101      	bne.n	8007296 <__sflush_r+0xb6>
 8007292:	602f      	str	r7, [r5, #0]
 8007294:	e7b1      	b.n	80071fa <__sflush_r+0x1a>
 8007296:	89a3      	ldrh	r3, [r4, #12]
 8007298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800729c:	81a3      	strh	r3, [r4, #12]
 800729e:	e7ad      	b.n	80071fc <__sflush_r+0x1c>
 80072a0:	690f      	ldr	r7, [r1, #16]
 80072a2:	2f00      	cmp	r7, #0
 80072a4:	d0a9      	beq.n	80071fa <__sflush_r+0x1a>
 80072a6:	0793      	lsls	r3, r2, #30
 80072a8:	680e      	ldr	r6, [r1, #0]
 80072aa:	bf08      	it	eq
 80072ac:	694b      	ldreq	r3, [r1, #20]
 80072ae:	600f      	str	r7, [r1, #0]
 80072b0:	bf18      	it	ne
 80072b2:	2300      	movne	r3, #0
 80072b4:	eba6 0807 	sub.w	r8, r6, r7
 80072b8:	608b      	str	r3, [r1, #8]
 80072ba:	f1b8 0f00 	cmp.w	r8, #0
 80072be:	dd9c      	ble.n	80071fa <__sflush_r+0x1a>
 80072c0:	6a21      	ldr	r1, [r4, #32]
 80072c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072c4:	4643      	mov	r3, r8
 80072c6:	463a      	mov	r2, r7
 80072c8:	4628      	mov	r0, r5
 80072ca:	47b0      	blx	r6
 80072cc:	2800      	cmp	r0, #0
 80072ce:	dc06      	bgt.n	80072de <__sflush_r+0xfe>
 80072d0:	89a3      	ldrh	r3, [r4, #12]
 80072d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072d6:	81a3      	strh	r3, [r4, #12]
 80072d8:	f04f 30ff 	mov.w	r0, #4294967295
 80072dc:	e78e      	b.n	80071fc <__sflush_r+0x1c>
 80072de:	4407      	add	r7, r0
 80072e0:	eba8 0800 	sub.w	r8, r8, r0
 80072e4:	e7e9      	b.n	80072ba <__sflush_r+0xda>
 80072e6:	bf00      	nop
 80072e8:	20400001 	.word	0x20400001

080072ec <_fflush_r>:
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	690b      	ldr	r3, [r1, #16]
 80072f0:	4605      	mov	r5, r0
 80072f2:	460c      	mov	r4, r1
 80072f4:	b913      	cbnz	r3, 80072fc <_fflush_r+0x10>
 80072f6:	2500      	movs	r5, #0
 80072f8:	4628      	mov	r0, r5
 80072fa:	bd38      	pop	{r3, r4, r5, pc}
 80072fc:	b118      	cbz	r0, 8007306 <_fflush_r+0x1a>
 80072fe:	6983      	ldr	r3, [r0, #24]
 8007300:	b90b      	cbnz	r3, 8007306 <_fflush_r+0x1a>
 8007302:	f000 f887 	bl	8007414 <__sinit>
 8007306:	4b14      	ldr	r3, [pc, #80]	; (8007358 <_fflush_r+0x6c>)
 8007308:	429c      	cmp	r4, r3
 800730a:	d11b      	bne.n	8007344 <_fflush_r+0x58>
 800730c:	686c      	ldr	r4, [r5, #4]
 800730e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d0ef      	beq.n	80072f6 <_fflush_r+0xa>
 8007316:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007318:	07d0      	lsls	r0, r2, #31
 800731a:	d404      	bmi.n	8007326 <_fflush_r+0x3a>
 800731c:	0599      	lsls	r1, r3, #22
 800731e:	d402      	bmi.n	8007326 <_fflush_r+0x3a>
 8007320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007322:	f000 f915 	bl	8007550 <__retarget_lock_acquire_recursive>
 8007326:	4628      	mov	r0, r5
 8007328:	4621      	mov	r1, r4
 800732a:	f7ff ff59 	bl	80071e0 <__sflush_r>
 800732e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007330:	07da      	lsls	r2, r3, #31
 8007332:	4605      	mov	r5, r0
 8007334:	d4e0      	bmi.n	80072f8 <_fflush_r+0xc>
 8007336:	89a3      	ldrh	r3, [r4, #12]
 8007338:	059b      	lsls	r3, r3, #22
 800733a:	d4dd      	bmi.n	80072f8 <_fflush_r+0xc>
 800733c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800733e:	f000 f908 	bl	8007552 <__retarget_lock_release_recursive>
 8007342:	e7d9      	b.n	80072f8 <_fflush_r+0xc>
 8007344:	4b05      	ldr	r3, [pc, #20]	; (800735c <_fflush_r+0x70>)
 8007346:	429c      	cmp	r4, r3
 8007348:	d101      	bne.n	800734e <_fflush_r+0x62>
 800734a:	68ac      	ldr	r4, [r5, #8]
 800734c:	e7df      	b.n	800730e <_fflush_r+0x22>
 800734e:	4b04      	ldr	r3, [pc, #16]	; (8007360 <_fflush_r+0x74>)
 8007350:	429c      	cmp	r4, r3
 8007352:	bf08      	it	eq
 8007354:	68ec      	ldreq	r4, [r5, #12]
 8007356:	e7da      	b.n	800730e <_fflush_r+0x22>
 8007358:	08007f58 	.word	0x08007f58
 800735c:	08007f78 	.word	0x08007f78
 8007360:	08007f38 	.word	0x08007f38

08007364 <std>:
 8007364:	2300      	movs	r3, #0
 8007366:	b510      	push	{r4, lr}
 8007368:	4604      	mov	r4, r0
 800736a:	e9c0 3300 	strd	r3, r3, [r0]
 800736e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007372:	6083      	str	r3, [r0, #8]
 8007374:	8181      	strh	r1, [r0, #12]
 8007376:	6643      	str	r3, [r0, #100]	; 0x64
 8007378:	81c2      	strh	r2, [r0, #14]
 800737a:	6183      	str	r3, [r0, #24]
 800737c:	4619      	mov	r1, r3
 800737e:	2208      	movs	r2, #8
 8007380:	305c      	adds	r0, #92	; 0x5c
 8007382:	f7ff fce7 	bl	8006d54 <memset>
 8007386:	4b05      	ldr	r3, [pc, #20]	; (800739c <std+0x38>)
 8007388:	6263      	str	r3, [r4, #36]	; 0x24
 800738a:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <std+0x3c>)
 800738c:	62a3      	str	r3, [r4, #40]	; 0x28
 800738e:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <std+0x40>)
 8007390:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007392:	4b05      	ldr	r3, [pc, #20]	; (80073a8 <std+0x44>)
 8007394:	6224      	str	r4, [r4, #32]
 8007396:	6323      	str	r3, [r4, #48]	; 0x30
 8007398:	bd10      	pop	{r4, pc}
 800739a:	bf00      	nop
 800739c:	08007c15 	.word	0x08007c15
 80073a0:	08007c37 	.word	0x08007c37
 80073a4:	08007c6f 	.word	0x08007c6f
 80073a8:	08007c93 	.word	0x08007c93

080073ac <_cleanup_r>:
 80073ac:	4901      	ldr	r1, [pc, #4]	; (80073b4 <_cleanup_r+0x8>)
 80073ae:	f000 b8af 	b.w	8007510 <_fwalk_reent>
 80073b2:	bf00      	nop
 80073b4:	080072ed 	.word	0x080072ed

080073b8 <__sfmoreglue>:
 80073b8:	b570      	push	{r4, r5, r6, lr}
 80073ba:	2268      	movs	r2, #104	; 0x68
 80073bc:	1e4d      	subs	r5, r1, #1
 80073be:	4355      	muls	r5, r2
 80073c0:	460e      	mov	r6, r1
 80073c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073c6:	f7ff fd39 	bl	8006e3c <_malloc_r>
 80073ca:	4604      	mov	r4, r0
 80073cc:	b140      	cbz	r0, 80073e0 <__sfmoreglue+0x28>
 80073ce:	2100      	movs	r1, #0
 80073d0:	e9c0 1600 	strd	r1, r6, [r0]
 80073d4:	300c      	adds	r0, #12
 80073d6:	60a0      	str	r0, [r4, #8]
 80073d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073dc:	f7ff fcba 	bl	8006d54 <memset>
 80073e0:	4620      	mov	r0, r4
 80073e2:	bd70      	pop	{r4, r5, r6, pc}

080073e4 <__sfp_lock_acquire>:
 80073e4:	4801      	ldr	r0, [pc, #4]	; (80073ec <__sfp_lock_acquire+0x8>)
 80073e6:	f000 b8b3 	b.w	8007550 <__retarget_lock_acquire_recursive>
 80073ea:	bf00      	nop
 80073ec:	20000259 	.word	0x20000259

080073f0 <__sfp_lock_release>:
 80073f0:	4801      	ldr	r0, [pc, #4]	; (80073f8 <__sfp_lock_release+0x8>)
 80073f2:	f000 b8ae 	b.w	8007552 <__retarget_lock_release_recursive>
 80073f6:	bf00      	nop
 80073f8:	20000259 	.word	0x20000259

080073fc <__sinit_lock_acquire>:
 80073fc:	4801      	ldr	r0, [pc, #4]	; (8007404 <__sinit_lock_acquire+0x8>)
 80073fe:	f000 b8a7 	b.w	8007550 <__retarget_lock_acquire_recursive>
 8007402:	bf00      	nop
 8007404:	2000025a 	.word	0x2000025a

08007408 <__sinit_lock_release>:
 8007408:	4801      	ldr	r0, [pc, #4]	; (8007410 <__sinit_lock_release+0x8>)
 800740a:	f000 b8a2 	b.w	8007552 <__retarget_lock_release_recursive>
 800740e:	bf00      	nop
 8007410:	2000025a 	.word	0x2000025a

08007414 <__sinit>:
 8007414:	b510      	push	{r4, lr}
 8007416:	4604      	mov	r4, r0
 8007418:	f7ff fff0 	bl	80073fc <__sinit_lock_acquire>
 800741c:	69a3      	ldr	r3, [r4, #24]
 800741e:	b11b      	cbz	r3, 8007428 <__sinit+0x14>
 8007420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007424:	f7ff bff0 	b.w	8007408 <__sinit_lock_release>
 8007428:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800742c:	6523      	str	r3, [r4, #80]	; 0x50
 800742e:	4b13      	ldr	r3, [pc, #76]	; (800747c <__sinit+0x68>)
 8007430:	4a13      	ldr	r2, [pc, #76]	; (8007480 <__sinit+0x6c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	62a2      	str	r2, [r4, #40]	; 0x28
 8007436:	42a3      	cmp	r3, r4
 8007438:	bf04      	itt	eq
 800743a:	2301      	moveq	r3, #1
 800743c:	61a3      	streq	r3, [r4, #24]
 800743e:	4620      	mov	r0, r4
 8007440:	f000 f820 	bl	8007484 <__sfp>
 8007444:	6060      	str	r0, [r4, #4]
 8007446:	4620      	mov	r0, r4
 8007448:	f000 f81c 	bl	8007484 <__sfp>
 800744c:	60a0      	str	r0, [r4, #8]
 800744e:	4620      	mov	r0, r4
 8007450:	f000 f818 	bl	8007484 <__sfp>
 8007454:	2200      	movs	r2, #0
 8007456:	60e0      	str	r0, [r4, #12]
 8007458:	2104      	movs	r1, #4
 800745a:	6860      	ldr	r0, [r4, #4]
 800745c:	f7ff ff82 	bl	8007364 <std>
 8007460:	68a0      	ldr	r0, [r4, #8]
 8007462:	2201      	movs	r2, #1
 8007464:	2109      	movs	r1, #9
 8007466:	f7ff ff7d 	bl	8007364 <std>
 800746a:	68e0      	ldr	r0, [r4, #12]
 800746c:	2202      	movs	r2, #2
 800746e:	2112      	movs	r1, #18
 8007470:	f7ff ff78 	bl	8007364 <std>
 8007474:	2301      	movs	r3, #1
 8007476:	61a3      	str	r3, [r4, #24]
 8007478:	e7d2      	b.n	8007420 <__sinit+0xc>
 800747a:	bf00      	nop
 800747c:	08007f34 	.word	0x08007f34
 8007480:	080073ad 	.word	0x080073ad

08007484 <__sfp>:
 8007484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007486:	4607      	mov	r7, r0
 8007488:	f7ff ffac 	bl	80073e4 <__sfp_lock_acquire>
 800748c:	4b1e      	ldr	r3, [pc, #120]	; (8007508 <__sfp+0x84>)
 800748e:	681e      	ldr	r6, [r3, #0]
 8007490:	69b3      	ldr	r3, [r6, #24]
 8007492:	b913      	cbnz	r3, 800749a <__sfp+0x16>
 8007494:	4630      	mov	r0, r6
 8007496:	f7ff ffbd 	bl	8007414 <__sinit>
 800749a:	3648      	adds	r6, #72	; 0x48
 800749c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	d503      	bpl.n	80074ac <__sfp+0x28>
 80074a4:	6833      	ldr	r3, [r6, #0]
 80074a6:	b30b      	cbz	r3, 80074ec <__sfp+0x68>
 80074a8:	6836      	ldr	r6, [r6, #0]
 80074aa:	e7f7      	b.n	800749c <__sfp+0x18>
 80074ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80074b0:	b9d5      	cbnz	r5, 80074e8 <__sfp+0x64>
 80074b2:	4b16      	ldr	r3, [pc, #88]	; (800750c <__sfp+0x88>)
 80074b4:	60e3      	str	r3, [r4, #12]
 80074b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074ba:	6665      	str	r5, [r4, #100]	; 0x64
 80074bc:	f000 f847 	bl	800754e <__retarget_lock_init_recursive>
 80074c0:	f7ff ff96 	bl	80073f0 <__sfp_lock_release>
 80074c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074cc:	6025      	str	r5, [r4, #0]
 80074ce:	61a5      	str	r5, [r4, #24]
 80074d0:	2208      	movs	r2, #8
 80074d2:	4629      	mov	r1, r5
 80074d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074d8:	f7ff fc3c 	bl	8006d54 <memset>
 80074dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074e4:	4620      	mov	r0, r4
 80074e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074e8:	3468      	adds	r4, #104	; 0x68
 80074ea:	e7d9      	b.n	80074a0 <__sfp+0x1c>
 80074ec:	2104      	movs	r1, #4
 80074ee:	4638      	mov	r0, r7
 80074f0:	f7ff ff62 	bl	80073b8 <__sfmoreglue>
 80074f4:	4604      	mov	r4, r0
 80074f6:	6030      	str	r0, [r6, #0]
 80074f8:	2800      	cmp	r0, #0
 80074fa:	d1d5      	bne.n	80074a8 <__sfp+0x24>
 80074fc:	f7ff ff78 	bl	80073f0 <__sfp_lock_release>
 8007500:	230c      	movs	r3, #12
 8007502:	603b      	str	r3, [r7, #0]
 8007504:	e7ee      	b.n	80074e4 <__sfp+0x60>
 8007506:	bf00      	nop
 8007508:	08007f34 	.word	0x08007f34
 800750c:	ffff0001 	.word	0xffff0001

08007510 <_fwalk_reent>:
 8007510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007514:	4606      	mov	r6, r0
 8007516:	4688      	mov	r8, r1
 8007518:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800751c:	2700      	movs	r7, #0
 800751e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007522:	f1b9 0901 	subs.w	r9, r9, #1
 8007526:	d505      	bpl.n	8007534 <_fwalk_reent+0x24>
 8007528:	6824      	ldr	r4, [r4, #0]
 800752a:	2c00      	cmp	r4, #0
 800752c:	d1f7      	bne.n	800751e <_fwalk_reent+0xe>
 800752e:	4638      	mov	r0, r7
 8007530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007534:	89ab      	ldrh	r3, [r5, #12]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d907      	bls.n	800754a <_fwalk_reent+0x3a>
 800753a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800753e:	3301      	adds	r3, #1
 8007540:	d003      	beq.n	800754a <_fwalk_reent+0x3a>
 8007542:	4629      	mov	r1, r5
 8007544:	4630      	mov	r0, r6
 8007546:	47c0      	blx	r8
 8007548:	4307      	orrs	r7, r0
 800754a:	3568      	adds	r5, #104	; 0x68
 800754c:	e7e9      	b.n	8007522 <_fwalk_reent+0x12>

0800754e <__retarget_lock_init_recursive>:
 800754e:	4770      	bx	lr

08007550 <__retarget_lock_acquire_recursive>:
 8007550:	4770      	bx	lr

08007552 <__retarget_lock_release_recursive>:
 8007552:	4770      	bx	lr

08007554 <__swhatbuf_r>:
 8007554:	b570      	push	{r4, r5, r6, lr}
 8007556:	460e      	mov	r6, r1
 8007558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800755c:	2900      	cmp	r1, #0
 800755e:	b096      	sub	sp, #88	; 0x58
 8007560:	4614      	mov	r4, r2
 8007562:	461d      	mov	r5, r3
 8007564:	da08      	bge.n	8007578 <__swhatbuf_r+0x24>
 8007566:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	602a      	str	r2, [r5, #0]
 800756e:	061a      	lsls	r2, r3, #24
 8007570:	d410      	bmi.n	8007594 <__swhatbuf_r+0x40>
 8007572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007576:	e00e      	b.n	8007596 <__swhatbuf_r+0x42>
 8007578:	466a      	mov	r2, sp
 800757a:	f000 fbb1 	bl	8007ce0 <_fstat_r>
 800757e:	2800      	cmp	r0, #0
 8007580:	dbf1      	blt.n	8007566 <__swhatbuf_r+0x12>
 8007582:	9a01      	ldr	r2, [sp, #4]
 8007584:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007588:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800758c:	425a      	negs	r2, r3
 800758e:	415a      	adcs	r2, r3
 8007590:	602a      	str	r2, [r5, #0]
 8007592:	e7ee      	b.n	8007572 <__swhatbuf_r+0x1e>
 8007594:	2340      	movs	r3, #64	; 0x40
 8007596:	2000      	movs	r0, #0
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	b016      	add	sp, #88	; 0x58
 800759c:	bd70      	pop	{r4, r5, r6, pc}
	...

080075a0 <__smakebuf_r>:
 80075a0:	898b      	ldrh	r3, [r1, #12]
 80075a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075a4:	079d      	lsls	r5, r3, #30
 80075a6:	4606      	mov	r6, r0
 80075a8:	460c      	mov	r4, r1
 80075aa:	d507      	bpl.n	80075bc <__smakebuf_r+0x1c>
 80075ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075b0:	6023      	str	r3, [r4, #0]
 80075b2:	6123      	str	r3, [r4, #16]
 80075b4:	2301      	movs	r3, #1
 80075b6:	6163      	str	r3, [r4, #20]
 80075b8:	b002      	add	sp, #8
 80075ba:	bd70      	pop	{r4, r5, r6, pc}
 80075bc:	ab01      	add	r3, sp, #4
 80075be:	466a      	mov	r2, sp
 80075c0:	f7ff ffc8 	bl	8007554 <__swhatbuf_r>
 80075c4:	9900      	ldr	r1, [sp, #0]
 80075c6:	4605      	mov	r5, r0
 80075c8:	4630      	mov	r0, r6
 80075ca:	f7ff fc37 	bl	8006e3c <_malloc_r>
 80075ce:	b948      	cbnz	r0, 80075e4 <__smakebuf_r+0x44>
 80075d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075d4:	059a      	lsls	r2, r3, #22
 80075d6:	d4ef      	bmi.n	80075b8 <__smakebuf_r+0x18>
 80075d8:	f023 0303 	bic.w	r3, r3, #3
 80075dc:	f043 0302 	orr.w	r3, r3, #2
 80075e0:	81a3      	strh	r3, [r4, #12]
 80075e2:	e7e3      	b.n	80075ac <__smakebuf_r+0xc>
 80075e4:	4b0d      	ldr	r3, [pc, #52]	; (800761c <__smakebuf_r+0x7c>)
 80075e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80075e8:	89a3      	ldrh	r3, [r4, #12]
 80075ea:	6020      	str	r0, [r4, #0]
 80075ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f0:	81a3      	strh	r3, [r4, #12]
 80075f2:	9b00      	ldr	r3, [sp, #0]
 80075f4:	6163      	str	r3, [r4, #20]
 80075f6:	9b01      	ldr	r3, [sp, #4]
 80075f8:	6120      	str	r0, [r4, #16]
 80075fa:	b15b      	cbz	r3, 8007614 <__smakebuf_r+0x74>
 80075fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007600:	4630      	mov	r0, r6
 8007602:	f000 fb7f 	bl	8007d04 <_isatty_r>
 8007606:	b128      	cbz	r0, 8007614 <__smakebuf_r+0x74>
 8007608:	89a3      	ldrh	r3, [r4, #12]
 800760a:	f023 0303 	bic.w	r3, r3, #3
 800760e:	f043 0301 	orr.w	r3, r3, #1
 8007612:	81a3      	strh	r3, [r4, #12]
 8007614:	89a0      	ldrh	r0, [r4, #12]
 8007616:	4305      	orrs	r5, r0
 8007618:	81a5      	strh	r5, [r4, #12]
 800761a:	e7cd      	b.n	80075b8 <__smakebuf_r+0x18>
 800761c:	080073ad 	.word	0x080073ad

08007620 <__malloc_lock>:
 8007620:	4801      	ldr	r0, [pc, #4]	; (8007628 <__malloc_lock+0x8>)
 8007622:	f7ff bf95 	b.w	8007550 <__retarget_lock_acquire_recursive>
 8007626:	bf00      	nop
 8007628:	20000258 	.word	0x20000258

0800762c <__malloc_unlock>:
 800762c:	4801      	ldr	r0, [pc, #4]	; (8007634 <__malloc_unlock+0x8>)
 800762e:	f7ff bf90 	b.w	8007552 <__retarget_lock_release_recursive>
 8007632:	bf00      	nop
 8007634:	20000258 	.word	0x20000258

08007638 <__sfputc_r>:
 8007638:	6893      	ldr	r3, [r2, #8]
 800763a:	3b01      	subs	r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	b410      	push	{r4}
 8007640:	6093      	str	r3, [r2, #8]
 8007642:	da08      	bge.n	8007656 <__sfputc_r+0x1e>
 8007644:	6994      	ldr	r4, [r2, #24]
 8007646:	42a3      	cmp	r3, r4
 8007648:	db01      	blt.n	800764e <__sfputc_r+0x16>
 800764a:	290a      	cmp	r1, #10
 800764c:	d103      	bne.n	8007656 <__sfputc_r+0x1e>
 800764e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007652:	f7ff bd05 	b.w	8007060 <__swbuf_r>
 8007656:	6813      	ldr	r3, [r2, #0]
 8007658:	1c58      	adds	r0, r3, #1
 800765a:	6010      	str	r0, [r2, #0]
 800765c:	7019      	strb	r1, [r3, #0]
 800765e:	4608      	mov	r0, r1
 8007660:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007664:	4770      	bx	lr

08007666 <__sfputs_r>:
 8007666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007668:	4606      	mov	r6, r0
 800766a:	460f      	mov	r7, r1
 800766c:	4614      	mov	r4, r2
 800766e:	18d5      	adds	r5, r2, r3
 8007670:	42ac      	cmp	r4, r5
 8007672:	d101      	bne.n	8007678 <__sfputs_r+0x12>
 8007674:	2000      	movs	r0, #0
 8007676:	e007      	b.n	8007688 <__sfputs_r+0x22>
 8007678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800767c:	463a      	mov	r2, r7
 800767e:	4630      	mov	r0, r6
 8007680:	f7ff ffda 	bl	8007638 <__sfputc_r>
 8007684:	1c43      	adds	r3, r0, #1
 8007686:	d1f3      	bne.n	8007670 <__sfputs_r+0xa>
 8007688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800768c <_vfiprintf_r>:
 800768c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007690:	460d      	mov	r5, r1
 8007692:	b09d      	sub	sp, #116	; 0x74
 8007694:	4614      	mov	r4, r2
 8007696:	4698      	mov	r8, r3
 8007698:	4606      	mov	r6, r0
 800769a:	b118      	cbz	r0, 80076a4 <_vfiprintf_r+0x18>
 800769c:	6983      	ldr	r3, [r0, #24]
 800769e:	b90b      	cbnz	r3, 80076a4 <_vfiprintf_r+0x18>
 80076a0:	f7ff feb8 	bl	8007414 <__sinit>
 80076a4:	4b89      	ldr	r3, [pc, #548]	; (80078cc <_vfiprintf_r+0x240>)
 80076a6:	429d      	cmp	r5, r3
 80076a8:	d11b      	bne.n	80076e2 <_vfiprintf_r+0x56>
 80076aa:	6875      	ldr	r5, [r6, #4]
 80076ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076ae:	07d9      	lsls	r1, r3, #31
 80076b0:	d405      	bmi.n	80076be <_vfiprintf_r+0x32>
 80076b2:	89ab      	ldrh	r3, [r5, #12]
 80076b4:	059a      	lsls	r2, r3, #22
 80076b6:	d402      	bmi.n	80076be <_vfiprintf_r+0x32>
 80076b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076ba:	f7ff ff49 	bl	8007550 <__retarget_lock_acquire_recursive>
 80076be:	89ab      	ldrh	r3, [r5, #12]
 80076c0:	071b      	lsls	r3, r3, #28
 80076c2:	d501      	bpl.n	80076c8 <_vfiprintf_r+0x3c>
 80076c4:	692b      	ldr	r3, [r5, #16]
 80076c6:	b9eb      	cbnz	r3, 8007704 <_vfiprintf_r+0x78>
 80076c8:	4629      	mov	r1, r5
 80076ca:	4630      	mov	r0, r6
 80076cc:	f7ff fd1a 	bl	8007104 <__swsetup_r>
 80076d0:	b1c0      	cbz	r0, 8007704 <_vfiprintf_r+0x78>
 80076d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076d4:	07dc      	lsls	r4, r3, #31
 80076d6:	d50e      	bpl.n	80076f6 <_vfiprintf_r+0x6a>
 80076d8:	f04f 30ff 	mov.w	r0, #4294967295
 80076dc:	b01d      	add	sp, #116	; 0x74
 80076de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e2:	4b7b      	ldr	r3, [pc, #492]	; (80078d0 <_vfiprintf_r+0x244>)
 80076e4:	429d      	cmp	r5, r3
 80076e6:	d101      	bne.n	80076ec <_vfiprintf_r+0x60>
 80076e8:	68b5      	ldr	r5, [r6, #8]
 80076ea:	e7df      	b.n	80076ac <_vfiprintf_r+0x20>
 80076ec:	4b79      	ldr	r3, [pc, #484]	; (80078d4 <_vfiprintf_r+0x248>)
 80076ee:	429d      	cmp	r5, r3
 80076f0:	bf08      	it	eq
 80076f2:	68f5      	ldreq	r5, [r6, #12]
 80076f4:	e7da      	b.n	80076ac <_vfiprintf_r+0x20>
 80076f6:	89ab      	ldrh	r3, [r5, #12]
 80076f8:	0598      	lsls	r0, r3, #22
 80076fa:	d4ed      	bmi.n	80076d8 <_vfiprintf_r+0x4c>
 80076fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076fe:	f7ff ff28 	bl	8007552 <__retarget_lock_release_recursive>
 8007702:	e7e9      	b.n	80076d8 <_vfiprintf_r+0x4c>
 8007704:	2300      	movs	r3, #0
 8007706:	9309      	str	r3, [sp, #36]	; 0x24
 8007708:	2320      	movs	r3, #32
 800770a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800770e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007712:	2330      	movs	r3, #48	; 0x30
 8007714:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80078d8 <_vfiprintf_r+0x24c>
 8007718:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800771c:	f04f 0901 	mov.w	r9, #1
 8007720:	4623      	mov	r3, r4
 8007722:	469a      	mov	sl, r3
 8007724:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007728:	b10a      	cbz	r2, 800772e <_vfiprintf_r+0xa2>
 800772a:	2a25      	cmp	r2, #37	; 0x25
 800772c:	d1f9      	bne.n	8007722 <_vfiprintf_r+0x96>
 800772e:	ebba 0b04 	subs.w	fp, sl, r4
 8007732:	d00b      	beq.n	800774c <_vfiprintf_r+0xc0>
 8007734:	465b      	mov	r3, fp
 8007736:	4622      	mov	r2, r4
 8007738:	4629      	mov	r1, r5
 800773a:	4630      	mov	r0, r6
 800773c:	f7ff ff93 	bl	8007666 <__sfputs_r>
 8007740:	3001      	adds	r0, #1
 8007742:	f000 80aa 	beq.w	800789a <_vfiprintf_r+0x20e>
 8007746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007748:	445a      	add	r2, fp
 800774a:	9209      	str	r2, [sp, #36]	; 0x24
 800774c:	f89a 3000 	ldrb.w	r3, [sl]
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 80a2 	beq.w	800789a <_vfiprintf_r+0x20e>
 8007756:	2300      	movs	r3, #0
 8007758:	f04f 32ff 	mov.w	r2, #4294967295
 800775c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007760:	f10a 0a01 	add.w	sl, sl, #1
 8007764:	9304      	str	r3, [sp, #16]
 8007766:	9307      	str	r3, [sp, #28]
 8007768:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800776c:	931a      	str	r3, [sp, #104]	; 0x68
 800776e:	4654      	mov	r4, sl
 8007770:	2205      	movs	r2, #5
 8007772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007776:	4858      	ldr	r0, [pc, #352]	; (80078d8 <_vfiprintf_r+0x24c>)
 8007778:	f7f8 fd3a 	bl	80001f0 <memchr>
 800777c:	9a04      	ldr	r2, [sp, #16]
 800777e:	b9d8      	cbnz	r0, 80077b8 <_vfiprintf_r+0x12c>
 8007780:	06d1      	lsls	r1, r2, #27
 8007782:	bf44      	itt	mi
 8007784:	2320      	movmi	r3, #32
 8007786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800778a:	0713      	lsls	r3, r2, #28
 800778c:	bf44      	itt	mi
 800778e:	232b      	movmi	r3, #43	; 0x2b
 8007790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007794:	f89a 3000 	ldrb.w	r3, [sl]
 8007798:	2b2a      	cmp	r3, #42	; 0x2a
 800779a:	d015      	beq.n	80077c8 <_vfiprintf_r+0x13c>
 800779c:	9a07      	ldr	r2, [sp, #28]
 800779e:	4654      	mov	r4, sl
 80077a0:	2000      	movs	r0, #0
 80077a2:	f04f 0c0a 	mov.w	ip, #10
 80077a6:	4621      	mov	r1, r4
 80077a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ac:	3b30      	subs	r3, #48	; 0x30
 80077ae:	2b09      	cmp	r3, #9
 80077b0:	d94e      	bls.n	8007850 <_vfiprintf_r+0x1c4>
 80077b2:	b1b0      	cbz	r0, 80077e2 <_vfiprintf_r+0x156>
 80077b4:	9207      	str	r2, [sp, #28]
 80077b6:	e014      	b.n	80077e2 <_vfiprintf_r+0x156>
 80077b8:	eba0 0308 	sub.w	r3, r0, r8
 80077bc:	fa09 f303 	lsl.w	r3, r9, r3
 80077c0:	4313      	orrs	r3, r2
 80077c2:	9304      	str	r3, [sp, #16]
 80077c4:	46a2      	mov	sl, r4
 80077c6:	e7d2      	b.n	800776e <_vfiprintf_r+0xe2>
 80077c8:	9b03      	ldr	r3, [sp, #12]
 80077ca:	1d19      	adds	r1, r3, #4
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	9103      	str	r1, [sp, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	bfbb      	ittet	lt
 80077d4:	425b      	neglt	r3, r3
 80077d6:	f042 0202 	orrlt.w	r2, r2, #2
 80077da:	9307      	strge	r3, [sp, #28]
 80077dc:	9307      	strlt	r3, [sp, #28]
 80077de:	bfb8      	it	lt
 80077e0:	9204      	strlt	r2, [sp, #16]
 80077e2:	7823      	ldrb	r3, [r4, #0]
 80077e4:	2b2e      	cmp	r3, #46	; 0x2e
 80077e6:	d10c      	bne.n	8007802 <_vfiprintf_r+0x176>
 80077e8:	7863      	ldrb	r3, [r4, #1]
 80077ea:	2b2a      	cmp	r3, #42	; 0x2a
 80077ec:	d135      	bne.n	800785a <_vfiprintf_r+0x1ce>
 80077ee:	9b03      	ldr	r3, [sp, #12]
 80077f0:	1d1a      	adds	r2, r3, #4
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	9203      	str	r2, [sp, #12]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	bfb8      	it	lt
 80077fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80077fe:	3402      	adds	r4, #2
 8007800:	9305      	str	r3, [sp, #20]
 8007802:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80078e8 <_vfiprintf_r+0x25c>
 8007806:	7821      	ldrb	r1, [r4, #0]
 8007808:	2203      	movs	r2, #3
 800780a:	4650      	mov	r0, sl
 800780c:	f7f8 fcf0 	bl	80001f0 <memchr>
 8007810:	b140      	cbz	r0, 8007824 <_vfiprintf_r+0x198>
 8007812:	2340      	movs	r3, #64	; 0x40
 8007814:	eba0 000a 	sub.w	r0, r0, sl
 8007818:	fa03 f000 	lsl.w	r0, r3, r0
 800781c:	9b04      	ldr	r3, [sp, #16]
 800781e:	4303      	orrs	r3, r0
 8007820:	3401      	adds	r4, #1
 8007822:	9304      	str	r3, [sp, #16]
 8007824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007828:	482c      	ldr	r0, [pc, #176]	; (80078dc <_vfiprintf_r+0x250>)
 800782a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800782e:	2206      	movs	r2, #6
 8007830:	f7f8 fcde 	bl	80001f0 <memchr>
 8007834:	2800      	cmp	r0, #0
 8007836:	d03f      	beq.n	80078b8 <_vfiprintf_r+0x22c>
 8007838:	4b29      	ldr	r3, [pc, #164]	; (80078e0 <_vfiprintf_r+0x254>)
 800783a:	bb1b      	cbnz	r3, 8007884 <_vfiprintf_r+0x1f8>
 800783c:	9b03      	ldr	r3, [sp, #12]
 800783e:	3307      	adds	r3, #7
 8007840:	f023 0307 	bic.w	r3, r3, #7
 8007844:	3308      	adds	r3, #8
 8007846:	9303      	str	r3, [sp, #12]
 8007848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800784a:	443b      	add	r3, r7
 800784c:	9309      	str	r3, [sp, #36]	; 0x24
 800784e:	e767      	b.n	8007720 <_vfiprintf_r+0x94>
 8007850:	fb0c 3202 	mla	r2, ip, r2, r3
 8007854:	460c      	mov	r4, r1
 8007856:	2001      	movs	r0, #1
 8007858:	e7a5      	b.n	80077a6 <_vfiprintf_r+0x11a>
 800785a:	2300      	movs	r3, #0
 800785c:	3401      	adds	r4, #1
 800785e:	9305      	str	r3, [sp, #20]
 8007860:	4619      	mov	r1, r3
 8007862:	f04f 0c0a 	mov.w	ip, #10
 8007866:	4620      	mov	r0, r4
 8007868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800786c:	3a30      	subs	r2, #48	; 0x30
 800786e:	2a09      	cmp	r2, #9
 8007870:	d903      	bls.n	800787a <_vfiprintf_r+0x1ee>
 8007872:	2b00      	cmp	r3, #0
 8007874:	d0c5      	beq.n	8007802 <_vfiprintf_r+0x176>
 8007876:	9105      	str	r1, [sp, #20]
 8007878:	e7c3      	b.n	8007802 <_vfiprintf_r+0x176>
 800787a:	fb0c 2101 	mla	r1, ip, r1, r2
 800787e:	4604      	mov	r4, r0
 8007880:	2301      	movs	r3, #1
 8007882:	e7f0      	b.n	8007866 <_vfiprintf_r+0x1da>
 8007884:	ab03      	add	r3, sp, #12
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	462a      	mov	r2, r5
 800788a:	4b16      	ldr	r3, [pc, #88]	; (80078e4 <_vfiprintf_r+0x258>)
 800788c:	a904      	add	r1, sp, #16
 800788e:	4630      	mov	r0, r6
 8007890:	f3af 8000 	nop.w
 8007894:	4607      	mov	r7, r0
 8007896:	1c78      	adds	r0, r7, #1
 8007898:	d1d6      	bne.n	8007848 <_vfiprintf_r+0x1bc>
 800789a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800789c:	07d9      	lsls	r1, r3, #31
 800789e:	d405      	bmi.n	80078ac <_vfiprintf_r+0x220>
 80078a0:	89ab      	ldrh	r3, [r5, #12]
 80078a2:	059a      	lsls	r2, r3, #22
 80078a4:	d402      	bmi.n	80078ac <_vfiprintf_r+0x220>
 80078a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078a8:	f7ff fe53 	bl	8007552 <__retarget_lock_release_recursive>
 80078ac:	89ab      	ldrh	r3, [r5, #12]
 80078ae:	065b      	lsls	r3, r3, #25
 80078b0:	f53f af12 	bmi.w	80076d8 <_vfiprintf_r+0x4c>
 80078b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078b6:	e711      	b.n	80076dc <_vfiprintf_r+0x50>
 80078b8:	ab03      	add	r3, sp, #12
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	462a      	mov	r2, r5
 80078be:	4b09      	ldr	r3, [pc, #36]	; (80078e4 <_vfiprintf_r+0x258>)
 80078c0:	a904      	add	r1, sp, #16
 80078c2:	4630      	mov	r0, r6
 80078c4:	f000 f880 	bl	80079c8 <_printf_i>
 80078c8:	e7e4      	b.n	8007894 <_vfiprintf_r+0x208>
 80078ca:	bf00      	nop
 80078cc:	08007f58 	.word	0x08007f58
 80078d0:	08007f78 	.word	0x08007f78
 80078d4:	08007f38 	.word	0x08007f38
 80078d8:	08007f98 	.word	0x08007f98
 80078dc:	08007fa2 	.word	0x08007fa2
 80078e0:	00000000 	.word	0x00000000
 80078e4:	08007667 	.word	0x08007667
 80078e8:	08007f9e 	.word	0x08007f9e

080078ec <_printf_common>:
 80078ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078f0:	4616      	mov	r6, r2
 80078f2:	4699      	mov	r9, r3
 80078f4:	688a      	ldr	r2, [r1, #8]
 80078f6:	690b      	ldr	r3, [r1, #16]
 80078f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078fc:	4293      	cmp	r3, r2
 80078fe:	bfb8      	it	lt
 8007900:	4613      	movlt	r3, r2
 8007902:	6033      	str	r3, [r6, #0]
 8007904:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007908:	4607      	mov	r7, r0
 800790a:	460c      	mov	r4, r1
 800790c:	b10a      	cbz	r2, 8007912 <_printf_common+0x26>
 800790e:	3301      	adds	r3, #1
 8007910:	6033      	str	r3, [r6, #0]
 8007912:	6823      	ldr	r3, [r4, #0]
 8007914:	0699      	lsls	r1, r3, #26
 8007916:	bf42      	ittt	mi
 8007918:	6833      	ldrmi	r3, [r6, #0]
 800791a:	3302      	addmi	r3, #2
 800791c:	6033      	strmi	r3, [r6, #0]
 800791e:	6825      	ldr	r5, [r4, #0]
 8007920:	f015 0506 	ands.w	r5, r5, #6
 8007924:	d106      	bne.n	8007934 <_printf_common+0x48>
 8007926:	f104 0a19 	add.w	sl, r4, #25
 800792a:	68e3      	ldr	r3, [r4, #12]
 800792c:	6832      	ldr	r2, [r6, #0]
 800792e:	1a9b      	subs	r3, r3, r2
 8007930:	42ab      	cmp	r3, r5
 8007932:	dc26      	bgt.n	8007982 <_printf_common+0x96>
 8007934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007938:	1e13      	subs	r3, r2, #0
 800793a:	6822      	ldr	r2, [r4, #0]
 800793c:	bf18      	it	ne
 800793e:	2301      	movne	r3, #1
 8007940:	0692      	lsls	r2, r2, #26
 8007942:	d42b      	bmi.n	800799c <_printf_common+0xb0>
 8007944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007948:	4649      	mov	r1, r9
 800794a:	4638      	mov	r0, r7
 800794c:	47c0      	blx	r8
 800794e:	3001      	adds	r0, #1
 8007950:	d01e      	beq.n	8007990 <_printf_common+0xa4>
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	68e5      	ldr	r5, [r4, #12]
 8007956:	6832      	ldr	r2, [r6, #0]
 8007958:	f003 0306 	and.w	r3, r3, #6
 800795c:	2b04      	cmp	r3, #4
 800795e:	bf08      	it	eq
 8007960:	1aad      	subeq	r5, r5, r2
 8007962:	68a3      	ldr	r3, [r4, #8]
 8007964:	6922      	ldr	r2, [r4, #16]
 8007966:	bf0c      	ite	eq
 8007968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800796c:	2500      	movne	r5, #0
 800796e:	4293      	cmp	r3, r2
 8007970:	bfc4      	itt	gt
 8007972:	1a9b      	subgt	r3, r3, r2
 8007974:	18ed      	addgt	r5, r5, r3
 8007976:	2600      	movs	r6, #0
 8007978:	341a      	adds	r4, #26
 800797a:	42b5      	cmp	r5, r6
 800797c:	d11a      	bne.n	80079b4 <_printf_common+0xc8>
 800797e:	2000      	movs	r0, #0
 8007980:	e008      	b.n	8007994 <_printf_common+0xa8>
 8007982:	2301      	movs	r3, #1
 8007984:	4652      	mov	r2, sl
 8007986:	4649      	mov	r1, r9
 8007988:	4638      	mov	r0, r7
 800798a:	47c0      	blx	r8
 800798c:	3001      	adds	r0, #1
 800798e:	d103      	bne.n	8007998 <_printf_common+0xac>
 8007990:	f04f 30ff 	mov.w	r0, #4294967295
 8007994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007998:	3501      	adds	r5, #1
 800799a:	e7c6      	b.n	800792a <_printf_common+0x3e>
 800799c:	18e1      	adds	r1, r4, r3
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	2030      	movs	r0, #48	; 0x30
 80079a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079a6:	4422      	add	r2, r4
 80079a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079b0:	3302      	adds	r3, #2
 80079b2:	e7c7      	b.n	8007944 <_printf_common+0x58>
 80079b4:	2301      	movs	r3, #1
 80079b6:	4622      	mov	r2, r4
 80079b8:	4649      	mov	r1, r9
 80079ba:	4638      	mov	r0, r7
 80079bc:	47c0      	blx	r8
 80079be:	3001      	adds	r0, #1
 80079c0:	d0e6      	beq.n	8007990 <_printf_common+0xa4>
 80079c2:	3601      	adds	r6, #1
 80079c4:	e7d9      	b.n	800797a <_printf_common+0x8e>
	...

080079c8 <_printf_i>:
 80079c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079cc:	7e0f      	ldrb	r7, [r1, #24]
 80079ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079d0:	2f78      	cmp	r7, #120	; 0x78
 80079d2:	4691      	mov	r9, r2
 80079d4:	4680      	mov	r8, r0
 80079d6:	460c      	mov	r4, r1
 80079d8:	469a      	mov	sl, r3
 80079da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079de:	d807      	bhi.n	80079f0 <_printf_i+0x28>
 80079e0:	2f62      	cmp	r7, #98	; 0x62
 80079e2:	d80a      	bhi.n	80079fa <_printf_i+0x32>
 80079e4:	2f00      	cmp	r7, #0
 80079e6:	f000 80d8 	beq.w	8007b9a <_printf_i+0x1d2>
 80079ea:	2f58      	cmp	r7, #88	; 0x58
 80079ec:	f000 80a3 	beq.w	8007b36 <_printf_i+0x16e>
 80079f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079f8:	e03a      	b.n	8007a70 <_printf_i+0xa8>
 80079fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079fe:	2b15      	cmp	r3, #21
 8007a00:	d8f6      	bhi.n	80079f0 <_printf_i+0x28>
 8007a02:	a101      	add	r1, pc, #4	; (adr r1, 8007a08 <_printf_i+0x40>)
 8007a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a08:	08007a61 	.word	0x08007a61
 8007a0c:	08007a75 	.word	0x08007a75
 8007a10:	080079f1 	.word	0x080079f1
 8007a14:	080079f1 	.word	0x080079f1
 8007a18:	080079f1 	.word	0x080079f1
 8007a1c:	080079f1 	.word	0x080079f1
 8007a20:	08007a75 	.word	0x08007a75
 8007a24:	080079f1 	.word	0x080079f1
 8007a28:	080079f1 	.word	0x080079f1
 8007a2c:	080079f1 	.word	0x080079f1
 8007a30:	080079f1 	.word	0x080079f1
 8007a34:	08007b81 	.word	0x08007b81
 8007a38:	08007aa5 	.word	0x08007aa5
 8007a3c:	08007b63 	.word	0x08007b63
 8007a40:	080079f1 	.word	0x080079f1
 8007a44:	080079f1 	.word	0x080079f1
 8007a48:	08007ba3 	.word	0x08007ba3
 8007a4c:	080079f1 	.word	0x080079f1
 8007a50:	08007aa5 	.word	0x08007aa5
 8007a54:	080079f1 	.word	0x080079f1
 8007a58:	080079f1 	.word	0x080079f1
 8007a5c:	08007b6b 	.word	0x08007b6b
 8007a60:	682b      	ldr	r3, [r5, #0]
 8007a62:	1d1a      	adds	r2, r3, #4
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	602a      	str	r2, [r5, #0]
 8007a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a70:	2301      	movs	r3, #1
 8007a72:	e0a3      	b.n	8007bbc <_printf_i+0x1f4>
 8007a74:	6820      	ldr	r0, [r4, #0]
 8007a76:	6829      	ldr	r1, [r5, #0]
 8007a78:	0606      	lsls	r6, r0, #24
 8007a7a:	f101 0304 	add.w	r3, r1, #4
 8007a7e:	d50a      	bpl.n	8007a96 <_printf_i+0xce>
 8007a80:	680e      	ldr	r6, [r1, #0]
 8007a82:	602b      	str	r3, [r5, #0]
 8007a84:	2e00      	cmp	r6, #0
 8007a86:	da03      	bge.n	8007a90 <_printf_i+0xc8>
 8007a88:	232d      	movs	r3, #45	; 0x2d
 8007a8a:	4276      	negs	r6, r6
 8007a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a90:	485e      	ldr	r0, [pc, #376]	; (8007c0c <_printf_i+0x244>)
 8007a92:	230a      	movs	r3, #10
 8007a94:	e019      	b.n	8007aca <_printf_i+0x102>
 8007a96:	680e      	ldr	r6, [r1, #0]
 8007a98:	602b      	str	r3, [r5, #0]
 8007a9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a9e:	bf18      	it	ne
 8007aa0:	b236      	sxthne	r6, r6
 8007aa2:	e7ef      	b.n	8007a84 <_printf_i+0xbc>
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	6820      	ldr	r0, [r4, #0]
 8007aa8:	1d19      	adds	r1, r3, #4
 8007aaa:	6029      	str	r1, [r5, #0]
 8007aac:	0601      	lsls	r1, r0, #24
 8007aae:	d501      	bpl.n	8007ab4 <_printf_i+0xec>
 8007ab0:	681e      	ldr	r6, [r3, #0]
 8007ab2:	e002      	b.n	8007aba <_printf_i+0xf2>
 8007ab4:	0646      	lsls	r6, r0, #25
 8007ab6:	d5fb      	bpl.n	8007ab0 <_printf_i+0xe8>
 8007ab8:	881e      	ldrh	r6, [r3, #0]
 8007aba:	4854      	ldr	r0, [pc, #336]	; (8007c0c <_printf_i+0x244>)
 8007abc:	2f6f      	cmp	r7, #111	; 0x6f
 8007abe:	bf0c      	ite	eq
 8007ac0:	2308      	moveq	r3, #8
 8007ac2:	230a      	movne	r3, #10
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007aca:	6865      	ldr	r5, [r4, #4]
 8007acc:	60a5      	str	r5, [r4, #8]
 8007ace:	2d00      	cmp	r5, #0
 8007ad0:	bfa2      	ittt	ge
 8007ad2:	6821      	ldrge	r1, [r4, #0]
 8007ad4:	f021 0104 	bicge.w	r1, r1, #4
 8007ad8:	6021      	strge	r1, [r4, #0]
 8007ada:	b90e      	cbnz	r6, 8007ae0 <_printf_i+0x118>
 8007adc:	2d00      	cmp	r5, #0
 8007ade:	d04d      	beq.n	8007b7c <_printf_i+0x1b4>
 8007ae0:	4615      	mov	r5, r2
 8007ae2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ae6:	fb03 6711 	mls	r7, r3, r1, r6
 8007aea:	5dc7      	ldrb	r7, [r0, r7]
 8007aec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007af0:	4637      	mov	r7, r6
 8007af2:	42bb      	cmp	r3, r7
 8007af4:	460e      	mov	r6, r1
 8007af6:	d9f4      	bls.n	8007ae2 <_printf_i+0x11a>
 8007af8:	2b08      	cmp	r3, #8
 8007afa:	d10b      	bne.n	8007b14 <_printf_i+0x14c>
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	07de      	lsls	r6, r3, #31
 8007b00:	d508      	bpl.n	8007b14 <_printf_i+0x14c>
 8007b02:	6923      	ldr	r3, [r4, #16]
 8007b04:	6861      	ldr	r1, [r4, #4]
 8007b06:	4299      	cmp	r1, r3
 8007b08:	bfde      	ittt	le
 8007b0a:	2330      	movle	r3, #48	; 0x30
 8007b0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b14:	1b52      	subs	r2, r2, r5
 8007b16:	6122      	str	r2, [r4, #16]
 8007b18:	f8cd a000 	str.w	sl, [sp]
 8007b1c:	464b      	mov	r3, r9
 8007b1e:	aa03      	add	r2, sp, #12
 8007b20:	4621      	mov	r1, r4
 8007b22:	4640      	mov	r0, r8
 8007b24:	f7ff fee2 	bl	80078ec <_printf_common>
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d14c      	bne.n	8007bc6 <_printf_i+0x1fe>
 8007b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b30:	b004      	add	sp, #16
 8007b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b36:	4835      	ldr	r0, [pc, #212]	; (8007c0c <_printf_i+0x244>)
 8007b38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b3c:	6829      	ldr	r1, [r5, #0]
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b44:	6029      	str	r1, [r5, #0]
 8007b46:	061d      	lsls	r5, r3, #24
 8007b48:	d514      	bpl.n	8007b74 <_printf_i+0x1ac>
 8007b4a:	07df      	lsls	r7, r3, #31
 8007b4c:	bf44      	itt	mi
 8007b4e:	f043 0320 	orrmi.w	r3, r3, #32
 8007b52:	6023      	strmi	r3, [r4, #0]
 8007b54:	b91e      	cbnz	r6, 8007b5e <_printf_i+0x196>
 8007b56:	6823      	ldr	r3, [r4, #0]
 8007b58:	f023 0320 	bic.w	r3, r3, #32
 8007b5c:	6023      	str	r3, [r4, #0]
 8007b5e:	2310      	movs	r3, #16
 8007b60:	e7b0      	b.n	8007ac4 <_printf_i+0xfc>
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	f043 0320 	orr.w	r3, r3, #32
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	2378      	movs	r3, #120	; 0x78
 8007b6c:	4828      	ldr	r0, [pc, #160]	; (8007c10 <_printf_i+0x248>)
 8007b6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b72:	e7e3      	b.n	8007b3c <_printf_i+0x174>
 8007b74:	0659      	lsls	r1, r3, #25
 8007b76:	bf48      	it	mi
 8007b78:	b2b6      	uxthmi	r6, r6
 8007b7a:	e7e6      	b.n	8007b4a <_printf_i+0x182>
 8007b7c:	4615      	mov	r5, r2
 8007b7e:	e7bb      	b.n	8007af8 <_printf_i+0x130>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	6826      	ldr	r6, [r4, #0]
 8007b84:	6961      	ldr	r1, [r4, #20]
 8007b86:	1d18      	adds	r0, r3, #4
 8007b88:	6028      	str	r0, [r5, #0]
 8007b8a:	0635      	lsls	r5, r6, #24
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	d501      	bpl.n	8007b94 <_printf_i+0x1cc>
 8007b90:	6019      	str	r1, [r3, #0]
 8007b92:	e002      	b.n	8007b9a <_printf_i+0x1d2>
 8007b94:	0670      	lsls	r0, r6, #25
 8007b96:	d5fb      	bpl.n	8007b90 <_printf_i+0x1c8>
 8007b98:	8019      	strh	r1, [r3, #0]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	6123      	str	r3, [r4, #16]
 8007b9e:	4615      	mov	r5, r2
 8007ba0:	e7ba      	b.n	8007b18 <_printf_i+0x150>
 8007ba2:	682b      	ldr	r3, [r5, #0]
 8007ba4:	1d1a      	adds	r2, r3, #4
 8007ba6:	602a      	str	r2, [r5, #0]
 8007ba8:	681d      	ldr	r5, [r3, #0]
 8007baa:	6862      	ldr	r2, [r4, #4]
 8007bac:	2100      	movs	r1, #0
 8007bae:	4628      	mov	r0, r5
 8007bb0:	f7f8 fb1e 	bl	80001f0 <memchr>
 8007bb4:	b108      	cbz	r0, 8007bba <_printf_i+0x1f2>
 8007bb6:	1b40      	subs	r0, r0, r5
 8007bb8:	6060      	str	r0, [r4, #4]
 8007bba:	6863      	ldr	r3, [r4, #4]
 8007bbc:	6123      	str	r3, [r4, #16]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bc4:	e7a8      	b.n	8007b18 <_printf_i+0x150>
 8007bc6:	6923      	ldr	r3, [r4, #16]
 8007bc8:	462a      	mov	r2, r5
 8007bca:	4649      	mov	r1, r9
 8007bcc:	4640      	mov	r0, r8
 8007bce:	47d0      	blx	sl
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	d0ab      	beq.n	8007b2c <_printf_i+0x164>
 8007bd4:	6823      	ldr	r3, [r4, #0]
 8007bd6:	079b      	lsls	r3, r3, #30
 8007bd8:	d413      	bmi.n	8007c02 <_printf_i+0x23a>
 8007bda:	68e0      	ldr	r0, [r4, #12]
 8007bdc:	9b03      	ldr	r3, [sp, #12]
 8007bde:	4298      	cmp	r0, r3
 8007be0:	bfb8      	it	lt
 8007be2:	4618      	movlt	r0, r3
 8007be4:	e7a4      	b.n	8007b30 <_printf_i+0x168>
 8007be6:	2301      	movs	r3, #1
 8007be8:	4632      	mov	r2, r6
 8007bea:	4649      	mov	r1, r9
 8007bec:	4640      	mov	r0, r8
 8007bee:	47d0      	blx	sl
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d09b      	beq.n	8007b2c <_printf_i+0x164>
 8007bf4:	3501      	adds	r5, #1
 8007bf6:	68e3      	ldr	r3, [r4, #12]
 8007bf8:	9903      	ldr	r1, [sp, #12]
 8007bfa:	1a5b      	subs	r3, r3, r1
 8007bfc:	42ab      	cmp	r3, r5
 8007bfe:	dcf2      	bgt.n	8007be6 <_printf_i+0x21e>
 8007c00:	e7eb      	b.n	8007bda <_printf_i+0x212>
 8007c02:	2500      	movs	r5, #0
 8007c04:	f104 0619 	add.w	r6, r4, #25
 8007c08:	e7f5      	b.n	8007bf6 <_printf_i+0x22e>
 8007c0a:	bf00      	nop
 8007c0c:	08007fa9 	.word	0x08007fa9
 8007c10:	08007fba 	.word	0x08007fba

08007c14 <__sread>:
 8007c14:	b510      	push	{r4, lr}
 8007c16:	460c      	mov	r4, r1
 8007c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c1c:	f000 f894 	bl	8007d48 <_read_r>
 8007c20:	2800      	cmp	r0, #0
 8007c22:	bfab      	itete	ge
 8007c24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c26:	89a3      	ldrhlt	r3, [r4, #12]
 8007c28:	181b      	addge	r3, r3, r0
 8007c2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c2e:	bfac      	ite	ge
 8007c30:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c32:	81a3      	strhlt	r3, [r4, #12]
 8007c34:	bd10      	pop	{r4, pc}

08007c36 <__swrite>:
 8007c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3a:	461f      	mov	r7, r3
 8007c3c:	898b      	ldrh	r3, [r1, #12]
 8007c3e:	05db      	lsls	r3, r3, #23
 8007c40:	4605      	mov	r5, r0
 8007c42:	460c      	mov	r4, r1
 8007c44:	4616      	mov	r6, r2
 8007c46:	d505      	bpl.n	8007c54 <__swrite+0x1e>
 8007c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f000 f868 	bl	8007d24 <_lseek_r>
 8007c54:	89a3      	ldrh	r3, [r4, #12]
 8007c56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c5e:	81a3      	strh	r3, [r4, #12]
 8007c60:	4632      	mov	r2, r6
 8007c62:	463b      	mov	r3, r7
 8007c64:	4628      	mov	r0, r5
 8007c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c6a:	f000 b817 	b.w	8007c9c <_write_r>

08007c6e <__sseek>:
 8007c6e:	b510      	push	{r4, lr}
 8007c70:	460c      	mov	r4, r1
 8007c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c76:	f000 f855 	bl	8007d24 <_lseek_r>
 8007c7a:	1c43      	adds	r3, r0, #1
 8007c7c:	89a3      	ldrh	r3, [r4, #12]
 8007c7e:	bf15      	itete	ne
 8007c80:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c8a:	81a3      	strheq	r3, [r4, #12]
 8007c8c:	bf18      	it	ne
 8007c8e:	81a3      	strhne	r3, [r4, #12]
 8007c90:	bd10      	pop	{r4, pc}

08007c92 <__sclose>:
 8007c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c96:	f000 b813 	b.w	8007cc0 <_close_r>
	...

08007c9c <_write_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	4d07      	ldr	r5, [pc, #28]	; (8007cbc <_write_r+0x20>)
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	4608      	mov	r0, r1
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	602a      	str	r2, [r5, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	f7fa f9cd 	bl	800204a <_write>
 8007cb0:	1c43      	adds	r3, r0, #1
 8007cb2:	d102      	bne.n	8007cba <_write_r+0x1e>
 8007cb4:	682b      	ldr	r3, [r5, #0]
 8007cb6:	b103      	cbz	r3, 8007cba <_write_r+0x1e>
 8007cb8:	6023      	str	r3, [r4, #0]
 8007cba:	bd38      	pop	{r3, r4, r5, pc}
 8007cbc:	2000025c 	.word	0x2000025c

08007cc0 <_close_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4d06      	ldr	r5, [pc, #24]	; (8007cdc <_close_r+0x1c>)
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	4608      	mov	r0, r1
 8007cca:	602b      	str	r3, [r5, #0]
 8007ccc:	f7fa f9d9 	bl	8002082 <_close>
 8007cd0:	1c43      	adds	r3, r0, #1
 8007cd2:	d102      	bne.n	8007cda <_close_r+0x1a>
 8007cd4:	682b      	ldr	r3, [r5, #0]
 8007cd6:	b103      	cbz	r3, 8007cda <_close_r+0x1a>
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	bd38      	pop	{r3, r4, r5, pc}
 8007cdc:	2000025c 	.word	0x2000025c

08007ce0 <_fstat_r>:
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	4d07      	ldr	r5, [pc, #28]	; (8007d00 <_fstat_r+0x20>)
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	4608      	mov	r0, r1
 8007cea:	4611      	mov	r1, r2
 8007cec:	602b      	str	r3, [r5, #0]
 8007cee:	f7fa f9d4 	bl	800209a <_fstat>
 8007cf2:	1c43      	adds	r3, r0, #1
 8007cf4:	d102      	bne.n	8007cfc <_fstat_r+0x1c>
 8007cf6:	682b      	ldr	r3, [r5, #0]
 8007cf8:	b103      	cbz	r3, 8007cfc <_fstat_r+0x1c>
 8007cfa:	6023      	str	r3, [r4, #0]
 8007cfc:	bd38      	pop	{r3, r4, r5, pc}
 8007cfe:	bf00      	nop
 8007d00:	2000025c 	.word	0x2000025c

08007d04 <_isatty_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	4d06      	ldr	r5, [pc, #24]	; (8007d20 <_isatty_r+0x1c>)
 8007d08:	2300      	movs	r3, #0
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	4608      	mov	r0, r1
 8007d0e:	602b      	str	r3, [r5, #0]
 8007d10:	f7fa f9d3 	bl	80020ba <_isatty>
 8007d14:	1c43      	adds	r3, r0, #1
 8007d16:	d102      	bne.n	8007d1e <_isatty_r+0x1a>
 8007d18:	682b      	ldr	r3, [r5, #0]
 8007d1a:	b103      	cbz	r3, 8007d1e <_isatty_r+0x1a>
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}
 8007d20:	2000025c 	.word	0x2000025c

08007d24 <_lseek_r>:
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	4d07      	ldr	r5, [pc, #28]	; (8007d44 <_lseek_r+0x20>)
 8007d28:	4604      	mov	r4, r0
 8007d2a:	4608      	mov	r0, r1
 8007d2c:	4611      	mov	r1, r2
 8007d2e:	2200      	movs	r2, #0
 8007d30:	602a      	str	r2, [r5, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	f7fa f9cc 	bl	80020d0 <_lseek>
 8007d38:	1c43      	adds	r3, r0, #1
 8007d3a:	d102      	bne.n	8007d42 <_lseek_r+0x1e>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	b103      	cbz	r3, 8007d42 <_lseek_r+0x1e>
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	bd38      	pop	{r3, r4, r5, pc}
 8007d44:	2000025c 	.word	0x2000025c

08007d48 <_read_r>:
 8007d48:	b538      	push	{r3, r4, r5, lr}
 8007d4a:	4d07      	ldr	r5, [pc, #28]	; (8007d68 <_read_r+0x20>)
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	4608      	mov	r0, r1
 8007d50:	4611      	mov	r1, r2
 8007d52:	2200      	movs	r2, #0
 8007d54:	602a      	str	r2, [r5, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	f7fa f95a 	bl	8002010 <_read>
 8007d5c:	1c43      	adds	r3, r0, #1
 8007d5e:	d102      	bne.n	8007d66 <_read_r+0x1e>
 8007d60:	682b      	ldr	r3, [r5, #0]
 8007d62:	b103      	cbz	r3, 8007d66 <_read_r+0x1e>
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	bd38      	pop	{r3, r4, r5, pc}
 8007d68:	2000025c 	.word	0x2000025c

08007d6c <_init>:
 8007d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6e:	bf00      	nop
 8007d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d72:	bc08      	pop	{r3}
 8007d74:	469e      	mov	lr, r3
 8007d76:	4770      	bx	lr

08007d78 <_fini>:
 8007d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7a:	bf00      	nop
 8007d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7e:	bc08      	pop	{r3}
 8007d80:	469e      	mov	lr, r3
 8007d82:	4770      	bx	lr
